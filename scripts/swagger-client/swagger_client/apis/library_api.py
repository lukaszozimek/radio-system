# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class LIBRARYApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_library_using_post_using_post(self, network_shortcut, library, **kwargs):
        """
        createLibrary
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_library_using_post_using_post(network_shortcut, library, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param LibraryPT library: library (required)
        :return: LibraryPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_library_using_post_using_post_with_http_info(network_shortcut, library, **kwargs)
        else:
            (data) = self.create_library_using_post_using_post_with_http_info(network_shortcut, library, **kwargs)
            return data

    def create_library_using_post_using_post_with_http_info(self, network_shortcut, library, **kwargs):
        """
        createLibrary
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_library_using_post_using_post_with_http_info(network_shortcut, library, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param LibraryPT library: library (required)
        :return: LibraryPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'library']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_library_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_library_using_post_using_post`")
        # verify the required parameter 'library' is set
        if ('library' not in params) or (params['library'] is None):
            raise ValueError("Missing the required parameter `library` when calling `create_library_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/library'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'library' in params:
            body_params = params['library']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LibraryPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_item_by_networ_shortcut_and_librar_using_delete_using_delete(self, network_shortcut, library_prefix, idx, **kwargs):
        """
        deleteItemByNetworShortcutAndLibrar
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_item_by_networ_shortcut_and_librar_using_delete_using_delete(network_shortcut, library_prefix, idx, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str library_prefix: libraryPrefix (required)
        :param str idx: idx (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_item_by_networ_shortcut_and_librar_using_delete_using_delete_with_http_info(network_shortcut, library_prefix, idx, **kwargs)
        else:
            (data) = self.delete_item_by_networ_shortcut_and_librar_using_delete_using_delete_with_http_info(network_shortcut, library_prefix, idx, **kwargs)
            return data

    def delete_item_by_networ_shortcut_and_librar_using_delete_using_delete_with_http_info(self, network_shortcut, library_prefix, idx, **kwargs):
        """
        deleteItemByNetworShortcutAndLibrar
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_item_by_networ_shortcut_and_librar_using_delete_using_delete_with_http_info(network_shortcut, library_prefix, idx, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str library_prefix: libraryPrefix (required)
        :param str idx: idx (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'library_prefix', 'idx']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_item_by_networ_shortcut_and_librar_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_item_by_networ_shortcut_and_librar_using_delete_using_delete`")
        # verify the required parameter 'library_prefix' is set
        if ('library_prefix' not in params) or (params['library_prefix'] is None):
            raise ValueError("Missing the required parameter `library_prefix` when calling `delete_item_by_networ_shortcut_and_librar_using_delete_using_delete`")
        # verify the required parameter 'idx' is set
        if ('idx' not in params) or (params['idx'] is None):
            raise ValueError("Missing the required parameter `idx` when calling `delete_item_by_networ_shortcut_and_librar_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/library/{libraryPrefix}/item/{idx}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'library_prefix' in params:
            path_params['libraryPrefix'] = params['library_prefix']
        if 'idx' in params:
            path_params['idx'] = params['idx']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_library_using_delete_using_delete(self, network_shortcut, library_prefix, **kwargs):
        """
        deleteLibrary
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_library_using_delete_using_delete(network_shortcut, library_prefix, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str library_prefix: libraryPrefix (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_library_using_delete_using_delete_with_http_info(network_shortcut, library_prefix, **kwargs)
        else:
            (data) = self.delete_library_using_delete_using_delete_with_http_info(network_shortcut, library_prefix, **kwargs)
            return data

    def delete_library_using_delete_using_delete_with_http_info(self, network_shortcut, library_prefix, **kwargs):
        """
        deleteLibrary
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_library_using_delete_using_delete_with_http_info(network_shortcut, library_prefix, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str library_prefix: libraryPrefix (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'library_prefix']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_library_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_library_using_delete_using_delete`")
        # verify the required parameter 'library_prefix' is set
        if ('library_prefix' not in params) or (params['library_prefix'] is None):
            raise ValueError("Missing the required parameter `library_prefix` when calling `delete_library_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/library/{libraryPrefix}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'library_prefix' in params:
            path_params['libraryPrefix'] = params['library_prefix']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_items_by_networ_shortcut_and_library_prefix_using_get_using_get(self, network_shortcut, library_prefix, **kwargs):
        """
        getAllItemsByNetworShortcutAndLibraryPrefix
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_items_by_networ_shortcut_and_library_prefix_using_get_using_get(network_shortcut, library_prefix, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str library_prefix: libraryPrefix (required)
        :return: LibItemPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_items_by_networ_shortcut_and_library_prefix_using_get_using_get_with_http_info(network_shortcut, library_prefix, **kwargs)
        else:
            (data) = self.get_all_items_by_networ_shortcut_and_library_prefix_using_get_using_get_with_http_info(network_shortcut, library_prefix, **kwargs)
            return data

    def get_all_items_by_networ_shortcut_and_library_prefix_using_get_using_get_with_http_info(self, network_shortcut, library_prefix, **kwargs):
        """
        getAllItemsByNetworShortcutAndLibraryPrefix
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_items_by_networ_shortcut_and_library_prefix_using_get_using_get_with_http_info(network_shortcut, library_prefix, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str library_prefix: libraryPrefix (required)
        :return: LibItemPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'library_prefix']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_items_by_networ_shortcut_and_library_prefix_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_items_by_networ_shortcut_and_library_prefix_using_get_using_get`")
        # verify the required parameter 'library_prefix' is set
        if ('library_prefix' not in params) or (params['library_prefix'] is None):
            raise ValueError("Missing the required parameter `library_prefix` when calling `get_all_items_by_networ_shortcut_and_library_prefix_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/library/{libraryPrefix}/item'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'library_prefix' in params:
            path_params['libraryPrefix'] = params['library_prefix']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LibItemPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_libraries_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllLibraries
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_libraries_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: LibraryPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_libraries_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_libraries_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_libraries_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllLibraries
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_libraries_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: LibraryPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_libraries_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_libraries_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/library'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[LibraryPT]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_item_by_networ_shortcut_and_librar_using_get_using_get(self, network_shortcut, library_prefix, idx, **kwargs):
        """
        getItemByNetworShortcutAndLibrar
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_item_by_networ_shortcut_and_librar_using_get_using_get(network_shortcut, library_prefix, idx, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str library_prefix: libraryPrefix (required)
        :param str idx: libraryPrefix (required)
        :return: LibItemPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_item_by_networ_shortcut_and_librar_using_get_using_get_with_http_info(network_shortcut, library_prefix, idx, **kwargs)
        else:
            (data) = self.get_item_by_networ_shortcut_and_librar_using_get_using_get_with_http_info(network_shortcut, library_prefix, idx, **kwargs)
            return data

    def get_item_by_networ_shortcut_and_librar_using_get_using_get_with_http_info(self, network_shortcut, library_prefix, idx, **kwargs):
        """
        getItemByNetworShortcutAndLibrar
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_item_by_networ_shortcut_and_librar_using_get_using_get_with_http_info(network_shortcut, library_prefix, idx, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str library_prefix: libraryPrefix (required)
        :param str idx: libraryPrefix (required)
        :return: LibItemPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'library_prefix', 'idx']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_item_by_networ_shortcut_and_librar_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_item_by_networ_shortcut_and_librar_using_get_using_get`")
        # verify the required parameter 'library_prefix' is set
        if ('library_prefix' not in params) or (params['library_prefix'] is None):
            raise ValueError("Missing the required parameter `library_prefix` when calling `get_item_by_networ_shortcut_and_librar_using_get_using_get`")
        # verify the required parameter 'idx' is set
        if ('idx' not in params) or (params['idx'] is None):
            raise ValueError("Missing the required parameter `idx` when calling `get_item_by_networ_shortcut_and_librar_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/library/{libraryPrefix}/item/{idx}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'library_prefix' in params:
            path_params['libraryPrefix'] = params['library_prefix']
        if 'idx' in params:
            path_params['idx'] = params['idx']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LibItemPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_library_using_get_using_get(self, network_shortcut, library_prefix, **kwargs):
        """
        getLibrary
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_library_using_get_using_get(network_shortcut, library_prefix, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str library_prefix: libraryPrefix (required)
        :return: LibraryPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_library_using_get_using_get_with_http_info(network_shortcut, library_prefix, **kwargs)
        else:
            (data) = self.get_library_using_get_using_get_with_http_info(network_shortcut, library_prefix, **kwargs)
            return data

    def get_library_using_get_using_get_with_http_info(self, network_shortcut, library_prefix, **kwargs):
        """
        getLibrary
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_library_using_get_using_get_with_http_info(network_shortcut, library_prefix, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str library_prefix: libraryPrefix (required)
        :return: LibraryPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'library_prefix']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_library_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_library_using_get_using_get`")
        # verify the required parameter 'library_prefix' is set
        if ('library_prefix' not in params) or (params['library_prefix'] is None):
            raise ValueError("Missing the required parameter `library_prefix` when calling `get_library_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/library/{libraryPrefix}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'library_prefix' in params:
            path_params['libraryPrefix'] = params['library_prefix']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LibraryPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_item_by_networ_shortcut_and_librar_using_get_using_get(self, network_shortcut, library_prefix, idx, **kwargs):
        """
        getItemStreamByNetworShortcutAndLibrar
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_item_by_networ_shortcut_and_librar_using_get_using_get(network_shortcut, library_prefix, idx, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str library_prefix: libraryPrefix (required)
        :param str idx: libraryPrefix (required)
        :return: LibResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_item_by_networ_shortcut_and_librar_using_get_using_get_with_http_info(network_shortcut, library_prefix, idx, **kwargs)
        else:
            (data) = self.stream_item_by_networ_shortcut_and_librar_using_get_using_get_with_http_info(network_shortcut, library_prefix, idx, **kwargs)
            return data

    def stream_item_by_networ_shortcut_and_librar_using_get_using_get_with_http_info(self, network_shortcut, library_prefix, idx, **kwargs):
        """
        getItemStreamByNetworShortcutAndLibrar
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_item_by_networ_shortcut_and_librar_using_get_using_get_with_http_info(network_shortcut, library_prefix, idx, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str library_prefix: libraryPrefix (required)
        :param str idx: libraryPrefix (required)
        :return: LibResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'library_prefix', 'idx']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_item_by_networ_shortcut_and_librar_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `stream_item_by_networ_shortcut_and_librar_using_get_using_get`")
        # verify the required parameter 'library_prefix' is set
        if ('library_prefix' not in params) or (params['library_prefix'] is None):
            raise ValueError("Missing the required parameter `library_prefix` when calling `stream_item_by_networ_shortcut_and_librar_using_get_using_get`")
        # verify the required parameter 'idx' is set
        if ('idx' not in params) or (params['idx'] is None):
            raise ValueError("Missing the required parameter `idx` when calling `stream_item_by_networ_shortcut_and_librar_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/library/{libraryPrefix}/item/{idx}/stream'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'library_prefix' in params:
            path_params['libraryPrefix'] = params['library_prefix']
        if 'idx' in params:
            path_params['idx'] = params['idx']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LibResponseEntity',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_item_by_networ_shortcut_and_library_prefix_using_put_using_put(self, network_shortcut, library_prefix, media_item, **kwargs):
        """
        updateItemByNetworShortcutAndLibraryPrefix
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_item_by_networ_shortcut_and_library_prefix_using_put_using_put(network_shortcut, library_prefix, media_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str library_prefix: libraryPrefix (required)
        :param LibItemPT media_item: mediaItem (required)
        :return: LibItemPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_item_by_networ_shortcut_and_library_prefix_using_put_using_put_with_http_info(network_shortcut, library_prefix, media_item, **kwargs)
        else:
            (data) = self.update_item_by_networ_shortcut_and_library_prefix_using_put_using_put_with_http_info(network_shortcut, library_prefix, media_item, **kwargs)
            return data

    def update_item_by_networ_shortcut_and_library_prefix_using_put_using_put_with_http_info(self, network_shortcut, library_prefix, media_item, **kwargs):
        """
        updateItemByNetworShortcutAndLibraryPrefix
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_item_by_networ_shortcut_and_library_prefix_using_put_using_put_with_http_info(network_shortcut, library_prefix, media_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str library_prefix: libraryPrefix (required)
        :param LibItemPT media_item: mediaItem (required)
        :return: LibItemPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'library_prefix', 'media_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_item_by_networ_shortcut_and_library_prefix_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_item_by_networ_shortcut_and_library_prefix_using_put_using_put`")
        # verify the required parameter 'library_prefix' is set
        if ('library_prefix' not in params) or (params['library_prefix'] is None):
            raise ValueError("Missing the required parameter `library_prefix` when calling `update_item_by_networ_shortcut_and_library_prefix_using_put_using_put`")
        # verify the required parameter 'media_item' is set
        if ('media_item' not in params) or (params['media_item'] is None):
            raise ValueError("Missing the required parameter `media_item` when calling `update_item_by_networ_shortcut_and_library_prefix_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/library/{libraryPrefix}/item'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'library_prefix' in params:
            path_params['libraryPrefix'] = params['library_prefix']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'media_item' in params:
            body_params = params['media_item']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LibItemPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_library_using_put_using_put(self, network_shortcut, library, **kwargs):
        """
        updateLibrary
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_library_using_put_using_put(network_shortcut, library, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param LibraryPT library: library (required)
        :return: LibraryPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_library_using_put_using_put_with_http_info(network_shortcut, library, **kwargs)
        else:
            (data) = self.update_library_using_put_using_put_with_http_info(network_shortcut, library, **kwargs)
            return data

    def update_library_using_put_using_put_with_http_info(self, network_shortcut, library, **kwargs):
        """
        updateLibrary
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_library_using_put_using_put_with_http_info(network_shortcut, library, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param LibraryPT library: library (required)
        :return: LibraryPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'library']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_library_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_library_using_put_using_put`")
        # verify the required parameter 'library' is set
        if ('library' not in params) or (params['library'] is None):
            raise ValueError("Missing the required parameter `library` when calling `update_library_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/library'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'library' in params:
            body_params = params['library']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LibraryPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def upload_items_by_networ_shortcut_and_library_prefix_using_post(self, network_shortcut, library_prefix, files, **kwargs):
        """
        uploadItemsByNetworShortcutAndLibraryPrefix
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_items_by_networ_shortcut_and_library_prefix_using_post(network_shortcut, library_prefix, files, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str library_prefix: libraryPrefix (required)
        :param file files: (required)
        :return: LibItemPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.upload_items_by_networ_shortcut_and_library_prefix_using_post_with_http_info(network_shortcut, library_prefix, files, **kwargs)
        else:
            (data) = self.upload_items_by_networ_shortcut_and_library_prefix_using_post_with_http_info(network_shortcut, library_prefix, files, **kwargs)
            return data

    def upload_items_by_networ_shortcut_and_library_prefix_using_post_with_http_info(self, network_shortcut, library_prefix, files, **kwargs):
        """
        uploadItemsByNetworShortcutAndLibraryPrefix
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_items_by_networ_shortcut_and_library_prefix_using_post_with_http_info(network_shortcut, library_prefix, files, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str library_prefix: libraryPrefix (required)
        :param file files: (required)
        :return: LibItemPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'library_prefix', 'files']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_items_by_networ_shortcut_and_library_prefix_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `upload_items_by_networ_shortcut_and_library_prefix_using_post`")
        # verify the required parameter 'library_prefix' is set
        if ('library_prefix' not in params) or (params['library_prefix'] is None):
            raise ValueError("Missing the required parameter `library_prefix` when calling `upload_items_by_networ_shortcut_and_library_prefix_using_post`")
        # verify the required parameter 'files' is set
        if ('files' not in params) or (params['files'] is None):
            raise ValueError("Missing the required parameter `files` when calling `upload_items_by_networ_shortcut_and_library_prefix_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/library/{libraryPrefix}/item'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'library_prefix' in params:
            path_params['libraryPrefix'] = params['library_prefix']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'files' in params:
            local_var_files['files'] = params['files']

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[LibItemPT]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_random_block_from_selected_library_using_get(self, network_shortcut, library_prefix, **kwargs):
        """
        getRandomBlockFromSelectedLibrary
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_random_block_from_selected_library_using_get(network_shortcut, library_prefix, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str library_prefix: libraryPrefix (required)
        :param int size: size
        :param int max_length: maxLength
        :return: LibResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_random_block_from_selected_library_using_get_with_http_info(network_shortcut, library_prefix, **kwargs)
        else:
            (data) = self.get_random_block_from_selected_library_using_get_with_http_info(network_shortcut, library_prefix, **kwargs)
            return data

    def get_random_block_from_selected_library_using_get_with_http_info(self, network_shortcut, library_prefix, **kwargs):
        """
        getRandomBlockFromSelectedLibrary
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_random_block_from_selected_library_using_get_with_http_info(network_shortcut, library_prefix, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str library_prefix: libraryPrefix (required)
        :param int size: size
        :param int max_length: maxLength
        :return: LibResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'library_prefix', 'size', 'max_length']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_random_block_from_selected_library_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_random_block_from_selected_library_using_get`")
        # verify the required parameter 'library_prefix' is set
        if ('library_prefix' not in params) or (params['library_prefix'] is None):
            raise ValueError("Missing the required parameter `library_prefix` when calling `get_random_block_from_selected_library_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/library/{libraryPrefix}/randomBlock'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'library_prefix' in params:
            path_params['libraryPrefix'] = params['library_prefix']

        query_params = {}
        if 'size' in params:
            query_params['size'] = params['size']
        if 'max_length' in params:
            query_params['maxLength'] = params['max_length']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SchBlockPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
