# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DICTIONARYApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_area_using_post_using_post(self, network_shortcut, core_area_pt, **kwargs):
        """
        createArea
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_area_using_post_using_post(network_shortcut, core_area_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CoreAreaPT core_area_pt: coreAreaPT (required)
        :return: CoreAreaPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_area_using_post_using_post_with_http_info(network_shortcut, core_area_pt, **kwargs)
        else:
            (data) = self.create_area_using_post_using_post_with_http_info(network_shortcut, core_area_pt, **kwargs)
            return data

    def create_area_using_post_using_post_with_http_info(self, network_shortcut, core_area_pt, **kwargs):
        """
        createArea
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_area_using_post_using_post_with_http_info(network_shortcut, core_area_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CoreAreaPT core_area_pt: coreAreaPT (required)
        :return: CoreAreaPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'core_area_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_area_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_area_using_post_using_post`")
        # verify the required parameter 'core_area_pt' is set
        if ('core_area_pt' not in params) or (params['core_area_pt'] is None):
            raise ValueError("Missing the required parameter `core_area_pt` when calling `create_area_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/area'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'core_area_pt' in params:
            body_params = params['core_area_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CoreAreaPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_campaing_status_using_post_using_post(self, network_shortcut, conf_campaing_status_pt, **kwargs):
        """
        createCampaingStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_campaing_status_using_post_using_post(network_shortcut, conf_campaing_status_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfCampaingStatusPT conf_campaing_status_pt: confCampaingStatusPT (required)
        :return: ConfCampaingStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_campaing_status_using_post_using_post_with_http_info(network_shortcut, conf_campaing_status_pt, **kwargs)
        else:
            (data) = self.create_campaing_status_using_post_using_post_with_http_info(network_shortcut, conf_campaing_status_pt, **kwargs)
            return data

    def create_campaing_status_using_post_using_post_with_http_info(self, network_shortcut, conf_campaing_status_pt, **kwargs):
        """
        createCampaingStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_campaing_status_using_post_using_post_with_http_info(network_shortcut, conf_campaing_status_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfCampaingStatusPT conf_campaing_status_pt: confCampaingStatusPT (required)
        :return: ConfCampaingStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'conf_campaing_status_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_campaing_status_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_campaing_status_using_post_using_post`")
        # verify the required parameter 'conf_campaing_status_pt' is set
        if ('conf_campaing_status_pt' not in params) or (params['conf_campaing_status_pt'] is None):
            raise ValueError("Missing the required parameter `conf_campaing_status_pt` when calling `create_campaing_status_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/campaing/status'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'conf_campaing_status_pt' in params:
            body_params = params['conf_campaing_status_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfCampaingStatusPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_country_using_post_using_post(self, network_shortcut, conf_country_pt, **kwargs):
        """
        createCountry
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_country_using_post_using_post(network_shortcut, conf_country_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfCountryPt conf_country_pt: confCountryPt (required)
        :return: ConfCountryPt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_country_using_post_using_post_with_http_info(network_shortcut, conf_country_pt, **kwargs)
        else:
            (data) = self.create_country_using_post_using_post_with_http_info(network_shortcut, conf_country_pt, **kwargs)
            return data

    def create_country_using_post_using_post_with_http_info(self, network_shortcut, conf_country_pt, **kwargs):
        """
        createCountry
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_country_using_post_using_post_with_http_info(network_shortcut, conf_country_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfCountryPt conf_country_pt: confCountryPt (required)
        :return: ConfCountryPt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'conf_country_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_country_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_country_using_post_using_post`")
        # verify the required parameter 'conf_country_pt' is set
        if ('conf_country_pt' not in params) or (params['conf_country_pt'] is None):
            raise ValueError("Missing the required parameter `conf_country_pt` when calling `create_country_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/country'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'conf_country_pt' in params:
            body_params = params['conf_country_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfCountryPt',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_crm_stage_using_post_using_post(self, network_shortcut, crm_stage, **kwargs):
        """
        createCrmStage
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_crm_stage_using_post_using_post(network_shortcut, crm_stage, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfCrmStagePT crm_stage: crmStage (required)
        :return: ConfCrmStagePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_crm_stage_using_post_using_post_with_http_info(network_shortcut, crm_stage, **kwargs)
        else:
            (data) = self.create_crm_stage_using_post_using_post_with_http_info(network_shortcut, crm_stage, **kwargs)
            return data

    def create_crm_stage_using_post_using_post_with_http_info(self, network_shortcut, crm_stage, **kwargs):
        """
        createCrmStage
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_crm_stage_using_post_using_post_with_http_info(network_shortcut, crm_stage, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfCrmStagePT crm_stage: crmStage (required)
        :return: ConfCrmStagePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'crm_stage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_crm_stage_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_crm_stage_using_post_using_post`")
        # verify the required parameter 'crm_stage' is set
        if ('crm_stage' not in params) or (params['crm_stage'] is None):
            raise ValueError("Missing the required parameter `crm_stage` when calling `create_crm_stage_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/crm/dictionary/stage/'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'crm_stage' in params:
            body_params = params['crm_stage']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfCrmStagePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_crm_task_status_using_post_using_post(self, network_shortcut, crm_stage, **kwargs):
        """
        createTaskStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_crm_task_status_using_post_using_post(network_shortcut, crm_stage, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfCrmTaskStatusPT crm_stage: crmStage (required)
        :return: ConfCrmTaskStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_crm_task_status_using_post_using_post_with_http_info(network_shortcut, crm_stage, **kwargs)
        else:
            (data) = self.create_crm_task_status_using_post_using_post_with_http_info(network_shortcut, crm_stage, **kwargs)
            return data

    def create_crm_task_status_using_post_using_post_with_http_info(self, network_shortcut, crm_stage, **kwargs):
        """
        createTaskStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_crm_task_status_using_post_using_post_with_http_info(network_shortcut, crm_stage, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfCrmTaskStatusPT crm_stage: crmStage (required)
        :return: ConfCrmTaskStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'crm_stage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_crm_task_status_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_crm_task_status_using_post_using_post`")
        # verify the required parameter 'crm_stage' is set
        if ('crm_stage' not in params) or (params['crm_stage'] is None):
            raise ValueError("Missing the required parameter `crm_stage` when calling `create_crm_task_status_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/crm/dictionary/task/status/'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'crm_stage' in params:
            body_params = params['crm_stage']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfCrmTaskStatusPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_currency_using_post_using_post(self, network_shortcut, tax_dto, **kwargs):
        """
        createCurrency
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_currency_using_post_using_post(network_shortcut, tax_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfCurrencyPT tax_dto: taxDTO (required)
        :return: ConfCurrencyPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_currency_using_post_using_post_with_http_info(network_shortcut, tax_dto, **kwargs)
        else:
            (data) = self.create_currency_using_post_using_post_with_http_info(network_shortcut, tax_dto, **kwargs)
            return data

    def create_currency_using_post_using_post_with_http_info(self, network_shortcut, tax_dto, **kwargs):
        """
        createCurrency
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_currency_using_post_using_post_with_http_info(network_shortcut, tax_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfCurrencyPT tax_dto: taxDTO (required)
        :return: ConfCurrencyPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'tax_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_currency_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_currency_using_post_using_post`")
        # verify the required parameter 'tax_dto' is set
        if ('tax_dto' not in params) or (params['tax_dto'] is None):
            raise ValueError("Missing the required parameter `tax_dto` when calling `create_currency_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/currency'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tax_dto' in params:
            body_params = params['tax_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfCurrencyPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_invoice_status_using_post_using_post(self, network_shortcut, tax_dto, **kwargs):
        """
        createInvoiceStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_invoice_status_using_post_using_post(network_shortcut, tax_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfInvoiceStatusPT tax_dto: taxDTO (required)
        :return: ConfInvoiceStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_invoice_status_using_post_using_post_with_http_info(network_shortcut, tax_dto, **kwargs)
        else:
            (data) = self.create_invoice_status_using_post_using_post_with_http_info(network_shortcut, tax_dto, **kwargs)
            return data

    def create_invoice_status_using_post_using_post_with_http_info(self, network_shortcut, tax_dto, **kwargs):
        """
        createInvoiceStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_invoice_status_using_post_using_post_with_http_info(network_shortcut, tax_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfInvoiceStatusPT tax_dto: taxDTO (required)
        :return: ConfInvoiceStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'tax_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_invoice_status_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_invoice_status_using_post_using_post`")
        # verify the required parameter 'tax_dto' is set
        if ('tax_dto' not in params) or (params['tax_dto'] is None):
            raise ValueError("Missing the required parameter `tax_dto` when calling `create_invoice_status_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/invoice/status'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tax_dto' in params:
            body_params = params['tax_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfInvoiceStatusPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_lead_status_using_post_using_post(self, network_shortcut, lead_status, **kwargs):
        """
        createLeadStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_lead_status_using_post_using_post(network_shortcut, lead_status, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfLeadStatusPT lead_status: leadStatus (required)
        :return: ConfLeadStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_lead_status_using_post_using_post_with_http_info(network_shortcut, lead_status, **kwargs)
        else:
            (data) = self.create_lead_status_using_post_using_post_with_http_info(network_shortcut, lead_status, **kwargs)
            return data

    def create_lead_status_using_post_using_post_with_http_info(self, network_shortcut, lead_status, **kwargs):
        """
        createLeadStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_lead_status_using_post_using_post_with_http_info(network_shortcut, lead_status, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfLeadStatusPT lead_status: leadStatus (required)
        :return: ConfLeadStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'lead_status']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_lead_status_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_lead_status_using_post_using_post`")
        # verify the required parameter 'lead_status' is set
        if ('lead_status' not in params) or (params['lead_status'] is None):
            raise ValueError("Missing the required parameter `lead_status` when calling `create_lead_status_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/crm/dictionary/leadstatus/'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'lead_status' in params:
            body_params = params['lead_status']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfLeadStatusPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_leadsource_using_post_using_post(self, network_shortcut, lead_source_pt, **kwargs):
        """
        createLeadsource
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_leadsource_using_post_using_post(network_shortcut, lead_source_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfLeadSourcePT lead_source_pt: leadStatus (required)
        :return: ConfLeadSourcePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_leadsource_using_post_using_post_with_http_info(network_shortcut, lead_source_pt, **kwargs)
        else:
            (data) = self.create_leadsource_using_post_using_post_with_http_info(network_shortcut, lead_source_pt, **kwargs)
            return data

    def create_leadsource_using_post_using_post_with_http_info(self, network_shortcut, lead_source_pt, **kwargs):
        """
        createLeadsource
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_leadsource_using_post_using_post_with_http_info(network_shortcut, lead_source_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfLeadSourcePT lead_source_pt: leadStatus (required)
        :return: ConfLeadSourcePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'lead_source_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_leadsource_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_leadsource_using_post_using_post`")
        # verify the required parameter 'lead_source_pt' is set
        if ('lead_source_pt' not in params) or (params['lead_source_pt'] is None):
            raise ValueError("Missing the required parameter `lead_source_pt` when calling `create_leadsource_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/crm/dictionary/leadsource/'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'lead_source_pt' in params:
            body_params = params['lead_source_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfLeadSourcePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_order_status_using_post_using_post(self, network_shortcut, conf_tra_order_status_pt, **kwargs):
        """
        createTax
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_order_status_using_post_using_post(network_shortcut, conf_tra_order_status_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfTraOrderStatusPT conf_tra_order_status_pt: confTraOrderStatusPT (required)
        :return: ConfTraOrderStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_order_status_using_post_using_post_with_http_info(network_shortcut, conf_tra_order_status_pt, **kwargs)
        else:
            (data) = self.create_order_status_using_post_using_post_with_http_info(network_shortcut, conf_tra_order_status_pt, **kwargs)
            return data

    def create_order_status_using_post_using_post_with_http_info(self, network_shortcut, conf_tra_order_status_pt, **kwargs):
        """
        createTax
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_order_status_using_post_using_post_with_http_info(network_shortcut, conf_tra_order_status_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfTraOrderStatusPT conf_tra_order_status_pt: confTraOrderStatusPT (required)
        :return: ConfTraOrderStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'conf_tra_order_status_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_order_status_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_order_status_using_post_using_post`")
        # verify the required parameter 'conf_tra_order_status_pt' is set
        if ('conf_tra_order_status_pt' not in params) or (params['conf_tra_order_status_pt'] is None):
            raise ValueError("Missing the required parameter `conf_tra_order_status_pt` when calling `create_order_status_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/order/status'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'conf_tra_order_status_pt' in params:
            body_params = params['conf_tra_order_status_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfTraOrderStatusPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_person_using_post_using_post(self, network_shortcut, person_dto, **kwargs):
        """
        createPersonEntity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_person_using_post_using_post(network_shortcut, person_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfPersonPT person_dto: personDTO (required)
        :return: ConfPersonPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_person_using_post_using_post_with_http_info(network_shortcut, person_dto, **kwargs)
        else:
            (data) = self.create_person_using_post_using_post_with_http_info(network_shortcut, person_dto, **kwargs)
            return data

    def create_person_using_post_using_post_with_http_info(self, network_shortcut, person_dto, **kwargs):
        """
        createPersonEntity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_person_using_post_using_post_with_http_info(network_shortcut, person_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfPersonPT person_dto: personDTO (required)
        :return: ConfPersonPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'person_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_person_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_person_using_post_using_post`")
        # verify the required parameter 'person_dto' is set
        if ('person_dto' not in params) or (params['person_dto'] is None):
            raise ValueError("Missing the required parameter `person_dto` when calling `create_person_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/people'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'person_dto' in params:
            body_params = params['person_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfPersonPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_property_key_using_post_using_post(self, network_shortcut, property_key_dto, **kwargs):
        """
        createPropertyKey
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_property_key_using_post_using_post(network_shortcut, property_key_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CoreKeyPT property_key_dto: propertyKeyDTO (required)
        :return: CoreKeyPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_property_key_using_post_using_post_with_http_info(network_shortcut, property_key_dto, **kwargs)
        else:
            (data) = self.create_property_key_using_post_using_post_with_http_info(network_shortcut, property_key_dto, **kwargs)
            return data

    def create_property_key_using_post_using_post_with_http_info(self, network_shortcut, property_key_dto, **kwargs):
        """
        createPropertyKey
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_property_key_using_post_using_post_with_http_info(network_shortcut, property_key_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CoreKeyPT property_key_dto: propertyKeyDTO (required)
        :return: CoreKeyPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'property_key_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_property_key_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_property_key_using_post_using_post`")
        # verify the required parameter 'property_key_dto' is set
        if ('property_key_dto' not in params) or (params['property_key_dto'] is None):
            raise ValueError("Missing the required parameter `property_key_dto` when calling `create_property_key_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/property/key'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'property_key_dto' in params:
            body_params = params['property_key_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CoreKeyPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_range_using_post_using_post(self, network_shortcut, core_range_pt, **kwargs):
        """
        createRange
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_range_using_post_using_post(network_shortcut, core_range_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CoreRangePT core_range_pt: coreRangePT (required)
        :return: CoreRangePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_range_using_post_using_post_with_http_info(network_shortcut, core_range_pt, **kwargs)
        else:
            (data) = self.create_range_using_post_using_post_with_http_info(network_shortcut, core_range_pt, **kwargs)
            return data

    def create_range_using_post_using_post_with_http_info(self, network_shortcut, core_range_pt, **kwargs):
        """
        createRange
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_range_using_post_using_post_with_http_info(network_shortcut, core_range_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CoreRangePT core_range_pt: coreRangePT (required)
        :return: CoreRangePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'core_range_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_range_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_range_using_post_using_post`")
        # verify the required parameter 'core_range_pt' is set
        if ('core_range_pt' not in params) or (params['core_range_pt'] is None):
            raise ValueError("Missing the required parameter `core_range_pt` when calling `create_range_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/range'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'core_range_pt' in params:
            body_params = params['core_range_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CoreRangePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_size_using_post_using_post(self, network_shortcut, core_size_pt, **kwargs):
        """
        createSize
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_size_using_post_using_post(network_shortcut, core_size_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CoreSizePT core_size_pt: coreSizePT (required)
        :return: CoreSizePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_size_using_post_using_post_with_http_info(network_shortcut, core_size_pt, **kwargs)
        else:
            (data) = self.create_size_using_post_using_post_with_http_info(network_shortcut, core_size_pt, **kwargs)
            return data

    def create_size_using_post_using_post_with_http_info(self, network_shortcut, core_size_pt, **kwargs):
        """
        createSize
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_size_using_post_using_post_with_http_info(network_shortcut, core_size_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CoreSizePT core_size_pt: coreSizePT (required)
        :return: CoreSizePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'core_size_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_size_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_size_using_post_using_post`")
        # verify the required parameter 'core_size_pt' is set
        if ('core_size_pt' not in params) or (params['core_size_pt'] is None):
            raise ValueError("Missing the required parameter `core_size_pt` when calling `create_size_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/size'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'core_size_pt' in params:
            body_params = params['core_size_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CoreSizePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_tax_using_post_using_post(self, network_shortcut, tax_dto, **kwargs):
        """
        createTax
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_tax_using_post_using_post(network_shortcut, tax_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfTaxPT tax_dto: taxDTO (required)
        :return: ConfTaxPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_tax_using_post_using_post_with_http_info(network_shortcut, tax_dto, **kwargs)
        else:
            (data) = self.create_tax_using_post_using_post_with_http_info(network_shortcut, tax_dto, **kwargs)
            return data

    def create_tax_using_post_using_post_with_http_info(self, network_shortcut, tax_dto, **kwargs):
        """
        createTax
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_tax_using_post_using_post_with_http_info(network_shortcut, tax_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfTaxPT tax_dto: taxDTO (required)
        :return: ConfTaxPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'tax_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_tax_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_tax_using_post_using_post`")
        # verify the required parameter 'tax_dto' is set
        if ('tax_dto' not in params) or (params['tax_dto'] is None):
            raise ValueError("Missing the required parameter `tax_dto` when calling `create_tax_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/tax'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tax_dto' in params:
            body_params = params['tax_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfTaxPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_area_using_delete_using_delete(self, network_shortcut, id, **kwargs):
        """
        deleteArea
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_area_using_delete_using_delete(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_area_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.delete_area_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
            return data

    def delete_area_using_delete_using_delete_with_http_info(self, network_shortcut, id, **kwargs):
        """
        deleteArea
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_area_using_delete_using_delete_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_area_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_area_using_delete_using_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_area_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/area/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_campaing_status_using_delete_using_delete(self, network_shortcut, id, **kwargs):
        """
        deleteCampaingStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_campaing_status_using_delete_using_delete(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_campaing_status_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.delete_campaing_status_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
            return data

    def delete_campaing_status_using_delete_using_delete_with_http_info(self, network_shortcut, id, **kwargs):
        """
        deleteCampaingStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_campaing_status_using_delete_using_delete_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_campaing_status_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_campaing_status_using_delete_using_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_campaing_status_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/campaing/status/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_country_using_delete_using_delete(self, network_shortcut, id, **kwargs):
        """
        deletePerson
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_country_using_delete_using_delete(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_country_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.delete_country_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
            return data

    def delete_country_using_delete_using_delete_with_http_info(self, network_shortcut, id, **kwargs):
        """
        deletePerson
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_country_using_delete_using_delete_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_country_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_country_using_delete_using_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_country_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/country/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_crm_stage_using_delete_using_delete(self, network_shortcut, id, **kwargs):
        """
        deleteCrmStage
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_crm_stage_using_delete_using_delete(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_crm_stage_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.delete_crm_stage_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
            return data

    def delete_crm_stage_using_delete_using_delete_with_http_info(self, network_shortcut, id, **kwargs):
        """
        deleteCrmStage
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_crm_stage_using_delete_using_delete_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_crm_stage_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_crm_stage_using_delete_using_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_crm_stage_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/crm/dictionary/stage/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_crm_task_status_using_delete_using_delete(self, network_shortcut, id, **kwargs):
        """
        deleteCrmTaskStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_crm_task_status_using_delete_using_delete(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_crm_task_status_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.delete_crm_task_status_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
            return data

    def delete_crm_task_status_using_delete_using_delete_with_http_info(self, network_shortcut, id, **kwargs):
        """
        deleteCrmTaskStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_crm_task_status_using_delete_using_delete_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_crm_task_status_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_crm_task_status_using_delete_using_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_crm_task_status_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/crm/dictionary/task/status/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_currency_using_delete_using_delete(self, network_shortcut, id, **kwargs):
        """
        deleteCurrency
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_currency_using_delete_using_delete(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_currency_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.delete_currency_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
            return data

    def delete_currency_using_delete_using_delete_with_http_info(self, network_shortcut, id, **kwargs):
        """
        deleteCurrency
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_currency_using_delete_using_delete_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_currency_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_currency_using_delete_using_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_currency_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/currency/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_industry_using_delete_using_delete(self, network_shortcut, id, **kwargs):
        """
        deleteIndustry
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_industry_using_delete_using_delete(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str id: industryName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_industry_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.delete_industry_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
            return data

    def delete_industry_using_delete_using_delete_with_http_info(self, network_shortcut, id, **kwargs):
        """
        deleteIndustry
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_industry_using_delete_using_delete_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str id: industryName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_industry_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_industry_using_delete_using_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_industry_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/industry/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_invoice_status_using_delete_using_delete(self, network_shortcut, id, **kwargs):
        """
        deleteInvoiceStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_invoice_status_using_delete_using_delete(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_invoice_status_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.delete_invoice_status_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
            return data

    def delete_invoice_status_using_delete_using_delete_with_http_info(self, network_shortcut, id, **kwargs):
        """
        deleteInvoiceStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_invoice_status_using_delete_using_delete_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_invoice_status_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_invoice_status_using_delete_using_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_invoice_status_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/invoice/status/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_lead_status_using_delete_using_delete(self, network_shortcut, id, **kwargs):
        """
        deleteLeadstatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_lead_status_using_delete_using_delete(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_lead_status_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.delete_lead_status_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
            return data

    def delete_lead_status_using_delete_using_delete_with_http_info(self, network_shortcut, id, **kwargs):
        """
        deleteLeadstatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_lead_status_using_delete_using_delete_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_lead_status_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_lead_status_using_delete_using_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_lead_status_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/crm/dictionary/leadstatus/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_leadsource_using_delete_using_delete(self, network_shortcut, id, **kwargs):
        """
        deleteLeadsource
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_leadsource_using_delete_using_delete(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_leadsource_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.delete_leadsource_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
            return data

    def delete_leadsource_using_delete_using_delete_with_http_info(self, network_shortcut, id, **kwargs):
        """
        deleteLeadsource
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_leadsource_using_delete_using_delete_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_leadsource_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_leadsource_using_delete_using_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_leadsource_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/crm/dictionary/leadsource/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_order_status_using_delete_using_delete(self, network_shortcut, id, **kwargs):
        """
        deleteTax
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_order_status_using_delete_using_delete(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_order_status_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.delete_order_status_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
            return data

    def delete_order_status_using_delete_using_delete_with_http_info(self, network_shortcut, id, **kwargs):
        """
        deleteTax
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_order_status_using_delete_using_delete_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_order_status_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_order_status_using_delete_using_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_order_status_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/order/status{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_person_using_delete_using_delete(self, network_shortcut, id, **kwargs):
        """
        deletePerson
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_person_using_delete_using_delete(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_person_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.delete_person_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
            return data

    def delete_person_using_delete_using_delete_with_http_info(self, network_shortcut, id, **kwargs):
        """
        deletePerson
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_person_using_delete_using_delete_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_person_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_person_using_delete_using_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_person_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/people/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_property_key_using_delete_using_delete(self, network_shortcut, id, **kwargs):
        """
        deletePropertyKey
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_property_key_using_delete_using_delete(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str id: keyName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_property_key_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.delete_property_key_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
            return data

    def delete_property_key_using_delete_using_delete_with_http_info(self, network_shortcut, id, **kwargs):
        """
        deletePropertyKey
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_property_key_using_delete_using_delete_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str id: keyName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_property_key_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_property_key_using_delete_using_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_property_key_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/property/key/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_range_using_delete_using_delete(self, network_shortcut, id, **kwargs):
        """
        deleteRange
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_range_using_delete_using_delete(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_range_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.delete_range_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
            return data

    def delete_range_using_delete_using_delete_with_http_info(self, network_shortcut, id, **kwargs):
        """
        deleteRange
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_range_using_delete_using_delete_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_range_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_range_using_delete_using_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_range_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/range/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_size_using_delete_using_delete(self, network_shortcut, id, **kwargs):
        """
        deleteSize
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_size_using_delete_using_delete(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_size_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.delete_size_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
            return data

    def delete_size_using_delete_using_delete_with_http_info(self, network_shortcut, id, **kwargs):
        """
        deleteSize
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_size_using_delete_using_delete_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_size_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_size_using_delete_using_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_size_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/size/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_tax_using_delete_using_delete(self, network_shortcut, id, **kwargs):
        """
        deleteTax
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_tax_using_delete_using_delete(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_tax_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.delete_tax_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
            return data

    def delete_tax_using_delete_using_delete_with_http_info(self, network_shortcut, id, **kwargs):
        """
        deleteTax
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_tax_using_delete_using_delete_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_tax_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_tax_using_delete_using_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_tax_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/tax/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_area_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllArea
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_area_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: CoreAreaPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_area_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_area_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_area_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllArea
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_area_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: CoreAreaPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_area_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_area_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/area'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CoreAreaPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_campaing_status_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllCampaingStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_campaing_status_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: ConfCampaingStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_campaing_status_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_campaing_status_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_campaing_status_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllCampaingStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_campaing_status_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: ConfCampaingStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_campaing_status_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_campaing_status_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/campaing/status'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfCampaingStatusPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_countries_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllCountries
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_countries_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: ConfCountryPt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_countries_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_countries_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_countries_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllCountries
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_countries_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: ConfCountryPt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_countries_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_countries_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/country'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfCountryPt',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_crm_stages_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllCrmStages
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_crm_stages_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: ConfCrmStagePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_crm_stages_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_crm_stages_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_crm_stages_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllCrmStages
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_crm_stages_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: ConfCrmStagePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_crm_stages_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_crm_stages_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/crm/dictionary/stage/'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfCrmStagePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_crm_task_status_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllCrmTaskStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_crm_task_status_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: ConfCrmTaskStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_crm_task_status_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_crm_task_status_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_crm_task_status_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllCrmTaskStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_crm_task_status_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: ConfCrmTaskStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_crm_task_status_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_crm_task_status_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/crm/dictionary/task/status'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfCrmTaskStatusPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_currency_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllCurrency
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_currency_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: ConfCurrencyPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_currency_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_currency_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_currency_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllCurrency
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_currency_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: ConfCurrencyPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_currency_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_currency_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/currency'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfCurrencyPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_industries_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllIndustries
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_industries_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: ConfIndustryPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_industries_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_industries_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_industries_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllIndustries
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_industries_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: ConfIndustryPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_industries_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_industries_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/industry'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfIndustryPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_invoice_status_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllInvoiceStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_invoice_status_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: ConfInvoiceStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_invoice_status_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_invoice_status_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_invoice_status_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllInvoiceStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_invoice_status_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: ConfInvoiceStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_invoice_status_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_invoice_status_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/invoice/status'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfInvoiceStatusPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_lead_status_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllLeadStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_lead_status_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: ConfLeadStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_lead_status_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_lead_status_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_lead_status_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllLeadStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_lead_status_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: ConfLeadStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_lead_status_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_lead_status_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/crm/dictionary/leadstatus/'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfLeadStatusPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_leadsource_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllLeadSource
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_leadsource_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: ConfLeadSourcePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_leadsource_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_leadsource_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_leadsource_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllLeadSource
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_leadsource_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: ConfLeadSourcePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_leadsource_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_leadsource_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/crm/dictionary/leadsource/'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfLeadSourcePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_order_status_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllTaxes
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_order_status_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: ConfTraOrderStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_order_status_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_order_status_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_order_status_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllTaxes
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_order_status_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: ConfTraOrderStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_order_status_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_order_status_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/order/status'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfTraOrderStatusPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_people_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllPeople
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_people_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: ConfPersonPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_people_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_people_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_people_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllPeople
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_people_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: ConfPersonPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_people_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_people_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/people'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfPersonPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_property_keys_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllPropertyKeys
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_property_keys_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: CoreKeyPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_property_keys_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_property_keys_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_property_keys_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllPropertyKeys
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_property_keys_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: CoreKeyPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_property_keys_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_property_keys_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/property/key'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CoreKeyPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_range_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllRange
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_range_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: CoreRangePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_range_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_range_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_range_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllRange
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_range_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: CoreRangePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_range_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_range_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/range'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CoreRangePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_size_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllSize
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_size_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: CoreSizePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_size_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_size_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_size_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllSize
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_size_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: CoreSizePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_size_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_size_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/size'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CoreSizePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_taxes_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllTaxes
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_taxes_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: ConfTaxPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_taxes_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_taxes_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_taxes_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllTaxes
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_taxes_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: ConfTaxPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_taxes_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_taxes_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/tax'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfTaxPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_area_using_get_using_get(self, network_shortcut, id, **kwargs):
        """
        getArea
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_area_using_get_using_get(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: CoreAreaPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_area_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.get_area_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
            return data

    def get_area_using_get_using_get_with_http_info(self, network_shortcut, id, **kwargs):
        """
        getArea
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_area_using_get_using_get_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: CoreAreaPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_area_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_area_using_get_using_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_area_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/area/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CoreAreaPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_campaing_status_using_get_using_get(self, network_shortcut, id, **kwargs):
        """
        getCampaingStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_campaing_status_using_get_using_get(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: ConfCampaingStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_campaing_status_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.get_campaing_status_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
            return data

    def get_campaing_status_using_get_using_get_with_http_info(self, network_shortcut, id, **kwargs):
        """
        getCampaingStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_campaing_status_using_get_using_get_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: ConfCampaingStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_campaing_status_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_campaing_status_using_get_using_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_campaing_status_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/campaing/status/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfCampaingStatusPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_country_using_get_using_get(self, network_shortcut, id, **kwargs):
        """
        getPerson
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_country_using_get_using_get(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: ConfCountryPt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_country_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.get_country_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
            return data

    def get_country_using_get_using_get_with_http_info(self, network_shortcut, id, **kwargs):
        """
        getPerson
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_country_using_get_using_get_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: ConfCountryPt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_country_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_country_using_get_using_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_country_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/country/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfCountryPt',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_crm_stage_using_get_using_get(self, network_shortcut, id, **kwargs):
        """
        getCrmStage
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_crm_stage_using_get_using_get(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: ConfCrmStagePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_crm_stage_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.get_crm_stage_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
            return data

    def get_crm_stage_using_get_using_get_with_http_info(self, network_shortcut, id, **kwargs):
        """
        getCrmStage
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_crm_stage_using_get_using_get_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: ConfCrmStagePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crm_stage_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_crm_stage_using_get_using_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_crm_stage_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/crm/dictionary/stage/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfCrmStagePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_crm_task_status_using_get_using_get(self, network_shortcut, id, **kwargs):
        """
        getCrmTaskStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_crm_task_status_using_get_using_get(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: ConfCrmTaskStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_crm_task_status_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.get_crm_task_status_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
            return data

    def get_crm_task_status_using_get_using_get_with_http_info(self, network_shortcut, id, **kwargs):
        """
        getCrmTaskStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_crm_task_status_using_get_using_get_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: ConfCrmTaskStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crm_task_status_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_crm_task_status_using_get_using_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_crm_task_status_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/crm/dictionary/task/status/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfCrmTaskStatusPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_currency_using_get_using_get(self, network_shortcut, id, **kwargs):
        """
        getCurrency
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_currency_using_get_using_get(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: ConfCurrencyPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_currency_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.get_currency_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
            return data

    def get_currency_using_get_using_get_with_http_info(self, network_shortcut, id, **kwargs):
        """
        getCurrency
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_currency_using_get_using_get_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: ConfCurrencyPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_currency_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_currency_using_get_using_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_currency_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/currency/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfCurrencyPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_industry_using_get_using_get(self, network_shortcut, id, **kwargs):
        """
        getIndustry
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_industry_using_get_using_get(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str id: industryName (required)
        :return: ConfIndustryPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_industry_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.get_industry_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
            return data

    def get_industry_using_get_using_get_with_http_info(self, network_shortcut, id, **kwargs):
        """
        getIndustry
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_industry_using_get_using_get_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str id: industryName (required)
        :return: ConfIndustryPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_industry_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_industry_using_get_using_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_industry_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/industry/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfIndustryPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_invoice_status_using_get_using_get(self, network_shortcut, id, **kwargs):
        """
        getInvoiceStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_invoice_status_using_get_using_get(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: ConfInvoiceStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_invoice_status_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.get_invoice_status_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
            return data

    def get_invoice_status_using_get_using_get_with_http_info(self, network_shortcut, id, **kwargs):
        """
        getInvoiceStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_invoice_status_using_get_using_get_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: ConfInvoiceStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoice_status_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_invoice_status_using_get_using_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_invoice_status_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/invoice/status/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfInvoiceStatusPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_lead_source_using_get_using_get(self, network_shortcut, id, **kwargs):
        """
        getLeadStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_lead_source_using_get_using_get(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: ConfLeadSourcePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_lead_source_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.get_lead_source_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
            return data

    def get_lead_source_using_get_using_get_with_http_info(self, network_shortcut, id, **kwargs):
        """
        getLeadStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_lead_source_using_get_using_get_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: ConfLeadSourcePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lead_source_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_lead_source_using_get_using_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_lead_source_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/crm/dictionary/leadsource/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfLeadSourcePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_lead_status_using_get_using_get(self, network_shortcut, id, **kwargs):
        """
        getLeadStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_lead_status_using_get_using_get(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: ConfLeadStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_lead_status_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.get_lead_status_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
            return data

    def get_lead_status_using_get_using_get_with_http_info(self, network_shortcut, id, **kwargs):
        """
        getLeadStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_lead_status_using_get_using_get_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: ConfLeadStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lead_status_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_lead_status_using_get_using_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_lead_status_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/crm/dictionary/leadstatus/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfLeadStatusPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_order_status_using_get_using_get(self, network_shortcut, id, **kwargs):
        """
        getTax
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_order_status_using_get_using_get(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: ConfTraOrderStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_order_status_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.get_order_status_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
            return data

    def get_order_status_using_get_using_get_with_http_info(self, network_shortcut, id, **kwargs):
        """
        getTax
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_order_status_using_get_using_get_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: ConfTraOrderStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_order_status_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_order_status_using_get_using_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_order_status_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/order/status/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfTraOrderStatusPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_person_using_get_using_get(self, network_shortcut, id, **kwargs):
        """
        getPerson
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_person_using_get_using_get(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: ConfPersonPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_person_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.get_person_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
            return data

    def get_person_using_get_using_get_with_http_info(self, network_shortcut, id, **kwargs):
        """
        getPerson
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_person_using_get_using_get_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: ConfPersonPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_person_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_person_using_get_using_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_person_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/people/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfPersonPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_property_key_using_get_using_get(self, network_shortcut, id, **kwargs):
        """
        getPropertyKey
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_property_key_using_get_using_get(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str id: keyName (required)
        :return: CoreKeyPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_property_key_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.get_property_key_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
            return data

    def get_property_key_using_get_using_get_with_http_info(self, network_shortcut, id, **kwargs):
        """
        getPropertyKey
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_property_key_using_get_using_get_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str id: keyName (required)
        :return: CoreKeyPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_property_key_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_property_key_using_get_using_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_property_key_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/property/key/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CoreKeyPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_range_using_get_using_get(self, network_shortcut, id, **kwargs):
        """
        getRange
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_range_using_get_using_get(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: CoreRangePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_range_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.get_range_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
            return data

    def get_range_using_get_using_get_with_http_info(self, network_shortcut, id, **kwargs):
        """
        getRange
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_range_using_get_using_get_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: CoreRangePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_range_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_range_using_get_using_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_range_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/range/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CoreRangePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_size_using_get_using_get(self, network_shortcut, id, **kwargs):
        """
        getSize
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_size_using_get_using_get(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: CoreSizePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_size_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.get_size_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
            return data

    def get_size_using_get_using_get_with_http_info(self, network_shortcut, id, **kwargs):
        """
        getSize
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_size_using_get_using_get_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: CoreSizePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_size_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_size_using_get_using_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_size_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/size/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CoreSizePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_tax_using_get_using_get(self, network_shortcut, id, **kwargs):
        """
        getTax
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tax_using_get_using_get(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: ConfTaxPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_tax_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.get_tax_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
            return data

    def get_tax_using_get_using_get_with_http_info(self, network_shortcut, id, **kwargs):
        """
        getTax
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tax_using_get_using_get_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: ConfTaxPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tax_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_tax_using_get_using_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_tax_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/tax/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfTaxPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_area_using_put_using_put(self, network_shortcut, core_area_pt, **kwargs):
        """
        updateArea
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_area_using_put_using_put(network_shortcut, core_area_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CoreAreaPT core_area_pt: coreAreaPT (required)
        :return: CoreAreaPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_area_using_put_using_put_with_http_info(network_shortcut, core_area_pt, **kwargs)
        else:
            (data) = self.update_area_using_put_using_put_with_http_info(network_shortcut, core_area_pt, **kwargs)
            return data

    def update_area_using_put_using_put_with_http_info(self, network_shortcut, core_area_pt, **kwargs):
        """
        updateArea
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_area_using_put_using_put_with_http_info(network_shortcut, core_area_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CoreAreaPT core_area_pt: coreAreaPT (required)
        :return: CoreAreaPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'core_area_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_area_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_area_using_put_using_put`")
        # verify the required parameter 'core_area_pt' is set
        if ('core_area_pt' not in params) or (params['core_area_pt'] is None):
            raise ValueError("Missing the required parameter `core_area_pt` when calling `update_area_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/area'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'core_area_pt' in params:
            body_params = params['core_area_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CoreAreaPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_campaing_status_using_put_using_put(self, network_shortcut, conf_campaing_status_pt, **kwargs):
        """
        updateCampaingStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_campaing_status_using_put_using_put(network_shortcut, conf_campaing_status_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfCampaingStatusPT conf_campaing_status_pt: confCampaingStatusPT (required)
        :return: ConfCampaingStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_campaing_status_using_put_using_put_with_http_info(network_shortcut, conf_campaing_status_pt, **kwargs)
        else:
            (data) = self.update_campaing_status_using_put_using_put_with_http_info(network_shortcut, conf_campaing_status_pt, **kwargs)
            return data

    def update_campaing_status_using_put_using_put_with_http_info(self, network_shortcut, conf_campaing_status_pt, **kwargs):
        """
        updateCampaingStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_campaing_status_using_put_using_put_with_http_info(network_shortcut, conf_campaing_status_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfCampaingStatusPT conf_campaing_status_pt: confCampaingStatusPT (required)
        :return: ConfCampaingStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'conf_campaing_status_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_campaing_status_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_campaing_status_using_put_using_put`")
        # verify the required parameter 'conf_campaing_status_pt' is set
        if ('conf_campaing_status_pt' not in params) or (params['conf_campaing_status_pt'] is None):
            raise ValueError("Missing the required parameter `conf_campaing_status_pt` when calling `update_campaing_status_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/campaing/status'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'conf_campaing_status_pt' in params:
            body_params = params['conf_campaing_status_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfCampaingStatusPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_country_using_put_using_put(self, network_shortcut, conf_country_pt, **kwargs):
        """
        updateCountry
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_country_using_put_using_put(network_shortcut, conf_country_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfCountryPt conf_country_pt: confCountryPt (required)
        :return: ConfCountryPt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_country_using_put_using_put_with_http_info(network_shortcut, conf_country_pt, **kwargs)
        else:
            (data) = self.update_country_using_put_using_put_with_http_info(network_shortcut, conf_country_pt, **kwargs)
            return data

    def update_country_using_put_using_put_with_http_info(self, network_shortcut, conf_country_pt, **kwargs):
        """
        updateCountry
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_country_using_put_using_put_with_http_info(network_shortcut, conf_country_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfCountryPt conf_country_pt: confCountryPt (required)
        :return: ConfCountryPt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'conf_country_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_country_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_country_using_put_using_put`")
        # verify the required parameter 'conf_country_pt' is set
        if ('conf_country_pt' not in params) or (params['conf_country_pt'] is None):
            raise ValueError("Missing the required parameter `conf_country_pt` when calling `update_country_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/country'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'conf_country_pt' in params:
            body_params = params['conf_country_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfCountryPt',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_crm_stage_using_put_using_put(self, network_shortcut, crm_stage, **kwargs):
        """
        updateCrmStage
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_crm_stage_using_put_using_put(network_shortcut, crm_stage, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfCrmStagePT crm_stage: crmStage (required)
        :return: ConfCrmStagePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_crm_stage_using_put_using_put_with_http_info(network_shortcut, crm_stage, **kwargs)
        else:
            (data) = self.update_crm_stage_using_put_using_put_with_http_info(network_shortcut, crm_stage, **kwargs)
            return data

    def update_crm_stage_using_put_using_put_with_http_info(self, network_shortcut, crm_stage, **kwargs):
        """
        updateCrmStage
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_crm_stage_using_put_using_put_with_http_info(network_shortcut, crm_stage, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfCrmStagePT crm_stage: crmStage (required)
        :return: ConfCrmStagePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'crm_stage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_crm_stage_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_crm_stage_using_put_using_put`")
        # verify the required parameter 'crm_stage' is set
        if ('crm_stage' not in params) or (params['crm_stage'] is None):
            raise ValueError("Missing the required parameter `crm_stage` when calling `update_crm_stage_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/crm/dictionary/stage/'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'crm_stage' in params:
            body_params = params['crm_stage']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfCrmStagePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_crm_task_status_using_put_using_put(self, network_shortcut, crm_stage, **kwargs):
        """
        updateTaskStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_crm_task_status_using_put_using_put(network_shortcut, crm_stage, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfCrmTaskStatusPT crm_stage: crmStage (required)
        :return: ConfCrmTaskStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_crm_task_status_using_put_using_put_with_http_info(network_shortcut, crm_stage, **kwargs)
        else:
            (data) = self.update_crm_task_status_using_put_using_put_with_http_info(network_shortcut, crm_stage, **kwargs)
            return data

    def update_crm_task_status_using_put_using_put_with_http_info(self, network_shortcut, crm_stage, **kwargs):
        """
        updateTaskStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_crm_task_status_using_put_using_put_with_http_info(network_shortcut, crm_stage, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfCrmTaskStatusPT crm_stage: crmStage (required)
        :return: ConfCrmTaskStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'crm_stage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_crm_task_status_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_crm_task_status_using_put_using_put`")
        # verify the required parameter 'crm_stage' is set
        if ('crm_stage' not in params) or (params['crm_stage'] is None):
            raise ValueError("Missing the required parameter `crm_stage` when calling `update_crm_task_status_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/crm/dictionary/task/status/'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'crm_stage' in params:
            body_params = params['crm_stage']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfCrmTaskStatusPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_currency_using_put_using_put(self, network_shortcut, tax_dto, **kwargs):
        """
        updateCurrency
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_currency_using_put_using_put(network_shortcut, tax_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfCurrencyPT tax_dto: taxDTO (required)
        :return: ConfCurrencyPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_currency_using_put_using_put_with_http_info(network_shortcut, tax_dto, **kwargs)
        else:
            (data) = self.update_currency_using_put_using_put_with_http_info(network_shortcut, tax_dto, **kwargs)
            return data

    def update_currency_using_put_using_put_with_http_info(self, network_shortcut, tax_dto, **kwargs):
        """
        updateCurrency
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_currency_using_put_using_put_with_http_info(network_shortcut, tax_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfCurrencyPT tax_dto: taxDTO (required)
        :return: ConfCurrencyPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'tax_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_currency_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_currency_using_put_using_put`")
        # verify the required parameter 'tax_dto' is set
        if ('tax_dto' not in params) or (params['tax_dto'] is None):
            raise ValueError("Missing the required parameter `tax_dto` when calling `update_currency_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/currency'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tax_dto' in params:
            body_params = params['tax_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfCurrencyPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_invoice_status_using_put_using_put(self, network_shortcut, tax_dto, **kwargs):
        """
        updateInvoiceStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_invoice_status_using_put_using_put(network_shortcut, tax_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfInvoiceStatusPT tax_dto: taxDTO (required)
        :return: ConfInvoiceStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_invoice_status_using_put_using_put_with_http_info(network_shortcut, tax_dto, **kwargs)
        else:
            (data) = self.update_invoice_status_using_put_using_put_with_http_info(network_shortcut, tax_dto, **kwargs)
            return data

    def update_invoice_status_using_put_using_put_with_http_info(self, network_shortcut, tax_dto, **kwargs):
        """
        updateInvoiceStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_invoice_status_using_put_using_put_with_http_info(network_shortcut, tax_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfInvoiceStatusPT tax_dto: taxDTO (required)
        :return: ConfInvoiceStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'tax_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_invoice_status_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_invoice_status_using_put_using_put`")
        # verify the required parameter 'tax_dto' is set
        if ('tax_dto' not in params) or (params['tax_dto'] is None):
            raise ValueError("Missing the required parameter `tax_dto` when calling `update_invoice_status_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/invoice/status'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tax_dto' in params:
            body_params = params['tax_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfInvoiceStatusPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_lead_source_using_put_using_put(self, network_shortcut, lead_source_pt, **kwargs):
        """
        updateLeadSource
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_lead_source_using_put_using_put(network_shortcut, lead_source_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfLeadSourcePT lead_source_pt: leadStatus (required)
        :return: ConfLeadSourcePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_lead_source_using_put_using_put_with_http_info(network_shortcut, lead_source_pt, **kwargs)
        else:
            (data) = self.update_lead_source_using_put_using_put_with_http_info(network_shortcut, lead_source_pt, **kwargs)
            return data

    def update_lead_source_using_put_using_put_with_http_info(self, network_shortcut, lead_source_pt, **kwargs):
        """
        updateLeadSource
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_lead_source_using_put_using_put_with_http_info(network_shortcut, lead_source_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfLeadSourcePT lead_source_pt: leadStatus (required)
        :return: ConfLeadSourcePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'lead_source_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_lead_source_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_lead_source_using_put_using_put`")
        # verify the required parameter 'lead_source_pt' is set
        if ('lead_source_pt' not in params) or (params['lead_source_pt'] is None):
            raise ValueError("Missing the required parameter `lead_source_pt` when calling `update_lead_source_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/crm/dictionary/leadsource/'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'lead_source_pt' in params:
            body_params = params['lead_source_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfLeadSourcePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_order_status_using_put_using_put(self, network_shortcut, tax_dto, **kwargs):
        """
        updateTax
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_order_status_using_put_using_put(network_shortcut, tax_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfTraOrderStatusPT tax_dto: confTraOrderStatusPT (required)
        :return: ConfTraOrderStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_order_status_using_put_using_put_with_http_info(network_shortcut, tax_dto, **kwargs)
        else:
            (data) = self.update_order_status_using_put_using_put_with_http_info(network_shortcut, tax_dto, **kwargs)
            return data

    def update_order_status_using_put_using_put_with_http_info(self, network_shortcut, tax_dto, **kwargs):
        """
        updateTax
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_order_status_using_put_using_put_with_http_info(network_shortcut, tax_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfTraOrderStatusPT tax_dto: confTraOrderStatusPT (required)
        :return: ConfTraOrderStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'tax_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_order_status_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_order_status_using_put_using_put`")
        # verify the required parameter 'tax_dto' is set
        if ('tax_dto' not in params) or (params['tax_dto'] is None):
            raise ValueError("Missing the required parameter `tax_dto` when calling `update_order_status_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/order/status'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tax_dto' in params:
            body_params = params['tax_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfTraOrderStatusPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_person_using_put_using_put(self, network_shortcut, person_dto, **kwargs):
        """
        updatePerson
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_person_using_put_using_put(network_shortcut, person_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfPersonPT person_dto: personDTO (required)
        :return: ConfPersonPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_person_using_put_using_put_with_http_info(network_shortcut, person_dto, **kwargs)
        else:
            (data) = self.update_person_using_put_using_put_with_http_info(network_shortcut, person_dto, **kwargs)
            return data

    def update_person_using_put_using_put_with_http_info(self, network_shortcut, person_dto, **kwargs):
        """
        updatePerson
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_person_using_put_using_put_with_http_info(network_shortcut, person_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfPersonPT person_dto: personDTO (required)
        :return: ConfPersonPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'person_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_person_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_person_using_put_using_put`")
        # verify the required parameter 'person_dto' is set
        if ('person_dto' not in params) or (params['person_dto'] is None):
            raise ValueError("Missing the required parameter `person_dto` when calling `update_person_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/people'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'person_dto' in params:
            body_params = params['person_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfPersonPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_property_key_using_put_using_put(self, network_shortcut, property_key_dto, **kwargs):
        """
        updatePropertyKey
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_property_key_using_put_using_put(network_shortcut, property_key_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CoreKeyPT property_key_dto: propertyKeyDTO (required)
        :return: CoreKeyPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_property_key_using_put_using_put_with_http_info(network_shortcut, property_key_dto, **kwargs)
        else:
            (data) = self.update_property_key_using_put_using_put_with_http_info(network_shortcut, property_key_dto, **kwargs)
            return data

    def update_property_key_using_put_using_put_with_http_info(self, network_shortcut, property_key_dto, **kwargs):
        """
        updatePropertyKey
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_property_key_using_put_using_put_with_http_info(network_shortcut, property_key_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CoreKeyPT property_key_dto: propertyKeyDTO (required)
        :return: CoreKeyPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'property_key_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_property_key_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_property_key_using_put_using_put`")
        # verify the required parameter 'property_key_dto' is set
        if ('property_key_dto' not in params) or (params['property_key_dto'] is None):
            raise ValueError("Missing the required parameter `property_key_dto` when calling `update_property_key_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/property/key'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'property_key_dto' in params:
            body_params = params['property_key_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CoreKeyPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_range_using_put_using_put(self, network_shortcut, core_range_pt, **kwargs):
        """
        updateRange
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_range_using_put_using_put(network_shortcut, core_range_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CoreRangePT core_range_pt: coreRangePT (required)
        :return: CoreRangePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_range_using_put_using_put_with_http_info(network_shortcut, core_range_pt, **kwargs)
        else:
            (data) = self.update_range_using_put_using_put_with_http_info(network_shortcut, core_range_pt, **kwargs)
            return data

    def update_range_using_put_using_put_with_http_info(self, network_shortcut, core_range_pt, **kwargs):
        """
        updateRange
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_range_using_put_using_put_with_http_info(network_shortcut, core_range_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CoreRangePT core_range_pt: coreRangePT (required)
        :return: CoreRangePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'core_range_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_range_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_range_using_put_using_put`")
        # verify the required parameter 'core_range_pt' is set
        if ('core_range_pt' not in params) or (params['core_range_pt'] is None):
            raise ValueError("Missing the required parameter `core_range_pt` when calling `update_range_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/range'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'core_range_pt' in params:
            body_params = params['core_range_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CoreRangePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_size_using_put_using_put(self, network_shortcut, core_size_pt, **kwargs):
        """
        updateSize
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_size_using_put_using_put(network_shortcut, core_size_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CoreSizePT core_size_pt: coreSizePT (required)
        :return: CoreSizePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_size_using_put_using_put_with_http_info(network_shortcut, core_size_pt, **kwargs)
        else:
            (data) = self.update_size_using_put_using_put_with_http_info(network_shortcut, core_size_pt, **kwargs)
            return data

    def update_size_using_put_using_put_with_http_info(self, network_shortcut, core_size_pt, **kwargs):
        """
        updateSize
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_size_using_put_using_put_with_http_info(network_shortcut, core_size_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CoreSizePT core_size_pt: coreSizePT (required)
        :return: CoreSizePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'core_size_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_size_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_size_using_put_using_put`")
        # verify the required parameter 'core_size_pt' is set
        if ('core_size_pt' not in params) or (params['core_size_pt'] is None):
            raise ValueError("Missing the required parameter `core_size_pt` when calling `update_size_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/network/dictionary/size'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'core_size_pt' in params:
            body_params = params['core_size_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CoreSizePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_tax_using_put_using_put(self, network_shortcut, tax_dto, **kwargs):
        """
        updateTax
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_tax_using_put_using_put(network_shortcut, tax_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfTaxPT tax_dto: taxDTO (required)
        :return: ConfTaxPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_tax_using_put_using_put_with_http_info(network_shortcut, tax_dto, **kwargs)
        else:
            (data) = self.update_tax_using_put_using_put_with_http_info(network_shortcut, tax_dto, **kwargs)
            return data

    def update_tax_using_put_using_put_with_http_info(self, network_shortcut, tax_dto, **kwargs):
        """
        updateTax
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_tax_using_put_using_put_with_http_info(network_shortcut, tax_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfTaxPT tax_dto: taxDTO (required)
        :return: ConfTaxPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'tax_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_tax_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_tax_using_put_using_put`")
        # verify the required parameter 'tax_dto' is set
        if ('tax_dto' not in params) or (params['tax_dto'] is None):
            raise ValueError("Missing the required parameter `tax_dto` when calling `update_tax_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/traffic/dictionary/tax'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tax_dto' in params:
            body_params = params['tax_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfTaxPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def updatelead_status_using_put_using_put(self, network_shortcut, lead_status, **kwargs):
        """
        updateLeadStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.updatelead_status_using_put_using_put(network_shortcut, lead_status, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfLeadStatusPT lead_status: leadStatus (required)
        :return: ConfLeadStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.updatelead_status_using_put_using_put_with_http_info(network_shortcut, lead_status, **kwargs)
        else:
            (data) = self.updatelead_status_using_put_using_put_with_http_info(network_shortcut, lead_status, **kwargs)
            return data

    def updatelead_status_using_put_using_put_with_http_info(self, network_shortcut, lead_status, **kwargs):
        """
        updateLeadStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.updatelead_status_using_put_using_put_with_http_info(network_shortcut, lead_status, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param ConfLeadStatusPT lead_status: leadStatus (required)
        :return: ConfLeadStatusPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'lead_status']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updatelead_status_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `updatelead_status_using_put_using_put`")
        # verify the required parameter 'lead_status' is set
        if ('lead_status' not in params) or (params['lead_status'] is None):
            raise ValueError("Missing the required parameter `lead_status` when calling `updatelead_status_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/configuration/crm/dictionary/leadstatus/'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'lead_status' in params:
            body_params = params['lead_status']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfLeadStatusPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
