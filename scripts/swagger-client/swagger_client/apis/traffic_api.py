# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class TRAFFICApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def approve_shuffeling_commercial_using_post_using_post(self, network_shortcut, tra_shuffle_advertisment_pt, **kwargs):
        """
        updateAdvertisement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.approve_shuffeling_commercial_using_post_using_post(network_shortcut, tra_shuffle_advertisment_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param TraShuffleAdvertisementPT tra_shuffle_advertisment_pt: traShuffleAdvertismentPT (required)
        :return: TraAdvertisementPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.approve_shuffeling_commercial_using_post_using_post_with_http_info(network_shortcut, tra_shuffle_advertisment_pt, **kwargs)
        else:
            (data) = self.approve_shuffeling_commercial_using_post_using_post_with_http_info(network_shortcut, tra_shuffle_advertisment_pt, **kwargs)
            return data

    def approve_shuffeling_commercial_using_post_using_post_with_http_info(self, network_shortcut, tra_shuffle_advertisment_pt, **kwargs):
        """
        updateAdvertisement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.approve_shuffeling_commercial_using_post_using_post_with_http_info(network_shortcut, tra_shuffle_advertisment_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param TraShuffleAdvertisementPT tra_shuffle_advertisment_pt: traShuffleAdvertismentPT (required)
        :return: TraAdvertisementPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'tra_shuffle_advertisment_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method approve_shuffeling_commercial_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `approve_shuffeling_commercial_using_post_using_post`")
        # verify the required parameter 'tra_shuffle_advertisment_pt' is set
        if ('tra_shuffle_advertisment_pt' not in params) or (params['tra_shuffle_advertisment_pt'] is None):
            raise ValueError("Missing the required parameter `tra_shuffle_advertisment_pt` when calling `approve_shuffeling_commercial_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/advertisement/shuffle/'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tra_shuffle_advertisment_pt' in params:
            body_params = params['tra_shuffle_advertisment_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraAdvertisementPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def creat_traffic_templates_using_post_using_post(self, network_shortcut, schdeuler_template, **kwargs):
        """
        createTrafficTemplates
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.creat_traffic_templates_using_post_using_post(network_shortcut, schdeuler_template, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param SchTemplatePT schdeuler_template: schdeulerTemplate (required)
        :return: SchTemplatePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.creat_traffic_templates_using_post_using_post_with_http_info(network_shortcut, schdeuler_template, **kwargs)
        else:
            (data) = self.creat_traffic_templates_using_post_using_post_with_http_info(network_shortcut, schdeuler_template, **kwargs)
            return data

    def creat_traffic_templates_using_post_using_post_with_http_info(self, network_shortcut, schdeuler_template, **kwargs):
        """
        createTrafficTemplates
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.creat_traffic_templates_using_post_using_post_with_http_info(network_shortcut, schdeuler_template, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param SchTemplatePT schdeuler_template: schdeulerTemplate (required)
        :return: SchTemplatePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'schdeuler_template']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method creat_traffic_templates_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `creat_traffic_templates_using_post_using_post`")
        # verify the required parameter 'schdeuler_template' is set
        if ('schdeuler_template' not in params) or (params['schdeuler_template'] is None):
            raise ValueError("Missing the required parameter `schdeuler_template` when calling `creat_traffic_templates_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/templates'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'schdeuler_template' in params:
            body_params = params['schdeuler_template']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SchTemplatePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_advertisement_using_post_using_post(self, network_shortcut, advertisement_dto, **kwargs):
        """
        createAdvertisement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_advertisement_using_post_using_post(network_shortcut, advertisement_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param TraAdvertisementPT advertisement_dto: advertisementDTO (required)
        :return: TraAdvertisementPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_advertisement_using_post_using_post_with_http_info(network_shortcut, advertisement_dto, **kwargs)
        else:
            (data) = self.create_advertisement_using_post_using_post_with_http_info(network_shortcut, advertisement_dto, **kwargs)
            return data

    def create_advertisement_using_post_using_post_with_http_info(self, network_shortcut, advertisement_dto, **kwargs):
        """
        createAdvertisement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_advertisement_using_post_using_post_with_http_info(network_shortcut, advertisement_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param TraAdvertisementPT advertisement_dto: advertisementDTO (required)
        :return: TraAdvertisementPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'advertisement_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_advertisement_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_advertisement_using_post_using_post`")
        # verify the required parameter 'advertisement_dto' is set
        if ('advertisement_dto' not in params) or (params['advertisement_dto'] is None):
            raise ValueError("Missing the required parameter `advertisement_dto` when calling `create_advertisement_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/advertisement'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'advertisement_dto' in params:
            body_params = params['advertisement_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraAdvertisementPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_an_order_using_post_using_post(self, network_shortcut, an_order_dto, **kwargs):
        """
        createAnOrder
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_an_order_using_post_using_post(network_shortcut, an_order_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param TraOrderPT an_order_dto: anOrderDTO (required)
        :return: TraOrderPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_an_order_using_post_using_post_with_http_info(network_shortcut, an_order_dto, **kwargs)
        else:
            (data) = self.create_an_order_using_post_using_post_with_http_info(network_shortcut, an_order_dto, **kwargs)
            return data

    def create_an_order_using_post_using_post_with_http_info(self, network_shortcut, an_order_dto, **kwargs):
        """
        createAnOrder
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_an_order_using_post_using_post_with_http_info(network_shortcut, an_order_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param TraOrderPT an_order_dto: anOrderDTO (required)
        :return: TraOrderPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'an_order_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_an_order_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_an_order_using_post_using_post`")
        # verify the required parameter 'an_order_dto' is set
        if ('an_order_dto' not in params) or (params['an_order_dto'] is None):
            raise ValueError("Missing the required parameter `an_order_dto` when calling `create_an_order_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/order'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'an_order_dto' in params:
            body_params = params['an_order_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraOrderPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_campaign_using_post_using_post(self, network_shortcut, campaign_dto, **kwargs):
        """
        createCampaign
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_campaign_using_post_using_post(network_shortcut, campaign_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param TraCampaignPT campaign_dto: campaignDTO (required)
        :return: TraCampaignPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_campaign_using_post_using_post_with_http_info(network_shortcut, campaign_dto, **kwargs)
        else:
            (data) = self.create_campaign_using_post_using_post_with_http_info(network_shortcut, campaign_dto, **kwargs)
            return data

    def create_campaign_using_post_using_post_with_http_info(self, network_shortcut, campaign_dto, **kwargs):
        """
        createCampaign
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_campaign_using_post_using_post_with_http_info(network_shortcut, campaign_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param TraCampaignPT campaign_dto: campaignDTO (required)
        :return: TraCampaignPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'campaign_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_campaign_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_campaign_using_post_using_post`")
        # verify the required parameter 'campaign_dto' is set
        if ('campaign_dto' not in params) or (params['campaign_dto'] is None):
            raise ValueError("Missing the required parameter `campaign_dto` when calling `create_campaign_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/campaign'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'campaign_dto' in params:
            body_params = params['campaign_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraCampaignPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_contact_activity_using_post_using_post(self, network_shortcut, short_name, crm_activity_pt, **kwargs):
        """
        createContactActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_contact_activity_using_post_using_post(network_shortcut, short_name, crm_activity_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param CrmTaskPT crm_activity_pt: crmActivityPT (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_contact_activity_using_post_using_post_with_http_info(network_shortcut, short_name, crm_activity_pt, **kwargs)
        else:
            (data) = self.create_contact_activity_using_post_using_post_with_http_info(network_shortcut, short_name, crm_activity_pt, **kwargs)
            return data

    def create_contact_activity_using_post_using_post_with_http_info(self, network_shortcut, short_name, crm_activity_pt, **kwargs):
        """
        createContactActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_contact_activity_using_post_using_post_with_http_info(network_shortcut, short_name, crm_activity_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param CrmTaskPT crm_activity_pt: crmActivityPT (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name', 'crm_activity_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_contact_activity_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_contact_activity_using_post_using_post`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `create_contact_activity_using_post_using_post`")
        # verify the required parameter 'crm_activity_pt' is set
        if ('crm_activity_pt' not in params) or (params['crm_activity_pt'] is None):
            raise ValueError("Missing the required parameter `crm_activity_pt` when calling `create_contact_activity_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/contact/{shortName}/task'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'crm_activity_pt' in params:
            body_params = params['crm_activity_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmTaskPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_contact_using_post_using_post(self, network_shortcut, customer_pt, **kwargs):
        """
        createContact
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_contact_using_post_using_post(network_shortcut, customer_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CrmContactPT customer_pt: customerPT (required)
        :return: CrmContactPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_contact_using_post_using_post_with_http_info(network_shortcut, customer_pt, **kwargs)
        else:
            (data) = self.create_contact_using_post_using_post_with_http_info(network_shortcut, customer_pt, **kwargs)
            return data

    def create_contact_using_post_using_post_with_http_info(self, network_shortcut, customer_pt, **kwargs):
        """
        createContact
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_contact_using_post_using_post_with_http_info(network_shortcut, customer_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CrmContactPT customer_pt: customerPT (required)
        :return: CrmContactPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'customer_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_contact_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_contact_using_post_using_post`")
        # verify the required parameter 'customer_pt' is set
        if ('customer_pt' not in params) or (params['customer_pt'] is None):
            raise ValueError("Missing the required parameter `customer_pt` when calling `create_contact_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/contact'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'customer_pt' in params:
            body_params = params['customer_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmContactPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_customer_activity_using_post_using_post(self, network_shortcut, short_name, crm_activity_pt, **kwargs):
        """
        createCustomerActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_customer_activity_using_post_using_post(network_shortcut, short_name, crm_activity_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param CrmTaskPT crm_activity_pt: crmActivityPT (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_customer_activity_using_post_using_post_with_http_info(network_shortcut, short_name, crm_activity_pt, **kwargs)
        else:
            (data) = self.create_customer_activity_using_post_using_post_with_http_info(network_shortcut, short_name, crm_activity_pt, **kwargs)
            return data

    def create_customer_activity_using_post_using_post_with_http_info(self, network_shortcut, short_name, crm_activity_pt, **kwargs):
        """
        createCustomerActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_customer_activity_using_post_using_post_with_http_info(network_shortcut, short_name, crm_activity_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param CrmTaskPT crm_activity_pt: crmActivityPT (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name', 'crm_activity_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_customer_activity_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_customer_activity_using_post_using_post`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `create_customer_activity_using_post_using_post`")
        # verify the required parameter 'crm_activity_pt' is set
        if ('crm_activity_pt' not in params) or (params['crm_activity_pt'] is None):
            raise ValueError("Missing the required parameter `crm_activity_pt` when calling `create_customer_activity_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/customer/{shortName}/task'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'crm_activity_pt' in params:
            body_params = params['crm_activity_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmTaskPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_customer_using_post_using_post(self, network_shortcut, customer_pt, **kwargs):
        """
        createCustomer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_customer_using_post_using_post(network_shortcut, customer_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CrmAccountPT customer_pt: customerPT (required)
        :return: CrmAccountPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_customer_using_post_using_post_with_http_info(network_shortcut, customer_pt, **kwargs)
        else:
            (data) = self.create_customer_using_post_using_post_with_http_info(network_shortcut, customer_pt, **kwargs)
            return data

    def create_customer_using_post_using_post_with_http_info(self, network_shortcut, customer_pt, **kwargs):
        """
        createCustomer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_customer_using_post_using_post_with_http_info(network_shortcut, customer_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CrmAccountPT customer_pt: customerPT (required)
        :return: CrmAccountPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'customer_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_customer_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_customer_using_post_using_post`")
        # verify the required parameter 'customer_pt' is set
        if ('customer_pt' not in params) or (params['customer_pt'] is None):
            raise ValueError("Missing the required parameter `customer_pt` when calling `create_customer_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/customer'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'customer_pt' in params:
            body_params = params['customer_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmAccountPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_invoice_using_post_using_post(self, network_shortcut, invoice_dto, **kwargs):
        """
        createInvoice
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_invoice_using_post_using_post(network_shortcut, invoice_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param TraInvoicePT invoice_dto: invoiceDTO (required)
        :return: TraInvoicePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_invoice_using_post_using_post_with_http_info(network_shortcut, invoice_dto, **kwargs)
        else:
            (data) = self.create_invoice_using_post_using_post_with_http_info(network_shortcut, invoice_dto, **kwargs)
            return data

    def create_invoice_using_post_using_post_with_http_info(self, network_shortcut, invoice_dto, **kwargs):
        """
        createInvoice
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_invoice_using_post_using_post_with_http_info(network_shortcut, invoice_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param TraInvoicePT invoice_dto: invoiceDTO (required)
        :return: TraInvoicePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'invoice_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_invoice_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_invoice_using_post_using_post`")
        # verify the required parameter 'invoice_dto' is set
        if ('invoice_dto' not in params) or (params['invoice_dto'] is None):
            raise ValueError("Missing the required parameter `invoice_dto` when calling `create_invoice_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/invoice'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'invoice_dto' in params:
            body_params = params['invoice_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraInvoicePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_lead_activity_using_post_using_post(self, network_shortcut, short_name, crm_activity_pt, **kwargs):
        """
        createLeadActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_lead_activity_using_post_using_post(network_shortcut, short_name, crm_activity_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param CrmTaskPT crm_activity_pt: crmActivityPT (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_lead_activity_using_post_using_post_with_http_info(network_shortcut, short_name, crm_activity_pt, **kwargs)
        else:
            (data) = self.create_lead_activity_using_post_using_post_with_http_info(network_shortcut, short_name, crm_activity_pt, **kwargs)
            return data

    def create_lead_activity_using_post_using_post_with_http_info(self, network_shortcut, short_name, crm_activity_pt, **kwargs):
        """
        createLeadActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_lead_activity_using_post_using_post_with_http_info(network_shortcut, short_name, crm_activity_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param CrmTaskPT crm_activity_pt: crmActivityPT (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name', 'crm_activity_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_lead_activity_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_lead_activity_using_post_using_post`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `create_lead_activity_using_post_using_post`")
        # verify the required parameter 'crm_activity_pt' is set
        if ('crm_activity_pt' not in params) or (params['crm_activity_pt'] is None):
            raise ValueError("Missing the required parameter `crm_activity_pt` when calling `create_lead_activity_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/lead/{shortName}/task'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'crm_activity_pt' in params:
            body_params = params['crm_activity_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmTaskPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_lead_using_post_using_post(self, network_shortcut, crm_lead_pt, **kwargs):
        """
        createLead
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_lead_using_post_using_post(network_shortcut, crm_lead_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CrmLeadPT crm_lead_pt: crmLeadPT (required)
        :return: CrmLeadPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_lead_using_post_using_post_with_http_info(network_shortcut, crm_lead_pt, **kwargs)
        else:
            (data) = self.create_lead_using_post_using_post_with_http_info(network_shortcut, crm_lead_pt, **kwargs)
            return data

    def create_lead_using_post_using_post_with_http_info(self, network_shortcut, crm_lead_pt, **kwargs):
        """
        createLead
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_lead_using_post_using_post_with_http_info(network_shortcut, crm_lead_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CrmLeadPT crm_lead_pt: crmLeadPT (required)
        :return: CrmLeadPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'crm_lead_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_lead_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_lead_using_post_using_post`")
        # verify the required parameter 'crm_lead_pt' is set
        if ('crm_lead_pt' not in params) or (params['crm_lead_pt'] is None):
            raise ValueError("Missing the required parameter `crm_lead_pt` when calling `create_lead_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/lead'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'crm_lead_pt' in params:
            body_params = params['crm_lead_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmLeadPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_opportunity_activity_using_post_using_post(self, network_shortcut, short_name, crm_activity_pt, **kwargs):
        """
        createOpportunityActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_opportunity_activity_using_post_using_post(network_shortcut, short_name, crm_activity_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param CrmTaskPT crm_activity_pt: crmActivityPT (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_opportunity_activity_using_post_using_post_with_http_info(network_shortcut, short_name, crm_activity_pt, **kwargs)
        else:
            (data) = self.create_opportunity_activity_using_post_using_post_with_http_info(network_shortcut, short_name, crm_activity_pt, **kwargs)
            return data

    def create_opportunity_activity_using_post_using_post_with_http_info(self, network_shortcut, short_name, crm_activity_pt, **kwargs):
        """
        createOpportunityActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_opportunity_activity_using_post_using_post_with_http_info(network_shortcut, short_name, crm_activity_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param CrmTaskPT crm_activity_pt: crmActivityPT (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name', 'crm_activity_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_opportunity_activity_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_opportunity_activity_using_post_using_post`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `create_opportunity_activity_using_post_using_post`")
        # verify the required parameter 'crm_activity_pt' is set
        if ('crm_activity_pt' not in params) or (params['crm_activity_pt'] is None):
            raise ValueError("Missing the required parameter `crm_activity_pt` when calling `create_opportunity_activity_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/opportunity/{shortName}/task'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'crm_activity_pt' in params:
            body_params = params['crm_activity_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmTaskPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_opportunity_using_post_using_post(self, network_shortcut, crm_opportunity_pt, **kwargs):
        """
        createOpportunity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_opportunity_using_post_using_post(network_shortcut, crm_opportunity_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CrmOpportunityPT crm_opportunity_pt: crmOpportunityPT (required)
        :return: CrmOpportunityPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_opportunity_using_post_using_post_with_http_info(network_shortcut, crm_opportunity_pt, **kwargs)
        else:
            (data) = self.create_opportunity_using_post_using_post_with_http_info(network_shortcut, crm_opportunity_pt, **kwargs)
            return data

    def create_opportunity_using_post_using_post_with_http_info(self, network_shortcut, crm_opportunity_pt, **kwargs):
        """
        createOpportunity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_opportunity_using_post_using_post_with_http_info(network_shortcut, crm_opportunity_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CrmOpportunityPT crm_opportunity_pt: crmOpportunityPT (required)
        :return: CrmOpportunityPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'crm_opportunity_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_opportunity_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_opportunity_using_post_using_post`")
        # verify the required parameter 'crm_opportunity_pt' is set
        if ('crm_opportunity_pt' not in params) or (params['crm_opportunity_pt'] is None):
            raise ValueError("Missing the required parameter `crm_opportunity_pt` when calling `create_opportunity_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/opportunity'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'crm_opportunity_pt' in params:
            body_params = params['crm_opportunity_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmOpportunityPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_traffic_customer_using_post_using_post(self, network_shortcut, customer, **kwargs):
        """
        createTrafficCustomerUsingPOST
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_traffic_customer_using_post_using_post(network_shortcut, customer, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param TraCustomerPT customer: customerVM (required)
        :return: TraCustomerPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_traffic_customer_using_post_using_post_with_http_info(network_shortcut, customer, **kwargs)
        else:
            (data) = self.create_traffic_customer_using_post_using_post_with_http_info(network_shortcut, customer, **kwargs)
            return data

    def create_traffic_customer_using_post_using_post_with_http_info(self, network_shortcut, customer, **kwargs):
        """
        createTrafficCustomerUsingPOST
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_traffic_customer_using_post_using_post_with_http_info(network_shortcut, customer, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param TraCustomerPT customer: customerVM (required)
        :return: TraCustomerPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'customer']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_traffic_customer_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `create_traffic_customer_using_post_using_post`")
        # verify the required parameter 'customer' is set
        if ('customer' not in params) or (params['customer'] is None):
            raise ValueError("Missing the required parameter `customer` when calling `create_traffic_customer_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/customer/'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'customer' in params:
            body_params = params['customer']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraCustomerPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_advertisement_using_delete_using_delete(self, network_shortcut, idx, **kwargs):
        """
        deleteAdvertisement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_advertisement_using_delete_using_delete(network_shortcut, idx, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int idx: idx (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_advertisement_using_delete_using_delete_with_http_info(network_shortcut, idx, **kwargs)
        else:
            (data) = self.delete_advertisement_using_delete_using_delete_with_http_info(network_shortcut, idx, **kwargs)
            return data

    def delete_advertisement_using_delete_using_delete_with_http_info(self, network_shortcut, idx, **kwargs):
        """
        deleteAdvertisement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_advertisement_using_delete_using_delete_with_http_info(network_shortcut, idx, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int idx: idx (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'idx']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_advertisement_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_advertisement_using_delete_using_delete`")
        # verify the required parameter 'idx' is set
        if ('idx' not in params) or (params['idx'] is None):
            raise ValueError("Missing the required parameter `idx` when calling `delete_advertisement_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/advertisement/{idx}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'idx' in params:
            path_params['idx'] = params['idx']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_an_order_using_delete_using_delete(self, network_shortcut, id, **kwargs):
        """
        deleteAnOrder
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_an_order_using_delete_using_delete(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_an_order_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.delete_an_order_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
            return data

    def delete_an_order_using_delete_using_delete_with_http_info(self, network_shortcut, id, **kwargs):
        """
        deleteAnOrder
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_an_order_using_delete_using_delete_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_an_order_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_an_order_using_delete_using_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_an_order_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/order/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_campaign_using_delete_using_delete(self, network_shortcut, short_name, **kwargs):
        """
        deleteCampaign
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_campaign_using_delete_using_delete(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_campaign_using_delete_using_delete_with_http_info(network_shortcut, short_name, **kwargs)
        else:
            (data) = self.delete_campaign_using_delete_using_delete_with_http_info(network_shortcut, short_name, **kwargs)
            return data

    def delete_campaign_using_delete_using_delete_with_http_info(self, network_shortcut, short_name, **kwargs):
        """
        deleteCampaign
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_campaign_using_delete_using_delete_with_http_info(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_campaign_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_campaign_using_delete_using_delete`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `delete_campaign_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/campaign/{shortName}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_contact_activity_using_delete_using_delete(self, network_shortcut, short_name, id, **kwargs):
        """
        deleteContactActivityActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_contact_activity_using_delete_using_delete(network_shortcut, short_name, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_contact_activity_using_delete_using_delete_with_http_info(network_shortcut, short_name, id, **kwargs)
        else:
            (data) = self.delete_contact_activity_using_delete_using_delete_with_http_info(network_shortcut, short_name, id, **kwargs)
            return data

    def delete_contact_activity_using_delete_using_delete_with_http_info(self, network_shortcut, short_name, id, **kwargs):
        """
        deleteContactActivityActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_contact_activity_using_delete_using_delete_with_http_info(network_shortcut, short_name, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_contact_activity_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_contact_activity_using_delete_using_delete`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `delete_contact_activity_using_delete_using_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_contact_activity_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/contact/{shortName}/task/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_contact_using_delete_using_delete(self, network_shortcut, short_name, **kwargs):
        """
        deleteContact
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_contact_using_delete_using_delete(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_contact_using_delete_using_delete_with_http_info(network_shortcut, short_name, **kwargs)
        else:
            (data) = self.delete_contact_using_delete_using_delete_with_http_info(network_shortcut, short_name, **kwargs)
            return data

    def delete_contact_using_delete_using_delete_with_http_info(self, network_shortcut, short_name, **kwargs):
        """
        deleteContact
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_contact_using_delete_using_delete_with_http_info(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_contact_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_contact_using_delete_using_delete`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `delete_contact_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/contact/{shortName}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_customer_activity_using_delete_using_delete(self, network_shortcut, short_name, id, **kwargs):
        """
        deleteCustomerActivityActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_customer_activity_using_delete_using_delete(network_shortcut, short_name, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_customer_activity_using_delete_using_delete_with_http_info(network_shortcut, short_name, id, **kwargs)
        else:
            (data) = self.delete_customer_activity_using_delete_using_delete_with_http_info(network_shortcut, short_name, id, **kwargs)
            return data

    def delete_customer_activity_using_delete_using_delete_with_http_info(self, network_shortcut, short_name, id, **kwargs):
        """
        deleteCustomerActivityActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_customer_activity_using_delete_using_delete_with_http_info(network_shortcut, short_name, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_customer_activity_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_customer_activity_using_delete_using_delete`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `delete_customer_activity_using_delete_using_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_customer_activity_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/customer/{shortName}/task/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_customery_using_delete_using_delete(self, network_shortcut, short_name, **kwargs):
        """
        deleteCustomer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_customery_using_delete_using_delete(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_customery_using_delete_using_delete_with_http_info(network_shortcut, short_name, **kwargs)
        else:
            (data) = self.delete_customery_using_delete_using_delete_with_http_info(network_shortcut, short_name, **kwargs)
            return data

    def delete_customery_using_delete_using_delete_with_http_info(self, network_shortcut, short_name, **kwargs):
        """
        deleteCustomer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_customery_using_delete_using_delete_with_http_info(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_customery_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_customery_using_delete_using_delete`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `delete_customery_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/customer/{shortName}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_invoice_using_delete_using_delete(self, network_shortcut, id, **kwargs):
        """
        deleteInvoice
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_invoice_using_delete_using_delete(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_invoice_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.delete_invoice_using_delete_using_delete_with_http_info(network_shortcut, id, **kwargs)
            return data

    def delete_invoice_using_delete_using_delete_with_http_info(self, network_shortcut, id, **kwargs):
        """
        deleteInvoice
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_invoice_using_delete_using_delete_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_invoice_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_invoice_using_delete_using_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_invoice_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/invoice/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_lead_activity_using_delete_using_delete(self, network_shortcut, short_name, id, **kwargs):
        """
        deleteLeadActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_lead_activity_using_delete_using_delete(network_shortcut, short_name, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_lead_activity_using_delete_using_delete_with_http_info(network_shortcut, short_name, id, **kwargs)
        else:
            (data) = self.delete_lead_activity_using_delete_using_delete_with_http_info(network_shortcut, short_name, id, **kwargs)
            return data

    def delete_lead_activity_using_delete_using_delete_with_http_info(self, network_shortcut, short_name, id, **kwargs):
        """
        deleteLeadActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_lead_activity_using_delete_using_delete_with_http_info(network_shortcut, short_name, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_lead_activity_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_lead_activity_using_delete_using_delete`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `delete_lead_activity_using_delete_using_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_lead_activity_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/lead/{shortName}/task/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_lead_using_delete_using_delete(self, network_shortcut, short_name, **kwargs):
        """
        deleteLead
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_lead_using_delete_using_delete(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_lead_using_delete_using_delete_with_http_info(network_shortcut, short_name, **kwargs)
        else:
            (data) = self.delete_lead_using_delete_using_delete_with_http_info(network_shortcut, short_name, **kwargs)
            return data

    def delete_lead_using_delete_using_delete_with_http_info(self, network_shortcut, short_name, **kwargs):
        """
        deleteLead
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_lead_using_delete_using_delete_with_http_info(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_lead_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_lead_using_delete_using_delete`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `delete_lead_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/lead/{shortName}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_opportunity_activity_using_delete_using_delete(self, network_shortcut, short_name, id, **kwargs):
        """
        deleteOpportunityActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_opportunity_activity_using_delete_using_delete(network_shortcut, short_name, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_opportunity_activity_using_delete_using_delete_with_http_info(network_shortcut, short_name, id, **kwargs)
        else:
            (data) = self.delete_opportunity_activity_using_delete_using_delete_with_http_info(network_shortcut, short_name, id, **kwargs)
            return data

    def delete_opportunity_activity_using_delete_using_delete_with_http_info(self, network_shortcut, short_name, id, **kwargs):
        """
        deleteOpportunityActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_opportunity_activity_using_delete_using_delete_with_http_info(network_shortcut, short_name, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_opportunity_activity_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_opportunity_activity_using_delete_using_delete`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `delete_opportunity_activity_using_delete_using_delete`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_opportunity_activity_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/opportunity/{shortName}/task/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_opportunity_using_delete_using_delete(self, network_shortcut, short_name, **kwargs):
        """
        deleteOpportunity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_opportunity_using_delete_using_delete(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_opportunity_using_delete_using_delete_with_http_info(network_shortcut, short_name, **kwargs)
        else:
            (data) = self.delete_opportunity_using_delete_using_delete_with_http_info(network_shortcut, short_name, **kwargs)
            return data

    def delete_opportunity_using_delete_using_delete_with_http_info(self, network_shortcut, short_name, **kwargs):
        """
        deleteOpportunity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_opportunity_using_delete_using_delete_with_http_info(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_opportunity_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_opportunity_using_delete_using_delete`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `delete_opportunity_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/opportunity/{shortName}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_traffic_customer_using_delete_using_delete(self, network_shortcut, customer_shortcut, **kwargs):
        """
        deleteTrafficCustomerUsingDELETE
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_traffic_customer_using_delete_using_delete(network_shortcut, customer_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str customer_shortcut: customerShortcut (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_traffic_customer_using_delete_using_delete_with_http_info(network_shortcut, customer_shortcut, **kwargs)
        else:
            (data) = self.delete_traffic_customer_using_delete_using_delete_with_http_info(network_shortcut, customer_shortcut, **kwargs)
            return data

    def delete_traffic_customer_using_delete_using_delete_with_http_info(self, network_shortcut, customer_shortcut, **kwargs):
        """
        deleteTrafficCustomerUsingDELETE
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_traffic_customer_using_delete_using_delete_with_http_info(network_shortcut, customer_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str customer_shortcut: customerShortcut (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'customer_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_traffic_customer_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_traffic_customer_using_delete_using_delete`")
        # verify the required parameter 'customer_shortcut' is set
        if ('customer_shortcut' not in params) or (params['customer_shortcut'] is None):
            raise ValueError("Missing the required parameter `customer_shortcut` when calling `delete_traffic_customer_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/customer/{customerShortcut}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'customer_shortcut' in params:
            path_params['customerShortcut'] = params['customer_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_traffic_template_using_delete_using_delete(self, network_shortcut, short_name, **kwargs):
        """
        deleteTrafficTemplate
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_traffic_template_using_delete_using_delete(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_traffic_template_using_delete_using_delete_with_http_info(network_shortcut, short_name, **kwargs)
        else:
            (data) = self.delete_traffic_template_using_delete_using_delete_with_http_info(network_shortcut, short_name, **kwargs)
            return data

    def delete_traffic_template_using_delete_using_delete_with_http_info(self, network_shortcut, short_name, **kwargs):
        """
        deleteTrafficTemplate
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_traffic_template_using_delete_using_delete_with_http_info(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_traffic_template_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_traffic_template_using_delete_using_delete`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `delete_traffic_template_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/templates/{shortName}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_advertisement_using_get_using_get(self, network_shortcut, idx, **kwargs):
        """
        getAdvertisement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_advertisement_using_get_using_get(network_shortcut, idx, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int idx: idx (required)
        :return: TraAdvertisementPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_advertisement_using_get_using_get_with_http_info(network_shortcut, idx, **kwargs)
        else:
            (data) = self.get_advertisement_using_get_using_get_with_http_info(network_shortcut, idx, **kwargs)
            return data

    def get_advertisement_using_get_using_get_with_http_info(self, network_shortcut, idx, **kwargs):
        """
        getAdvertisement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_advertisement_using_get_using_get_with_http_info(network_shortcut, idx, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int idx: idx (required)
        :return: TraAdvertisementPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'idx']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_advertisement_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_advertisement_using_get_using_get`")
        # verify the required parameter 'idx' is set
        if ('idx' not in params) or (params['idx'] is None):
            raise ValueError("Missing the required parameter `idx` when calling `get_advertisement_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/advertisement/{idx}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'idx' in params:
            path_params['idx'] = params['idx']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraAdvertisementPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_advertisements_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllAdvertisements
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_advertisements_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: TraAdvertisementPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_advertisements_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_advertisements_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_advertisements_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllAdvertisements
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_advertisements_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: TraAdvertisementPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_advertisements_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_advertisements_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/advertisement'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraAdvertisementPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_an_orders_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllAnOrders
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_an_orders_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: TraOrderPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_an_orders_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_an_orders_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_an_orders_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllAnOrders
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_an_orders_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: TraOrderPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_an_orders_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_an_orders_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/order'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraOrderPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_campaigns_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllCampaigns
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_campaigns_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: TraCampaignPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_campaigns_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_campaigns_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_campaigns_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllCampaigns
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_campaigns_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: TraCampaignPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_campaigns_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_campaigns_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/campaign'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraCampaignPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_contact_activities_using_get_using_get(self, network_shortcut, short_name, **kwargs):
        """
        getAllContactActivities
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_contact_activities_using_get_using_get(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_contact_activities_using_get_using_get_with_http_info(network_shortcut, short_name, **kwargs)
        else:
            (data) = self.get_all_contact_activities_using_get_using_get_with_http_info(network_shortcut, short_name, **kwargs)
            return data

    def get_all_contact_activities_using_get_using_get_with_http_info(self, network_shortcut, short_name, **kwargs):
        """
        getAllContactActivities
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_contact_activities_using_get_using_get_with_http_info(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_contact_activities_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_contact_activities_using_get_using_get`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `get_all_contact_activities_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/contact/{shortName}/task'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmTaskPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_contact_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllContact
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_contact_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: CrmContactPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_contact_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_contact_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_contact_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllContact
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_contact_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: CrmContactPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_contact_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_contact_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/contact'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmContactPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_customer_activities_using_get_using_get(self, network_shortcut, short_name, **kwargs):
        """
        getAllCustomerActivities
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_customer_activities_using_get_using_get(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_customer_activities_using_get_using_get_with_http_info(network_shortcut, short_name, **kwargs)
        else:
            (data) = self.get_all_customer_activities_using_get_using_get_with_http_info(network_shortcut, short_name, **kwargs)
            return data

    def get_all_customer_activities_using_get_using_get_with_http_info(self, network_shortcut, short_name, **kwargs):
        """
        getAllCustomerActivities
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_customer_activities_using_get_using_get_with_http_info(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_customer_activities_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_customer_activities_using_get_using_get`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `get_all_customer_activities_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/customer/{shortName}/task'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmTaskPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_customer_campaigns_using_get_using_get(self, network_shortcut, customer_shortcut, **kwargs):
        """
        getAllCustomerCampaigns
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_customer_campaigns_using_get_using_get(network_shortcut, customer_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str customer_shortcut: customerShortcut (required)
        :return: TraCampaignPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_customer_campaigns_using_get_using_get_with_http_info(network_shortcut, customer_shortcut, **kwargs)
        else:
            (data) = self.get_all_customer_campaigns_using_get_using_get_with_http_info(network_shortcut, customer_shortcut, **kwargs)
            return data

    def get_all_customer_campaigns_using_get_using_get_with_http_info(self, network_shortcut, customer_shortcut, **kwargs):
        """
        getAllCustomerCampaigns
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_customer_campaigns_using_get_using_get_with_http_info(network_shortcut, customer_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str customer_shortcut: customerShortcut (required)
        :return: TraCampaignPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'customer_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_customer_campaigns_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_customer_campaigns_using_get_using_get`")
        # verify the required parameter 'customer_shortcut' is set
        if ('customer_shortcut' not in params) or (params['customer_shortcut'] is None):
            raise ValueError("Missing the required parameter `customer_shortcut` when calling `get_all_customer_campaigns_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/customer/{customerShortcut}/campaign'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'customer_shortcut' in params:
            path_params['customerShortcut'] = params['customer_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraCampaignPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_customer_orders_using_get_using_get(self, network_shortcut, customer_shortcut, **kwargs):
        """
        getAllCustomerOrders
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_customer_orders_using_get_using_get(network_shortcut, customer_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str customer_shortcut: customerShortcut (required)
        :return: TraOrderPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_customer_orders_using_get_using_get_with_http_info(network_shortcut, customer_shortcut, **kwargs)
        else:
            (data) = self.get_all_customer_orders_using_get_using_get_with_http_info(network_shortcut, customer_shortcut, **kwargs)
            return data

    def get_all_customer_orders_using_get_using_get_with_http_info(self, network_shortcut, customer_shortcut, **kwargs):
        """
        getAllCustomerOrders
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_customer_orders_using_get_using_get_with_http_info(network_shortcut, customer_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str customer_shortcut: customerShortcut (required)
        :return: TraOrderPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'customer_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_customer_orders_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_customer_orders_using_get_using_get`")
        # verify the required parameter 'customer_shortcut' is set
        if ('customer_shortcut' not in params) or (params['customer_shortcut'] is None):
            raise ValueError("Missing the required parameter `customer_shortcut` when calling `get_all_customer_orders_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/customer/{customerShortcut}/order'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'customer_shortcut' in params:
            path_params['customerShortcut'] = params['customer_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraOrderPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_customers_advertisments_using_get_using_get(self, network_shortcut, customer_shortcut, **kwargs):
        """
        getAllCustomersAdvertismentsUsingGET
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_customers_advertisments_using_get_using_get(network_shortcut, customer_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str customer_shortcut: customerShortcut (required)
        :return: TraCustomerAdvertismentsPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_customers_advertisments_using_get_using_get_with_http_info(network_shortcut, customer_shortcut, **kwargs)
        else:
            (data) = self.get_all_customers_advertisments_using_get_using_get_with_http_info(network_shortcut, customer_shortcut, **kwargs)
            return data

    def get_all_customers_advertisments_using_get_using_get_with_http_info(self, network_shortcut, customer_shortcut, **kwargs):
        """
        getAllCustomersAdvertismentsUsingGET
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_customers_advertisments_using_get_using_get_with_http_info(network_shortcut, customer_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str customer_shortcut: customerShortcut (required)
        :return: TraCustomerAdvertismentsPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'customer_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_customers_advertisments_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_customers_advertisments_using_get_using_get`")
        # verify the required parameter 'customer_shortcut' is set
        if ('customer_shortcut' not in params) or (params['customer_shortcut'] is None):
            raise ValueError("Missing the required parameter `customer_shortcut` when calling `get_all_customers_advertisments_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/customer/{customerShortcut}/advertisement'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'customer_shortcut' in params:
            path_params['customerShortcut'] = params['customer_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraCustomerAdvertismentsPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_customers_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllCustomers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_customers_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: CrmAccountPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_customers_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_customers_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_customers_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllCustomers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_customers_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: CrmAccountPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_customers_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_customers_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/customer'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmAccountPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_invoices_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllInvoices
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_invoices_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: TraInvoicePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_invoices_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_invoices_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_invoices_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllInvoices
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_invoices_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: TraInvoicePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_invoices_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_invoices_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/invoice'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraInvoicePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_lead_activities_using_get_using_get(self, network_shortcut, short_name, **kwargs):
        """
        getAllLeadActivities
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_lead_activities_using_get_using_get(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_lead_activities_using_get_using_get_with_http_info(network_shortcut, short_name, **kwargs)
        else:
            (data) = self.get_all_lead_activities_using_get_using_get_with_http_info(network_shortcut, short_name, **kwargs)
            return data

    def get_all_lead_activities_using_get_using_get_with_http_info(self, network_shortcut, short_name, **kwargs):
        """
        getAllLeadActivities
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_lead_activities_using_get_using_get_with_http_info(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_lead_activities_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_lead_activities_using_get_using_get`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `get_all_lead_activities_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/lead/{shortName}/task'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmTaskPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_leads_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllLeads
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_leads_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: CrmLeadPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_leads_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_leads_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_leads_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllLeads
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_leads_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: CrmLeadPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_leads_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_leads_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/lead'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmLeadPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_opportunities_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllOpportunities
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_opportunities_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: CrmOpportunityPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_opportunities_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_opportunities_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_opportunities_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllOpportunities
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_opportunities_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: CrmOpportunityPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_opportunities_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_opportunities_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/opportunity'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmOpportunityPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_opportunity_activities_using_get_using_get(self, network_shortcut, short_name, **kwargs):
        """
        getAllOpportunityActivities
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_opportunity_activities_using_get_using_get(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_opportunity_activities_using_get_using_get_with_http_info(network_shortcut, short_name, **kwargs)
        else:
            (data) = self.get_all_opportunity_activities_using_get_using_get_with_http_info(network_shortcut, short_name, **kwargs)
            return data

    def get_all_opportunity_activities_using_get_using_get_with_http_info(self, network_shortcut, short_name, **kwargs):
        """
        getAllOpportunityActivities
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_opportunity_activities_using_get_using_get_with_http_info(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_opportunity_activities_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_opportunity_activities_using_get_using_get`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `get_all_opportunity_activities_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/opportunity/{shortName}/task'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmTaskPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_traffic_customers_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllTrafficCustomersUsingGET
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_traffic_customers_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: TraCustomerPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_traffic_customers_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_traffic_customers_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_traffic_customers_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllTrafficCustomersUsingGET
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_traffic_customers_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: TraCustomerPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_traffic_customers_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_traffic_customers_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/customer/'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraCustomerPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_traffic_invoices_for_customer_get_using_get(self, network_shortcut, customer_shortcut, **kwargs):
        """
        getAllInvoicesForCustomer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_traffic_invoices_for_customer_get_using_get(network_shortcut, customer_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str customer_shortcut: customerShortcut (required)
        :return: TraCustomerOrdersPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_traffic_invoices_for_customer_get_using_get_with_http_info(network_shortcut, customer_shortcut, **kwargs)
        else:
            (data) = self.get_all_traffic_invoices_for_customer_get_using_get_with_http_info(network_shortcut, customer_shortcut, **kwargs)
            return data

    def get_all_traffic_invoices_for_customer_get_using_get_with_http_info(self, network_shortcut, customer_shortcut, **kwargs):
        """
        getAllInvoicesForCustomer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_traffic_invoices_for_customer_get_using_get_with_http_info(network_shortcut, customer_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str customer_shortcut: customerShortcut (required)
        :return: TraCustomerOrdersPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'customer_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_traffic_invoices_for_customer_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_traffic_invoices_for_customer_get_using_get`")
        # verify the required parameter 'customer_shortcut' is set
        if ('customer_shortcut' not in params) or (params['customer_shortcut'] is None):
            raise ValueError("Missing the required parameter `customer_shortcut` when calling `get_all_traffic_invoices_for_customer_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/customer/{customerShortcut}/invoice'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'customer_shortcut' in params:
            path_params['customerShortcut'] = params['customer_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraCustomerOrdersPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_traffic_templates_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllTrafficTemplates
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_traffic_templates_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: SchTemplatePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_traffic_templates_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_traffic_templates_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_traffic_templates_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllTrafficTemplates
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_traffic_templates_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: SchTemplatePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_traffic_templates_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_traffic_templates_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/templates'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SchTemplatePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_an_order_using_get_using_get(self, network_shortcut, id, **kwargs):
        """
        getAnOrder
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_an_order_using_get_using_get(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: TraOrderPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_an_order_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.get_an_order_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
            return data

    def get_an_order_using_get_using_get_with_http_info(self, network_shortcut, id, **kwargs):
        """
        getAnOrder
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_an_order_using_get_using_get_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: TraOrderPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_an_order_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_an_order_using_get_using_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_an_order_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/order/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraOrderPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_campaign_using_get_using_get(self, network_shortcut, short_name, **kwargs):
        """
        getCampaign
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_campaign_using_get_using_get(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: TraCampaignPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_campaign_using_get_using_get_with_http_info(network_shortcut, short_name, **kwargs)
        else:
            (data) = self.get_campaign_using_get_using_get_with_http_info(network_shortcut, short_name, **kwargs)
            return data

    def get_campaign_using_get_using_get_with_http_info(self, network_shortcut, short_name, **kwargs):
        """
        getCampaign
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_campaign_using_get_using_get_with_http_info(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: TraCampaignPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_campaign_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_campaign_using_get_using_get`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `get_campaign_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/campaign/{shortName}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraCampaignPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_contact_activity_using_get_using_get(self, network_shortcut, short_name, id, **kwargs):
        """
        getContactActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_contact_activity_using_get_using_get(network_shortcut, short_name, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param int id: id (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_contact_activity_using_get_using_get_with_http_info(network_shortcut, short_name, id, **kwargs)
        else:
            (data) = self.get_contact_activity_using_get_using_get_with_http_info(network_shortcut, short_name, id, **kwargs)
            return data

    def get_contact_activity_using_get_using_get_with_http_info(self, network_shortcut, short_name, id, **kwargs):
        """
        getContactActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_contact_activity_using_get_using_get_with_http_info(network_shortcut, short_name, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param int id: id (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_contact_activity_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_contact_activity_using_get_using_get`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `get_contact_activity_using_get_using_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_contact_activity_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/contact/{shortName}/task/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmTaskPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_contact_using_get_using_get(self, network_shortcut, short_name, **kwargs):
        """
        getContact
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_contact_using_get_using_get(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: CrmContactPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_contact_using_get_using_get_with_http_info(network_shortcut, short_name, **kwargs)
        else:
            (data) = self.get_contact_using_get_using_get_with_http_info(network_shortcut, short_name, **kwargs)
            return data

    def get_contact_using_get_using_get_with_http_info(self, network_shortcut, short_name, **kwargs):
        """
        getContact
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_contact_using_get_using_get_with_http_info(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: CrmContactPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_contact_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_contact_using_get_using_get`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `get_contact_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/contact/{shortName}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmContactPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_customer_activity_using_get_using_get(self, network_shortcut, short_name, id, **kwargs):
        """
        getCustomerActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_customer_activity_using_get_using_get(network_shortcut, short_name, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param int id: id (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_customer_activity_using_get_using_get_with_http_info(network_shortcut, short_name, id, **kwargs)
        else:
            (data) = self.get_customer_activity_using_get_using_get_with_http_info(network_shortcut, short_name, id, **kwargs)
            return data

    def get_customer_activity_using_get_using_get_with_http_info(self, network_shortcut, short_name, id, **kwargs):
        """
        getCustomerActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_customer_activity_using_get_using_get_with_http_info(network_shortcut, short_name, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param int id: id (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_customer_activity_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_customer_activity_using_get_using_get`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `get_customer_activity_using_get_using_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_customer_activity_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/customer/{shortName}/task/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmTaskPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_customer_using_get_using_get(self, network_shortcut, short_name, **kwargs):
        """
        getCustomer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_customer_using_get_using_get(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: CrmAccountPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_customer_using_get_using_get_with_http_info(network_shortcut, short_name, **kwargs)
        else:
            (data) = self.get_customer_using_get_using_get_with_http_info(network_shortcut, short_name, **kwargs)
            return data

    def get_customer_using_get_using_get_with_http_info(self, network_shortcut, short_name, **kwargs):
        """
        getCustomer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_customer_using_get_using_get_with_http_info(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: CrmAccountPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_customer_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_customer_using_get_using_get`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `get_customer_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/customer/{shortName}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmAccountPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_invoice_using_get_using_get(self, network_shortcut, id, **kwargs):
        """
        getInvoice
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_invoice_using_get_using_get(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: TraInvoicePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_invoice_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.get_invoice_using_get_using_get_with_http_info(network_shortcut, id, **kwargs)
            return data

    def get_invoice_using_get_using_get_with_http_info(self, network_shortcut, id, **kwargs):
        """
        getInvoice
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_invoice_using_get_using_get_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: TraInvoicePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invoice_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_invoice_using_get_using_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_invoice_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/invoice/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraInvoicePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_lead_activity_using_get_using_get(self, network_shortcut, short_name, id, **kwargs):
        """
        getLead
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_lead_activity_using_get_using_get(network_shortcut, short_name, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param int id: id (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_lead_activity_using_get_using_get_with_http_info(network_shortcut, short_name, id, **kwargs)
        else:
            (data) = self.get_lead_activity_using_get_using_get_with_http_info(network_shortcut, short_name, id, **kwargs)
            return data

    def get_lead_activity_using_get_using_get_with_http_info(self, network_shortcut, short_name, id, **kwargs):
        """
        getLead
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_lead_activity_using_get_using_get_with_http_info(network_shortcut, short_name, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param int id: id (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lead_activity_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_lead_activity_using_get_using_get`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `get_lead_activity_using_get_using_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_lead_activity_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/lead/{shortName}/task/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmTaskPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_lead_using_get_using_get(self, network_shortcut, short_name, **kwargs):
        """
        getLead
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_lead_using_get_using_get(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: CrmLeadPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_lead_using_get_using_get_with_http_info(network_shortcut, short_name, **kwargs)
        else:
            (data) = self.get_lead_using_get_using_get_with_http_info(network_shortcut, short_name, **kwargs)
            return data

    def get_lead_using_get_using_get_with_http_info(self, network_shortcut, short_name, **kwargs):
        """
        getLead
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_lead_using_get_using_get_with_http_info(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: CrmLeadPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lead_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_lead_using_get_using_get`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `get_lead_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/lead/{shortName}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmLeadPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_opportunity_activity_using_get_using_get(self, network_shortcut, short_name, id, **kwargs):
        """
        getOpportunityActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_opportunity_activity_using_get_using_get(network_shortcut, short_name, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param int id: id (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_opportunity_activity_using_get_using_get_with_http_info(network_shortcut, short_name, id, **kwargs)
        else:
            (data) = self.get_opportunity_activity_using_get_using_get_with_http_info(network_shortcut, short_name, id, **kwargs)
            return data

    def get_opportunity_activity_using_get_using_get_with_http_info(self, network_shortcut, short_name, id, **kwargs):
        """
        getOpportunityActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_opportunity_activity_using_get_using_get_with_http_info(network_shortcut, short_name, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param int id: id (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_opportunity_activity_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_opportunity_activity_using_get_using_get`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `get_opportunity_activity_using_get_using_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_opportunity_activity_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/opportunity/{shortName}/task/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmTaskPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_opportunity_using_get_using_get(self, network_shortcut, short_name, **kwargs):
        """
        getOpportunity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_opportunity_using_get_using_get(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: CrmOpportunityPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_opportunity_using_get_using_get_with_http_info(network_shortcut, short_name, **kwargs)
        else:
            (data) = self.get_opportunity_using_get_using_get_with_http_info(network_shortcut, short_name, **kwargs)
            return data

    def get_opportunity_using_get_using_get_with_http_info(self, network_shortcut, short_name, **kwargs):
        """
        getOpportunity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_opportunity_using_get_using_get_with_http_info(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: CrmOpportunityPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_opportunity_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_opportunity_using_get_using_get`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `get_opportunity_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/opportunity/{shortName}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmOpportunityPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_traffic_customer_using_get_using_get(self, network_shortcut, customer_shortcut, **kwargs):
        """
        getTrafficCustomerUsingGET
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_traffic_customer_using_get_using_get(network_shortcut, customer_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str customer_shortcut: customerShortcut (required)
        :return: TraCustomerPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_traffic_customer_using_get_using_get_with_http_info(network_shortcut, customer_shortcut, **kwargs)
        else:
            (data) = self.get_traffic_customer_using_get_using_get_with_http_info(network_shortcut, customer_shortcut, **kwargs)
            return data

    def get_traffic_customer_using_get_using_get_with_http_info(self, network_shortcut, customer_shortcut, **kwargs):
        """
        getTrafficCustomerUsingGET
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_traffic_customer_using_get_using_get_with_http_info(network_shortcut, customer_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str customer_shortcut: customerShortcut (required)
        :return: TraCustomerPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'customer_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_traffic_customer_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_traffic_customer_using_get_using_get`")
        # verify the required parameter 'customer_shortcut' is set
        if ('customer_shortcut' not in params) or (params['customer_shortcut'] is None):
            raise ValueError("Missing the required parameter `customer_shortcut` when calling `get_traffic_customer_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/customer/{customerShortcut}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'customer_shortcut' in params:
            path_params['customerShortcut'] = params['customer_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraCustomerPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_traffic_template_using_get_using_get(self, network_shortcut, short_name, **kwargs):
        """
        getTrafficTemplate
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_traffic_template_using_get_using_get(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: SchTemplatePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_traffic_template_using_get_using_get_with_http_info(network_shortcut, short_name, **kwargs)
        else:
            (data) = self.get_traffic_template_using_get_using_get_with_http_info(network_shortcut, short_name, **kwargs)
            return data

    def get_traffic_template_using_get_using_get_with_http_info(self, network_shortcut, short_name, **kwargs):
        """
        getTrafficTemplate
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_traffic_template_using_get_using_get_with_http_info(network_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :return: SchTemplatePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_traffic_template_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_traffic_template_using_get_using_get`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `get_traffic_template_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/templates/{shortName}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SchTemplatePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def notify_about_unpaid_invoice_customer_using_get_using_post(self, network_shortcut, customer_shortcut, id, **kwargs):
        """
        notifyAboutUnpaidInvoiceCustomer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notify_about_unpaid_invoice_customer_using_get_using_post(network_shortcut, customer_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: cutomerId (required)
        :param str customer_shortcut: customerShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.notify_about_unpaid_invoice_customer_using_get_using_post_with_http_info(network_shortcut, customer_shortcut, id, **kwargs)
        else:
            (data) = self.notify_about_unpaid_invoice_customer_using_get_using_post_with_http_info(network_shortcut, customer_shortcut, id, **kwargs)
            return data

    def notify_about_unpaid_invoice_customer_using_get_using_post_with_http_info(self, network_shortcut, customer_shortcut, id, **kwargs):
        """
        notifyAboutUnpaidInvoiceCustomer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notify_about_unpaid_invoice_customer_using_get_using_post_with_http_info(network_shortcut, customer_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: cutomerId (required)
        :param str customer_shortcut: customerShortcut (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'customer_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notify_about_unpaid_invoice_customer_using_get_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `notify_about_unpaid_invoice_customer_using_get_using_post`")
        # verify the required parameter 'customer_shortcut' is set
        if ('customer_shortcut' not in params) or (params['customer_shortcut'] is None):
            raise ValueError("Missing the required parameter `customer_shortcut` when calling `notify_about_unpaid_invoice_customer_using_get_using_post`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `notify_about_unpaid_invoice_customer_using_get_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/customer/{customerShortcut}/invoice/{id}/notify'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'customer_shortcut' in params:
            path_params['customerShortcut'] = params['customer_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def notify_about_unpaid_invoice_using_get_using_post(self, network_shortcut, id, **kwargs):
        """
        notifyAboutUnpaidInvoice
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notify_about_unpaid_invoice_using_get_using_post(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: cutomerId (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.notify_about_unpaid_invoice_using_get_using_post_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.notify_about_unpaid_invoice_using_get_using_post_with_http_info(network_shortcut, id, **kwargs)
            return data

    def notify_about_unpaid_invoice_using_get_using_post_with_http_info(self, network_shortcut, id, **kwargs):
        """
        notifyAboutUnpaidInvoice
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notify_about_unpaid_invoice_using_get_using_post_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: cutomerId (required)
        :param int id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notify_about_unpaid_invoice_using_get_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `notify_about_unpaid_invoice_using_get_using_post`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `notify_about_unpaid_invoice_using_get_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/invoice/{id}/notify'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def notify_customer_about_unpaid_order_using_post_using_post(self, network_shortcut, id, **kwargs):
        """
        notifyCustomerAboutUnpaidOrder
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notify_customer_about_unpaid_order_using_post_using_post(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: TraOrderPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.notify_customer_about_unpaid_order_using_post_using_post_with_http_info(network_shortcut, id, **kwargs)
        else:
            (data) = self.notify_customer_about_unpaid_order_using_post_using_post_with_http_info(network_shortcut, id, **kwargs)
            return data

    def notify_customer_about_unpaid_order_using_post_using_post_with_http_info(self, network_shortcut, id, **kwargs):
        """
        notifyCustomerAboutUnpaidOrder
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notify_customer_about_unpaid_order_using_post_using_post_with_http_info(network_shortcut, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param int id: id (required)
        :return: TraOrderPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notify_customer_about_unpaid_order_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `notify_customer_about_unpaid_order_using_post_using_post`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `notify_customer_about_unpaid_order_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/order/{id}/notify'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraOrderPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def shuffle_commercial_using_get_using_get(self, network_shortcut, tra_shuffle_advertisment_pt, **kwargs):
        """
        updateAdvertisement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.shuffle_commercial_using_get_using_get(network_shortcut, tra_shuffle_advertisment_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param TraShuffleAdvertisementPT tra_shuffle_advertisment_pt: traShuffleAdvertismentPT (required)
        :return: TraAdvertisementPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.shuffle_commercial_using_get_using_get_with_http_info(network_shortcut, tra_shuffle_advertisment_pt, **kwargs)
        else:
            (data) = self.shuffle_commercial_using_get_using_get_with_http_info(network_shortcut, tra_shuffle_advertisment_pt, **kwargs)
            return data

    def shuffle_commercial_using_get_using_get_with_http_info(self, network_shortcut, tra_shuffle_advertisment_pt, **kwargs):
        """
        updateAdvertisement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.shuffle_commercial_using_get_using_get_with_http_info(network_shortcut, tra_shuffle_advertisment_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param TraShuffleAdvertisementPT tra_shuffle_advertisment_pt: traShuffleAdvertismentPT (required)
        :return: TraAdvertisementPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'tra_shuffle_advertisment_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shuffle_commercial_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `shuffle_commercial_using_get_using_get`")
        # verify the required parameter 'tra_shuffle_advertisment_pt' is set
        if ('tra_shuffle_advertisment_pt' not in params) or (params['tra_shuffle_advertisment_pt'] is None):
            raise ValueError("Missing the required parameter `tra_shuffle_advertisment_pt` when calling `shuffle_commercial_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/advertisement/shuffle'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tra_shuffle_advertisment_pt' in params:
            body_params = params['tra_shuffle_advertisment_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraAdvertisementPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_advertisement_using_put_using_put(self, network_shortcut, advertisement_dto, **kwargs):
        """
        updateAdvertisement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_advertisement_using_put_using_put(network_shortcut, advertisement_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param TraAdvertisementPT advertisement_dto: advertisementDTO (required)
        :return: TraAdvertisementPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_advertisement_using_put_using_put_with_http_info(network_shortcut, advertisement_dto, **kwargs)
        else:
            (data) = self.update_advertisement_using_put_using_put_with_http_info(network_shortcut, advertisement_dto, **kwargs)
            return data

    def update_advertisement_using_put_using_put_with_http_info(self, network_shortcut, advertisement_dto, **kwargs):
        """
        updateAdvertisement
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_advertisement_using_put_using_put_with_http_info(network_shortcut, advertisement_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param TraAdvertisementPT advertisement_dto: advertisementDTO (required)
        :return: TraAdvertisementPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'advertisement_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_advertisement_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_advertisement_using_put_using_put`")
        # verify the required parameter 'advertisement_dto' is set
        if ('advertisement_dto' not in params) or (params['advertisement_dto'] is None):
            raise ValueError("Missing the required parameter `advertisement_dto` when calling `update_advertisement_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/advertisement'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'advertisement_dto' in params:
            body_params = params['advertisement_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraAdvertisementPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_an_order_using_put_using_put(self, network_shortcut, an_order_dto, **kwargs):
        """
        updateAnOrder
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_an_order_using_put_using_put(network_shortcut, an_order_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param TraOrderPT an_order_dto: anOrderDTO (required)
        :return: TraOrderPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_an_order_using_put_using_put_with_http_info(network_shortcut, an_order_dto, **kwargs)
        else:
            (data) = self.update_an_order_using_put_using_put_with_http_info(network_shortcut, an_order_dto, **kwargs)
            return data

    def update_an_order_using_put_using_put_with_http_info(self, network_shortcut, an_order_dto, **kwargs):
        """
        updateAnOrder
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_an_order_using_put_using_put_with_http_info(network_shortcut, an_order_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param TraOrderPT an_order_dto: anOrderDTO (required)
        :return: TraOrderPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'an_order_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_an_order_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_an_order_using_put_using_put`")
        # verify the required parameter 'an_order_dto' is set
        if ('an_order_dto' not in params) or (params['an_order_dto'] is None):
            raise ValueError("Missing the required parameter `an_order_dto` when calling `update_an_order_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/order'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'an_order_dto' in params:
            body_params = params['an_order_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraOrderPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_campaign_using_put_using_put(self, network_shortcut, campaign_dto, **kwargs):
        """
        updateCampaign
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_campaign_using_put_using_put(network_shortcut, campaign_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param TraCampaignPT campaign_dto: campaignDTO (required)
        :return: TraCampaignPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_campaign_using_put_using_put_with_http_info(network_shortcut, campaign_dto, **kwargs)
        else:
            (data) = self.update_campaign_using_put_using_put_with_http_info(network_shortcut, campaign_dto, **kwargs)
            return data

    def update_campaign_using_put_using_put_with_http_info(self, network_shortcut, campaign_dto, **kwargs):
        """
        updateCampaign
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_campaign_using_put_using_put_with_http_info(network_shortcut, campaign_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param TraCampaignPT campaign_dto: campaignDTO (required)
        :return: TraCampaignPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'campaign_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_campaign_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_campaign_using_put_using_put`")
        # verify the required parameter 'campaign_dto' is set
        if ('campaign_dto' not in params) or (params['campaign_dto'] is None):
            raise ValueError("Missing the required parameter `campaign_dto` when calling `update_campaign_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/campaign'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'campaign_dto' in params:
            body_params = params['campaign_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraCampaignPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_contact_activity_using_put_using_put(self, network_shortcut, short_name, crm_activity_pt, **kwargs):
        """
        updateContactActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_contact_activity_using_put_using_put(network_shortcut, short_name, crm_activity_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param CrmTaskPT crm_activity_pt: crmActivityPT (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_contact_activity_using_put_using_put_with_http_info(network_shortcut, short_name, crm_activity_pt, **kwargs)
        else:
            (data) = self.update_contact_activity_using_put_using_put_with_http_info(network_shortcut, short_name, crm_activity_pt, **kwargs)
            return data

    def update_contact_activity_using_put_using_put_with_http_info(self, network_shortcut, short_name, crm_activity_pt, **kwargs):
        """
        updateContactActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_contact_activity_using_put_using_put_with_http_info(network_shortcut, short_name, crm_activity_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param CrmTaskPT crm_activity_pt: crmActivityPT (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name', 'crm_activity_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_contact_activity_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_contact_activity_using_put_using_put`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `update_contact_activity_using_put_using_put`")
        # verify the required parameter 'crm_activity_pt' is set
        if ('crm_activity_pt' not in params) or (params['crm_activity_pt'] is None):
            raise ValueError("Missing the required parameter `crm_activity_pt` when calling `update_contact_activity_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/contact/{shortName}/task'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'crm_activity_pt' in params:
            body_params = params['crm_activity_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmTaskPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_contact_using_put_using_put(self, network_shortcut, customery_pt, **kwargs):
        """
        updateContact
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_contact_using_put_using_put(network_shortcut, customery_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CrmContactPT customery_pt: customerPT (required)
        :return: CrmContactPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_contact_using_put_using_put_with_http_info(network_shortcut, customery_pt, **kwargs)
        else:
            (data) = self.update_contact_using_put_using_put_with_http_info(network_shortcut, customery_pt, **kwargs)
            return data

    def update_contact_using_put_using_put_with_http_info(self, network_shortcut, customery_pt, **kwargs):
        """
        updateContact
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_contact_using_put_using_put_with_http_info(network_shortcut, customery_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CrmContactPT customery_pt: customerPT (required)
        :return: CrmContactPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'customery_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_contact_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_contact_using_put_using_put`")
        # verify the required parameter 'customery_pt' is set
        if ('customery_pt' not in params) or (params['customery_pt'] is None):
            raise ValueError("Missing the required parameter `customery_pt` when calling `update_contact_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/contact'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'customery_pt' in params:
            body_params = params['customery_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmContactPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_customer_activity_using_put_using_put(self, network_shortcut, short_name, crm_activity_pt, **kwargs):
        """
        updateCustomerActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_customer_activity_using_put_using_put(network_shortcut, short_name, crm_activity_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param CrmTaskPT crm_activity_pt: crmActivityPT (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_customer_activity_using_put_using_put_with_http_info(network_shortcut, short_name, crm_activity_pt, **kwargs)
        else:
            (data) = self.update_customer_activity_using_put_using_put_with_http_info(network_shortcut, short_name, crm_activity_pt, **kwargs)
            return data

    def update_customer_activity_using_put_using_put_with_http_info(self, network_shortcut, short_name, crm_activity_pt, **kwargs):
        """
        updateCustomerActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_customer_activity_using_put_using_put_with_http_info(network_shortcut, short_name, crm_activity_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param CrmTaskPT crm_activity_pt: crmActivityPT (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name', 'crm_activity_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_customer_activity_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_customer_activity_using_put_using_put`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `update_customer_activity_using_put_using_put`")
        # verify the required parameter 'crm_activity_pt' is set
        if ('crm_activity_pt' not in params) or (params['crm_activity_pt'] is None):
            raise ValueError("Missing the required parameter `crm_activity_pt` when calling `update_customer_activity_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/customer/{shortName}/task'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'crm_activity_pt' in params:
            body_params = params['crm_activity_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmTaskPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_customer_using_put_using_put(self, network_shortcut, customery_pt, **kwargs):
        """
        updateCustomer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_customer_using_put_using_put(network_shortcut, customery_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CrmAccountPT customery_pt: customerPT (required)
        :return: CrmAccountPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_customer_using_put_using_put_with_http_info(network_shortcut, customery_pt, **kwargs)
        else:
            (data) = self.update_customer_using_put_using_put_with_http_info(network_shortcut, customery_pt, **kwargs)
            return data

    def update_customer_using_put_using_put_with_http_info(self, network_shortcut, customery_pt, **kwargs):
        """
        updateCustomer
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_customer_using_put_using_put_with_http_info(network_shortcut, customery_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CrmAccountPT customery_pt: customerPT (required)
        :return: CrmAccountPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'customery_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_customer_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_customer_using_put_using_put`")
        # verify the required parameter 'customery_pt' is set
        if ('customery_pt' not in params) or (params['customery_pt'] is None):
            raise ValueError("Missing the required parameter `customery_pt` when calling `update_customer_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/customer'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'customery_pt' in params:
            body_params = params['customery_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmAccountPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_invoice_using_put_using_put(self, network_shortcut, invoice_dto, **kwargs):
        """
        updateInvoice
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_invoice_using_put_using_put(network_shortcut, invoice_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param TraInvoicePT invoice_dto: invoiceDTO (required)
        :return: TraInvoicePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_invoice_using_put_using_put_with_http_info(network_shortcut, invoice_dto, **kwargs)
        else:
            (data) = self.update_invoice_using_put_using_put_with_http_info(network_shortcut, invoice_dto, **kwargs)
            return data

    def update_invoice_using_put_using_put_with_http_info(self, network_shortcut, invoice_dto, **kwargs):
        """
        updateInvoice
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_invoice_using_put_using_put_with_http_info(network_shortcut, invoice_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param TraInvoicePT invoice_dto: invoiceDTO (required)
        :return: TraInvoicePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'invoice_dto']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_invoice_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_invoice_using_put_using_put`")
        # verify the required parameter 'invoice_dto' is set
        if ('invoice_dto' not in params) or (params['invoice_dto'] is None):
            raise ValueError("Missing the required parameter `invoice_dto` when calling `update_invoice_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/invoice'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'invoice_dto' in params:
            body_params = params['invoice_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraInvoicePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_lead_activity_using_put_using_put(self, network_shortcut, short_name, crm_activity_pt, **kwargs):
        """
        updateLeadActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_lead_activity_using_put_using_put(network_shortcut, short_name, crm_activity_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param CrmTaskPT crm_activity_pt: crmActivityPT (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_lead_activity_using_put_using_put_with_http_info(network_shortcut, short_name, crm_activity_pt, **kwargs)
        else:
            (data) = self.update_lead_activity_using_put_using_put_with_http_info(network_shortcut, short_name, crm_activity_pt, **kwargs)
            return data

    def update_lead_activity_using_put_using_put_with_http_info(self, network_shortcut, short_name, crm_activity_pt, **kwargs):
        """
        updateLeadActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_lead_activity_using_put_using_put_with_http_info(network_shortcut, short_name, crm_activity_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param CrmTaskPT crm_activity_pt: crmActivityPT (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name', 'crm_activity_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_lead_activity_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_lead_activity_using_put_using_put`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `update_lead_activity_using_put_using_put`")
        # verify the required parameter 'crm_activity_pt' is set
        if ('crm_activity_pt' not in params) or (params['crm_activity_pt'] is None):
            raise ValueError("Missing the required parameter `crm_activity_pt` when calling `update_lead_activity_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/lead/{shortName}/task'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'crm_activity_pt' in params:
            body_params = params['crm_activity_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmTaskPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_lead_using_put_using_put(self, network_shortcut, crm_lead_pt, **kwargs):
        """
        updateLead
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_lead_using_put_using_put(network_shortcut, crm_lead_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CrmLeadPT crm_lead_pt: crmLeadPT (required)
        :return: CrmLeadPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_lead_using_put_using_put_with_http_info(network_shortcut, crm_lead_pt, **kwargs)
        else:
            (data) = self.update_lead_using_put_using_put_with_http_info(network_shortcut, crm_lead_pt, **kwargs)
            return data

    def update_lead_using_put_using_put_with_http_info(self, network_shortcut, crm_lead_pt, **kwargs):
        """
        updateLead
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_lead_using_put_using_put_with_http_info(network_shortcut, crm_lead_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CrmLeadPT crm_lead_pt: crmLeadPT (required)
        :return: CrmLeadPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'crm_lead_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_lead_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_lead_using_put_using_put`")
        # verify the required parameter 'crm_lead_pt' is set
        if ('crm_lead_pt' not in params) or (params['crm_lead_pt'] is None):
            raise ValueError("Missing the required parameter `crm_lead_pt` when calling `update_lead_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/lead'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'crm_lead_pt' in params:
            body_params = params['crm_lead_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmLeadPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_opportunity_activity_using_put_using_put(self, network_shortcut, short_name, crm_activity_pt, **kwargs):
        """
        updateOpportunityActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_opportunity_activity_using_put_using_put(network_shortcut, short_name, crm_activity_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param CrmTaskPT crm_activity_pt: crmActivityPT (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_opportunity_activity_using_put_using_put_with_http_info(network_shortcut, short_name, crm_activity_pt, **kwargs)
        else:
            (data) = self.update_opportunity_activity_using_put_using_put_with_http_info(network_shortcut, short_name, crm_activity_pt, **kwargs)
            return data

    def update_opportunity_activity_using_put_using_put_with_http_info(self, network_shortcut, short_name, crm_activity_pt, **kwargs):
        """
        updateOpportunityActivity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_opportunity_activity_using_put_using_put_with_http_info(network_shortcut, short_name, crm_activity_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str short_name: shortName (required)
        :param CrmTaskPT crm_activity_pt: crmActivityPT (required)
        :return: CrmTaskPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'short_name', 'crm_activity_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_opportunity_activity_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_opportunity_activity_using_put_using_put`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `update_opportunity_activity_using_put_using_put`")
        # verify the required parameter 'crm_activity_pt' is set
        if ('crm_activity_pt' not in params) or (params['crm_activity_pt'] is None):
            raise ValueError("Missing the required parameter `crm_activity_pt` when calling `update_opportunity_activity_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/opportunity/{shortName}/task'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'crm_activity_pt' in params:
            body_params = params['crm_activity_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmTaskPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_opportunity_using_put_using_put(self, network_shortcut, crm_opportunity_pt, **kwargs):
        """
        updateOpportunity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_opportunity_using_put_using_put(network_shortcut, crm_opportunity_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CrmOpportunityPT crm_opportunity_pt: crmOpportunityPT (required)
        :return: CrmOpportunityPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_opportunity_using_put_using_put_with_http_info(network_shortcut, crm_opportunity_pt, **kwargs)
        else:
            (data) = self.update_opportunity_using_put_using_put_with_http_info(network_shortcut, crm_opportunity_pt, **kwargs)
            return data

    def update_opportunity_using_put_using_put_with_http_info(self, network_shortcut, crm_opportunity_pt, **kwargs):
        """
        updateOpportunity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_opportunity_using_put_using_put_with_http_info(network_shortcut, crm_opportunity_pt, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param CrmOpportunityPT crm_opportunity_pt: crmOpportunityPT (required)
        :return: CrmOpportunityPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'crm_opportunity_pt']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_opportunity_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_opportunity_using_put_using_put`")
        # verify the required parameter 'crm_opportunity_pt' is set
        if ('crm_opportunity_pt' not in params) or (params['crm_opportunity_pt'] is None):
            raise ValueError("Missing the required parameter `crm_opportunity_pt` when calling `update_opportunity_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/crm/opportunity'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'crm_opportunity_pt' in params:
            body_params = params['crm_opportunity_pt']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrmOpportunityPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_traffic_customer_using_put_using_put(self, network_shortcut, customer, **kwargs):
        """
        updateTrafficCustomerUsingPUT
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_traffic_customer_using_put_using_put(network_shortcut, customer, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param TraCustomerPT customer: CustomerVM (required)
        :return: TraCustomerPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_traffic_customer_using_put_using_put_with_http_info(network_shortcut, customer, **kwargs)
        else:
            (data) = self.update_traffic_customer_using_put_using_put_with_http_info(network_shortcut, customer, **kwargs)
            return data

    def update_traffic_customer_using_put_using_put_with_http_info(self, network_shortcut, customer, **kwargs):
        """
        updateTrafficCustomerUsingPUT
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_traffic_customer_using_put_using_put_with_http_info(network_shortcut, customer, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param TraCustomerPT customer: CustomerVM (required)
        :return: TraCustomerPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'customer']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_traffic_customer_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_traffic_customer_using_put_using_put`")
        # verify the required parameter 'customer' is set
        if ('customer' not in params) or (params['customer'] is None):
            raise ValueError("Missing the required parameter `customer` when calling `update_traffic_customer_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/customer/'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'customer' in params:
            body_params = params['customer']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TraCustomerPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_traffic_templates_using_put_using_put(self, network_shortcut, schdeuler_template, **kwargs):
        """
        updateTrafficTemplates
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_traffic_templates_using_put_using_put(network_shortcut, schdeuler_template, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param SchTemplatePT schdeuler_template: schdeulerTemplate (required)
        :return: SchTemplatePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_traffic_templates_using_put_using_put_with_http_info(network_shortcut, schdeuler_template, **kwargs)
        else:
            (data) = self.update_traffic_templates_using_put_using_put_with_http_info(network_shortcut, schdeuler_template, **kwargs)
            return data

    def update_traffic_templates_using_put_using_put_with_http_info(self, network_shortcut, schdeuler_template, **kwargs):
        """
        updateTrafficTemplates
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_traffic_templates_using_put_using_put_with_http_info(network_shortcut, schdeuler_template, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param SchTemplatePT schdeuler_template: schdeulerTemplate (required)
        :return: SchTemplatePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'schdeuler_template']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_traffic_templates_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_traffic_templates_using_put_using_put`")
        # verify the required parameter 'schdeuler_template' is set
        if ('schdeuler_template' not in params) or (params['schdeuler_template'] is None):
            raise ValueError("Missing the required parameter `schdeuler_template` when calling `update_traffic_templates_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/traffic/templates'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'schdeuler_template' in params:
            body_params = params['schdeuler_template']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SchTemplatePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
