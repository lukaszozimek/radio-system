# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class SCHEDULERApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def creat_scheduler_playlist_for_channel_using_post_using_post(self, network_shortcut, channel_shortcut, playlist, **kwargs):
        """
        createSchedulerForChannelPlaylist
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.creat_scheduler_playlist_for_channel_using_post_using_post(network_shortcut, channel_shortcut, playlist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str channel_shortcut: channelShortcut (required)
        :param SchPlaylistPT playlist: schdeulerTemplate (required)
        :return: SchPlaylistPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.creat_scheduler_playlist_for_channel_using_post_using_post_with_http_info(network_shortcut, channel_shortcut, playlist, **kwargs)
        else:
            (data) = self.creat_scheduler_playlist_for_channel_using_post_using_post_with_http_info(network_shortcut, channel_shortcut, playlist, **kwargs)
            return data

    def creat_scheduler_playlist_for_channel_using_post_using_post_with_http_info(self, network_shortcut, channel_shortcut, playlist, **kwargs):
        """
        createSchedulerForChannelPlaylist
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.creat_scheduler_playlist_for_channel_using_post_using_post_with_http_info(network_shortcut, channel_shortcut, playlist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str channel_shortcut: channelShortcut (required)
        :param SchPlaylistPT playlist: schdeulerTemplate (required)
        :return: SchPlaylistPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'channel_shortcut', 'playlist']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method creat_scheduler_playlist_for_channel_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `creat_scheduler_playlist_for_channel_using_post_using_post`")
        # verify the required parameter 'channel_shortcut' is set
        if ('channel_shortcut' not in params) or (params['channel_shortcut'] is None):
            raise ValueError("Missing the required parameter `channel_shortcut` when calling `creat_scheduler_playlist_for_channel_using_post_using_post`")
        # verify the required parameter 'playlist' is set
        if ('playlist' not in params) or (params['playlist'] is None):
            raise ValueError("Missing the required parameter `playlist` when calling `creat_scheduler_playlist_for_channel_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/channel/{channelShortcut}/scheduler/playlist'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'channel_shortcut' in params:
            path_params['channelShortcut'] = params['channel_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'playlist' in params:
            body_params = params['playlist']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SchPlaylistPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def creat_scheduler_templates_for_channel_using_post_using_post(self, network_shortcut, channel_shortcut, template, **kwargs):
        """
        createSchedulerTemplatesForChannel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.creat_scheduler_templates_for_channel_using_post_using_post(network_shortcut, channel_shortcut, template, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str channel_shortcut: channelShortcut (required)
        :param SchTemplatePT template: schdeulerTemplate (required)
        :return: SchTemplatePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.creat_scheduler_templates_for_channel_using_post_using_post_with_http_info(network_shortcut, channel_shortcut, template, **kwargs)
        else:
            (data) = self.creat_scheduler_templates_for_channel_using_post_using_post_with_http_info(network_shortcut, channel_shortcut, template, **kwargs)
            return data

    def creat_scheduler_templates_for_channel_using_post_using_post_with_http_info(self, network_shortcut, channel_shortcut, template, **kwargs):
        """
        createSchedulerTemplatesForChannel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.creat_scheduler_templates_for_channel_using_post_using_post_with_http_info(network_shortcut, channel_shortcut, template, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str channel_shortcut: channelShortcut (required)
        :param SchTemplatePT template: schdeulerTemplate (required)
        :return: SchTemplatePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'channel_shortcut', 'template']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method creat_scheduler_templates_for_channel_using_post_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `creat_scheduler_templates_for_channel_using_post_using_post`")
        # verify the required parameter 'channel_shortcut' is set
        if ('channel_shortcut' not in params) or (params['channel_shortcut'] is None):
            raise ValueError("Missing the required parameter `channel_shortcut` when calling `creat_scheduler_templates_for_channel_using_post_using_post`")
        # verify the required parameter 'template' is set
        if ('template' not in params) or (params['template'] is None):
            raise ValueError("Missing the required parameter `template` when calling `creat_scheduler_templates_for_channel_using_post_using_post`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/channel/{channelShortcut}/scheduler/templates'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'channel_shortcut' in params:
            path_params['channelShortcut'] = params['channel_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'template' in params:
            body_params = params['template']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SchTemplatePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_scheduler_playlist_for_channel_using_delete_using_delete(self, network_shortcut, channel_shortcut, date, **kwargs):
        """
        deleteSchedulerPlaylistForChannel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_scheduler_playlist_for_channel_using_delete_using_delete(network_shortcut, channel_shortcut, date, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str channel_shortcut: channelShortcut (required)
        :param str date: date (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_scheduler_playlist_for_channel_using_delete_using_delete_with_http_info(network_shortcut, channel_shortcut, date, **kwargs)
        else:
            (data) = self.delete_scheduler_playlist_for_channel_using_delete_using_delete_with_http_info(network_shortcut, channel_shortcut, date, **kwargs)
            return data

    def delete_scheduler_playlist_for_channel_using_delete_using_delete_with_http_info(self, network_shortcut, channel_shortcut, date, **kwargs):
        """
        deleteSchedulerPlaylistForChannel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_scheduler_playlist_for_channel_using_delete_using_delete_with_http_info(network_shortcut, channel_shortcut, date, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str channel_shortcut: channelShortcut (required)
        :param str date: date (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'channel_shortcut', 'date']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_scheduler_playlist_for_channel_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_scheduler_playlist_for_channel_using_delete_using_delete`")
        # verify the required parameter 'channel_shortcut' is set
        if ('channel_shortcut' not in params) or (params['channel_shortcut'] is None):
            raise ValueError("Missing the required parameter `channel_shortcut` when calling `delete_scheduler_playlist_for_channel_using_delete_using_delete`")
        # verify the required parameter 'date' is set
        if ('date' not in params) or (params['date'] is None):
            raise ValueError("Missing the required parameter `date` when calling `delete_scheduler_playlist_for_channel_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/channel/{channelShortcut}/scheduler/playlist/{date}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'channel_shortcut' in params:
            path_params['channelShortcut'] = params['channel_shortcut']
        if 'date' in params:
            path_params['date'] = params['date']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_scheduler_template_for_channel_using_delete_using_delete(self, network_shortcut, channel_shortcut, short_name, **kwargs):
        """
        deleteSchedulerTemplateForChannel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_scheduler_template_for_channel_using_delete_using_delete(network_shortcut, channel_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str channel_shortcut: channelShortcut (required)
        :param str short_name: shortName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_scheduler_template_for_channel_using_delete_using_delete_with_http_info(network_shortcut, channel_shortcut, short_name, **kwargs)
        else:
            (data) = self.delete_scheduler_template_for_channel_using_delete_using_delete_with_http_info(network_shortcut, channel_shortcut, short_name, **kwargs)
            return data

    def delete_scheduler_template_for_channel_using_delete_using_delete_with_http_info(self, network_shortcut, channel_shortcut, short_name, **kwargs):
        """
        deleteSchedulerTemplateForChannel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_scheduler_template_for_channel_using_delete_using_delete_with_http_info(network_shortcut, channel_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str channel_shortcut: channelShortcut (required)
        :param str short_name: shortName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'channel_shortcut', 'short_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_scheduler_template_for_channel_using_delete_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `delete_scheduler_template_for_channel_using_delete_using_delete`")
        # verify the required parameter 'channel_shortcut' is set
        if ('channel_shortcut' not in params) or (params['channel_shortcut'] is None):
            raise ValueError("Missing the required parameter `channel_shortcut` when calling `delete_scheduler_template_for_channel_using_delete_using_delete`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `delete_scheduler_template_for_channel_using_delete_using_delete`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/channel/{channelShortcut}/scheduler/templates/{shortName}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'channel_shortcut' in params:
            path_params['channelShortcut'] = params['channel_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_scheduler_playlist_for_channel_using_get_using_get(self, network_shortcut, channel_shortcut, **kwargs):
        """
        getAllSchedulerPlaylistForChannel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_scheduler_playlist_for_channel_using_get_using_get(network_shortcut, channel_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str channel_shortcut: channelShortcut (required)
        :return: SchPlaylistPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_scheduler_playlist_for_channel_using_get_using_get_with_http_info(network_shortcut, channel_shortcut, **kwargs)
        else:
            (data) = self.get_all_scheduler_playlist_for_channel_using_get_using_get_with_http_info(network_shortcut, channel_shortcut, **kwargs)
            return data

    def get_all_scheduler_playlist_for_channel_using_get_using_get_with_http_info(self, network_shortcut, channel_shortcut, **kwargs):
        """
        getAllSchedulerPlaylistForChannel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_scheduler_playlist_for_channel_using_get_using_get_with_http_info(network_shortcut, channel_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str channel_shortcut: channelShortcut (required)
        :return: SchPlaylistPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'channel_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_scheduler_playlist_for_channel_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_scheduler_playlist_for_channel_using_get_using_get`")
        # verify the required parameter 'channel_shortcut' is set
        if ('channel_shortcut' not in params) or (params['channel_shortcut'] is None):
            raise ValueError("Missing the required parameter `channel_shortcut` when calling `get_all_scheduler_playlist_for_channel_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/channel/{channelShortcut}/scheduler/playlist'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'channel_shortcut' in params:
            path_params['channelShortcut'] = params['channel_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SchPlaylistPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_scheduler_playlist_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllSchedulerPlaylist
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_scheduler_playlist_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: SchPlaylistPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_scheduler_playlist_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_scheduler_playlist_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_scheduler_playlist_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllSchedulerPlaylist
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_scheduler_playlist_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: SchPlaylistPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_scheduler_playlist_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_scheduler_playlist_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/scheduler/playlist'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SchPlaylistPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_scheduler_templates_for_channel_using_get_using_get(self, network_shortcut, channel_shortcut, **kwargs):
        """
        getAllSchedulerTemplatesForChannel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_scheduler_templates_for_channel_using_get_using_get(network_shortcut, channel_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str channel_shortcut: channelShortcut (required)
        :return: SchTemplatePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_scheduler_templates_for_channel_using_get_using_get_with_http_info(network_shortcut, channel_shortcut, **kwargs)
        else:
            (data) = self.get_all_scheduler_templates_for_channel_using_get_using_get_with_http_info(network_shortcut, channel_shortcut, **kwargs)
            return data

    def get_all_scheduler_templates_for_channel_using_get_using_get_with_http_info(self, network_shortcut, channel_shortcut, **kwargs):
        """
        getAllSchedulerTemplatesForChannel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_scheduler_templates_for_channel_using_get_using_get_with_http_info(network_shortcut, channel_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str channel_shortcut: channelShortcut (required)
        :return: SchTemplatePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'channel_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_scheduler_templates_for_channel_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_scheduler_templates_for_channel_using_get_using_get`")
        # verify the required parameter 'channel_shortcut' is set
        if ('channel_shortcut' not in params) or (params['channel_shortcut'] is None):
            raise ValueError("Missing the required parameter `channel_shortcut` when calling `get_all_scheduler_templates_for_channel_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/channel/{channelShortcut}/scheduler/templates'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'channel_shortcut' in params:
            path_params['channelShortcut'] = params['channel_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SchTemplatePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_scheduler_templates_using_get_using_get(self, network_shortcut, **kwargs):
        """
        getAllSchedulerTemplates
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_scheduler_templates_using_get_using_get(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: SchTemplatePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_scheduler_templates_using_get_using_get_with_http_info(network_shortcut, **kwargs)
        else:
            (data) = self.get_all_scheduler_templates_using_get_using_get_with_http_info(network_shortcut, **kwargs)
            return data

    def get_all_scheduler_templates_using_get_using_get_with_http_info(self, network_shortcut, **kwargs):
        """
        getAllSchedulerTemplates
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_scheduler_templates_using_get_using_get_with_http_info(network_shortcut, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :return: SchTemplatePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_scheduler_templates_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_all_scheduler_templates_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/scheduler/templates'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SchTemplatePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_scheduler_playlist_for_channel_using_get_using_get(self, network_shortcut, channel_shortcut, date, **kwargs):
        """
        getSchedulerPlaylistForChannel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_scheduler_playlist_for_channel_using_get_using_get(network_shortcut, channel_shortcut, date, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str channel_shortcut: channelShortcut (required)
        :param str date: date (required)
        :param bool random: random
        :return: SchPlaylistPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_scheduler_playlist_for_channel_using_get_using_get_with_http_info(network_shortcut, channel_shortcut, date, **kwargs)
        else:
            (data) = self.get_scheduler_playlist_for_channel_using_get_using_get_with_http_info(network_shortcut, channel_shortcut, date, **kwargs)
            return data

    def get_scheduler_playlist_for_channel_using_get_using_get_with_http_info(self, network_shortcut, channel_shortcut, date, **kwargs):
        """
        getSchedulerPlaylistForChannel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_scheduler_playlist_for_channel_using_get_using_get_with_http_info(network_shortcut, channel_shortcut, date, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str channel_shortcut: channelShortcut (required)
        :param str date: date (required)
        :param bool random: random
        :return: SchPlaylistPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'channel_shortcut', 'date', 'random']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scheduler_playlist_for_channel_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_scheduler_playlist_for_channel_using_get_using_get`")
        # verify the required parameter 'channel_shortcut' is set
        if ('channel_shortcut' not in params) or (params['channel_shortcut'] is None):
            raise ValueError("Missing the required parameter `channel_shortcut` when calling `get_scheduler_playlist_for_channel_using_get_using_get`")
        # verify the required parameter 'date' is set
        if ('date' not in params) or (params['date'] is None):
            raise ValueError("Missing the required parameter `date` when calling `get_scheduler_playlist_for_channel_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/channel/{channelShortcut}/scheduler/playlist/{date}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'channel_shortcut' in params:
            path_params['channelShortcut'] = params['channel_shortcut']
        if 'date' in params:
            path_params['date'] = params['date']

        query_params = {}
        if 'random' in params:
            query_params['random'] = params['random']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SchPlaylistPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_scheduler_template_for_channel_using_get_using_get(self, network_shortcut, channel_shortcut, short_name, **kwargs):
        """
        getSchedulerTemplateForChannel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_scheduler_template_for_channel_using_get_using_get(network_shortcut, channel_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str channel_shortcut: channelShortcut (required)
        :param str short_name: shortName (required)
        :param bool random: random
        :return: SchTemplatePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_scheduler_template_for_channel_using_get_using_get_with_http_info(network_shortcut, channel_shortcut, short_name, **kwargs)
        else:
            (data) = self.get_scheduler_template_for_channel_using_get_using_get_with_http_info(network_shortcut, channel_shortcut, short_name, **kwargs)
            return data

    def get_scheduler_template_for_channel_using_get_using_get_with_http_info(self, network_shortcut, channel_shortcut, short_name, **kwargs):
        """
        getSchedulerTemplateForChannel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_scheduler_template_for_channel_using_get_using_get_with_http_info(network_shortcut, channel_shortcut, short_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str channel_shortcut: channelShortcut (required)
        :param str short_name: shortName (required)
        :param bool random: random
        :return: SchTemplatePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'channel_shortcut', 'short_name', 'random']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scheduler_template_for_channel_using_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `get_scheduler_template_for_channel_using_get_using_get`")
        # verify the required parameter 'channel_shortcut' is set
        if ('channel_shortcut' not in params) or (params['channel_shortcut'] is None):
            raise ValueError("Missing the required parameter `channel_shortcut` when calling `get_scheduler_template_for_channel_using_get_using_get`")
        # verify the required parameter 'short_name' is set
        if ('short_name' not in params) or (params['short_name'] is None):
            raise ValueError("Missing the required parameter `short_name` when calling `get_scheduler_template_for_channel_using_get_using_get`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/channel/{channelShortcut}/scheduler/templates/{shortName}'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'channel_shortcut' in params:
            path_params['channelShortcut'] = params['channel_shortcut']
        if 'short_name' in params:
            path_params['shortName'] = params['short_name']

        query_params = {}
        if 'random' in params:
            query_params['random'] = params['random']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SchTemplatePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_scheduler_playlis_for_channelt_using_put_using_put(self, network_shortcut, channel_shortcut, playlist, **kwargs):
        """
        updateSchedulerPlaylistForChannel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_scheduler_playlis_for_channelt_using_put_using_put(network_shortcut, channel_shortcut, playlist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str channel_shortcut: channelShortcut (required)
        :param SchPlaylistPT playlist: schdeulerTemplate (required)
        :return: SchPlaylistPT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_scheduler_playlis_for_channelt_using_put_using_put_with_http_info(network_shortcut, channel_shortcut, playlist, **kwargs)
        else:
            (data) = self.update_scheduler_playlis_for_channelt_using_put_using_put_with_http_info(network_shortcut, channel_shortcut, playlist, **kwargs)
            return data

    def update_scheduler_playlis_for_channelt_using_put_using_put_with_http_info(self, network_shortcut, channel_shortcut, playlist, **kwargs):
        """
        updateSchedulerPlaylistForChannel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_scheduler_playlis_for_channelt_using_put_using_put_with_http_info(network_shortcut, channel_shortcut, playlist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str channel_shortcut: channelShortcut (required)
        :param SchPlaylistPT playlist: schdeulerTemplate (required)
        :return: SchPlaylistPT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'channel_shortcut', 'playlist']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_scheduler_playlis_for_channelt_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_scheduler_playlis_for_channelt_using_put_using_put`")
        # verify the required parameter 'channel_shortcut' is set
        if ('channel_shortcut' not in params) or (params['channel_shortcut'] is None):
            raise ValueError("Missing the required parameter `channel_shortcut` when calling `update_scheduler_playlis_for_channelt_using_put_using_put`")
        # verify the required parameter 'playlist' is set
        if ('playlist' not in params) or (params['playlist'] is None):
            raise ValueError("Missing the required parameter `playlist` when calling `update_scheduler_playlis_for_channelt_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/channel/{channelShortcut}/scheduler/playlist'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'channel_shortcut' in params:
            path_params['channelShortcut'] = params['channel_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'playlist' in params:
            body_params = params['playlist']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SchPlaylistPT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_scheduler_templates_for_channel_using_put_using_put(self, network_shortcut, channel_shortcut, template, **kwargs):
        """
        updateSchedulerTemplatesForChannel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_scheduler_templates_for_channel_using_put_using_put(network_shortcut, channel_shortcut, template, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str channel_shortcut: channelShortcut (required)
        :param SchTemplatePT template: schdeulerTemplate (required)
        :return: SchTemplatePT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_scheduler_templates_for_channel_using_put_using_put_with_http_info(network_shortcut, channel_shortcut, template, **kwargs)
        else:
            (data) = self.update_scheduler_templates_for_channel_using_put_using_put_with_http_info(network_shortcut, channel_shortcut, template, **kwargs)
            return data

    def update_scheduler_templates_for_channel_using_put_using_put_with_http_info(self, network_shortcut, channel_shortcut, template, **kwargs):
        """
        updateSchedulerTemplatesForChannel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_scheduler_templates_for_channel_using_put_using_put_with_http_info(network_shortcut, channel_shortcut, template, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str network_shortcut: networkShortcut (required)
        :param str channel_shortcut: channelShortcut (required)
        :param SchTemplatePT template: schdeulerTemplate (required)
        :return: SchTemplatePT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_shortcut', 'channel_shortcut', 'template']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_scheduler_templates_for_channel_using_put_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_shortcut' is set
        if ('network_shortcut' not in params) or (params['network_shortcut'] is None):
            raise ValueError("Missing the required parameter `network_shortcut` when calling `update_scheduler_templates_for_channel_using_put_using_put`")
        # verify the required parameter 'channel_shortcut' is set
        if ('channel_shortcut' not in params) or (params['channel_shortcut'] is None):
            raise ValueError("Missing the required parameter `channel_shortcut` when calling `update_scheduler_templates_for_channel_using_put_using_put`")
        # verify the required parameter 'template' is set
        if ('template' not in params) or (params['template'] is None):
            raise ValueError("Missing the required parameter `template` when calling `update_scheduler_templates_for_channel_using_put_using_put`")


        collection_formats = {}

        resource_path = '/api/network/{networkShortcut}/channel/{channelShortcut}/scheduler/templates'.replace('{format}', 'json')
        path_params = {}
        if 'network_shortcut' in params:
            path_params['networkShortcut'] = params['network_shortcut']
        if 'channel_shortcut' in params:
            path_params['channelShortcut'] = params['channel_shortcut']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'template' in params:
            body_params = params['template']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SchTemplatePT',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
