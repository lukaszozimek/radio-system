# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LoginVM(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, password=None, remember_me=None, username=None):
        """
        LoginVM - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'password': 'str',
            'remember_me': 'bool',
            'username': 'str'
        }

        self.attribute_map = {
            'password': 'password',
            'remember_me': 'rememberMe',
            'username': 'username'
        }

        self._password = password
        self._remember_me = remember_me
        self._username = username

    @property
    def password(self):
        """
        Gets the password of this LoginVM.

        :return: The password of this LoginVM.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this LoginVM.

        :param password: The password of this LoginVM.
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")
        if password is not None and len(password) > 100:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `100`")
        if password is not None and len(password) < 4:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `4`")

        self._password = password

    @property
    def remember_me(self):
        """
        Gets the remember_me of this LoginVM.

        :return: The remember_me of this LoginVM.
        :rtype: bool
        """
        return self._remember_me

    @remember_me.setter
    def remember_me(self, remember_me):
        """
        Sets the remember_me of this LoginVM.

        :param remember_me: The remember_me of this LoginVM.
        :type: bool
        """

        self._remember_me = remember_me

    @property
    def username(self):
        """
        Gets the username of this LoginVM.

        :return: The username of this LoginVM.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this LoginVM.

        :param username: The username of this LoginVM.
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")
        if username is not None and len(username) > 50:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `50`")
        if username is not None and len(username) < 1:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")
        if username is not None and not re.search('^[_\'.@A-Za-z0-9-]*$', username):
            raise ValueError("Invalid value for `username`, must be a follow pattern or equal to `/^[_'.@A-Za-z0-9-]*$/`")

        self._username = username

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LoginVM):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
