# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TraOrderPT(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, calculated_prize=None, campaign=None, customer=None, end_date=None, id=None, name=None, price=None, start_date=None, status=None, tra_invoice=None, tra_invoice_pt=None):
        """
        TraOrderPT - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'calculated_prize': 'int',
            'campaign': 'TraCampaignPT',
            'customer': 'TraCustomerPT',
            'end_date': 'date',
            'id': 'int',
            'name': 'str',
            'price': 'TraPrice',
            'start_date': 'date',
            'status': 'TraOrderStatus',
            'tra_invoice': 'TraInvoicePT',
            'tra_invoice_pt': 'TraInvoicePT'
        }

        self.attribute_map = {
            'calculated_prize': 'calculatedPrize',
            'campaign': 'campaign',
            'customer': 'customer',
            'end_date': 'endDate',
            'id': 'id',
            'name': 'name',
            'price': 'price',
            'start_date': 'startDate',
            'status': 'status',
            'tra_invoice': 'traInvoice',
            'tra_invoice_pt': 'traInvoicePT'
        }

        self._calculated_prize = calculated_prize
        self._campaign = campaign
        self._customer = customer
        self._end_date = end_date
        self._id = id
        self._name = name
        self._price = price
        self._start_date = start_date
        self._status = status
        self._tra_invoice = tra_invoice
        self._tra_invoice_pt = tra_invoice_pt

    @property
    def calculated_prize(self):
        """
        Gets the calculated_prize of this TraOrderPT.

        :return: The calculated_prize of this TraOrderPT.
        :rtype: int
        """
        return self._calculated_prize

    @calculated_prize.setter
    def calculated_prize(self, calculated_prize):
        """
        Sets the calculated_prize of this TraOrderPT.

        :param calculated_prize: The calculated_prize of this TraOrderPT.
        :type: int
        """

        self._calculated_prize = calculated_prize

    @property
    def campaign(self):
        """
        Gets the campaign of this TraOrderPT.

        :return: The campaign of this TraOrderPT.
        :rtype: TraCampaignPT
        """
        return self._campaign

    @campaign.setter
    def campaign(self, campaign):
        """
        Sets the campaign of this TraOrderPT.

        :param campaign: The campaign of this TraOrderPT.
        :type: TraCampaignPT
        """

        self._campaign = campaign

    @property
    def customer(self):
        """
        Gets the customer of this TraOrderPT.

        :return: The customer of this TraOrderPT.
        :rtype: TraCustomerPT
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """
        Sets the customer of this TraOrderPT.

        :param customer: The customer of this TraOrderPT.
        :type: TraCustomerPT
        """

        self._customer = customer

    @property
    def end_date(self):
        """
        Gets the end_date of this TraOrderPT.

        :return: The end_date of this TraOrderPT.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """
        Sets the end_date of this TraOrderPT.

        :param end_date: The end_date of this TraOrderPT.
        :type: date
        """

        self._end_date = end_date

    @property
    def id(self):
        """
        Gets the id of this TraOrderPT.

        :return: The id of this TraOrderPT.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TraOrderPT.

        :param id: The id of this TraOrderPT.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this TraOrderPT.

        :return: The name of this TraOrderPT.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this TraOrderPT.

        :param name: The name of this TraOrderPT.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def price(self):
        """
        Gets the price of this TraOrderPT.

        :return: The price of this TraOrderPT.
        :rtype: TraPrice
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this TraOrderPT.

        :param price: The price of this TraOrderPT.
        :type: TraPrice
        """

        self._price = price

    @property
    def start_date(self):
        """
        Gets the start_date of this TraOrderPT.

        :return: The start_date of this TraOrderPT.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """
        Sets the start_date of this TraOrderPT.

        :param start_date: The start_date of this TraOrderPT.
        :type: date
        """

        self._start_date = start_date

    @property
    def status(self):
        """
        Gets the status of this TraOrderPT.

        :return: The status of this TraOrderPT.
        :rtype: TraOrderStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this TraOrderPT.

        :param status: The status of this TraOrderPT.
        :type: TraOrderStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def tra_invoice(self):
        """
        Gets the tra_invoice of this TraOrderPT.

        :return: The tra_invoice of this TraOrderPT.
        :rtype: TraInvoicePT
        """
        return self._tra_invoice

    @tra_invoice.setter
    def tra_invoice(self, tra_invoice):
        """
        Sets the tra_invoice of this TraOrderPT.

        :param tra_invoice: The tra_invoice of this TraOrderPT.
        :type: TraInvoicePT
        """
        if tra_invoice is None:
            raise ValueError("Invalid value for `tra_invoice`, must not be `None`")

        self._tra_invoice = tra_invoice

    @property
    def tra_invoice_pt(self):
        """
        Gets the tra_invoice_pt of this TraOrderPT.

        :return: The tra_invoice_pt of this TraOrderPT.
        :rtype: TraInvoicePT
        """
        return self._tra_invoice_pt

    @tra_invoice_pt.setter
    def tra_invoice_pt(self, tra_invoice_pt):
        """
        Sets the tra_invoice_pt of this TraOrderPT.

        :param tra_invoice_pt: The tra_invoice_pt of this TraOrderPT.
        :type: TraInvoicePT
        """

        self._tra_invoice_pt = tra_invoice_pt

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TraOrderPT):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
