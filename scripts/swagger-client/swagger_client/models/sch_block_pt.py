# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SchBlockPT(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, blocks=None, dim_day=None, dim_hour=None, dim_minute=None, dim_month=None, dim_second=None, dim_year=None, emissions=None, end_time=None, id=None, length=None, name=None, parent_block_id=None, playlist_id=None, relative_delay=None, scheduled_end_time=None, scheduled_length=None, scheduled_start_time=None, seq=None, start_time=None, start_type=None, template_id=None, type=None):
        """
        SchBlockPT - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'blocks': 'list[SchBlockPT]',
            'dim_day': 'int',
            'dim_hour': 'int',
            'dim_minute': 'int',
            'dim_month': 'int',
            'dim_second': 'int',
            'dim_year': 'int',
            'emissions': 'list[SchEmissionPT]',
            'end_time': 'datetime',
            'id': 'int',
            'length': 'int',
            'name': 'str',
            'parent_block_id': 'int',
            'playlist_id': 'int',
            'relative_delay': 'int',
            'scheduled_end_time': 'datetime',
            'scheduled_length': 'int',
            'scheduled_start_time': 'datetime',
            'seq': 'int',
            'start_time': 'datetime',
            'start_type': 'str',
            'template_id': 'int',
            'type': 'str'
        }

        self.attribute_map = {
            'blocks': 'blocks',
            'dim_day': 'dimDay',
            'dim_hour': 'dimHour',
            'dim_minute': 'dimMinute',
            'dim_month': 'dimMonth',
            'dim_second': 'dimSecond',
            'dim_year': 'dimYear',
            'emissions': 'emissions',
            'end_time': 'endTime',
            'id': 'id',
            'length': 'length',
            'name': 'name',
            'parent_block_id': 'parentBlockId',
            'playlist_id': 'playlistId',
            'relative_delay': 'relativeDelay',
            'scheduled_end_time': 'scheduledEndTime',
            'scheduled_length': 'scheduledLength',
            'scheduled_start_time': 'scheduledStartTime',
            'seq': 'seq',
            'start_time': 'startTime',
            'start_type': 'startType',
            'template_id': 'templateId',
            'type': 'type'
        }

        self._blocks = blocks
        self._dim_day = dim_day
        self._dim_hour = dim_hour
        self._dim_minute = dim_minute
        self._dim_month = dim_month
        self._dim_second = dim_second
        self._dim_year = dim_year
        self._emissions = emissions
        self._end_time = end_time
        self._id = id
        self._length = length
        self._name = name
        self._parent_block_id = parent_block_id
        self._playlist_id = playlist_id
        self._relative_delay = relative_delay
        self._scheduled_end_time = scheduled_end_time
        self._scheduled_length = scheduled_length
        self._scheduled_start_time = scheduled_start_time
        self._seq = seq
        self._start_time = start_time
        self._start_type = start_type
        self._template_id = template_id
        self._type = type

    @property
    def blocks(self):
        """
        Gets the blocks of this SchBlockPT.

        :return: The blocks of this SchBlockPT.
        :rtype: list[SchBlockPT]
        """
        return self._blocks

    @blocks.setter
    def blocks(self, blocks):
        """
        Sets the blocks of this SchBlockPT.

        :param blocks: The blocks of this SchBlockPT.
        :type: list[SchBlockPT]
        """

        self._blocks = blocks

    @property
    def dim_day(self):
        """
        Gets the dim_day of this SchBlockPT.

        :return: The dim_day of this SchBlockPT.
        :rtype: int
        """
        return self._dim_day

    @dim_day.setter
    def dim_day(self, dim_day):
        """
        Sets the dim_day of this SchBlockPT.

        :param dim_day: The dim_day of this SchBlockPT.
        :type: int
        """

        self._dim_day = dim_day

    @property
    def dim_hour(self):
        """
        Gets the dim_hour of this SchBlockPT.

        :return: The dim_hour of this SchBlockPT.
        :rtype: int
        """
        return self._dim_hour

    @dim_hour.setter
    def dim_hour(self, dim_hour):
        """
        Sets the dim_hour of this SchBlockPT.

        :param dim_hour: The dim_hour of this SchBlockPT.
        :type: int
        """

        self._dim_hour = dim_hour

    @property
    def dim_minute(self):
        """
        Gets the dim_minute of this SchBlockPT.

        :return: The dim_minute of this SchBlockPT.
        :rtype: int
        """
        return self._dim_minute

    @dim_minute.setter
    def dim_minute(self, dim_minute):
        """
        Sets the dim_minute of this SchBlockPT.

        :param dim_minute: The dim_minute of this SchBlockPT.
        :type: int
        """

        self._dim_minute = dim_minute

    @property
    def dim_month(self):
        """
        Gets the dim_month of this SchBlockPT.

        :return: The dim_month of this SchBlockPT.
        :rtype: int
        """
        return self._dim_month

    @dim_month.setter
    def dim_month(self, dim_month):
        """
        Sets the dim_month of this SchBlockPT.

        :param dim_month: The dim_month of this SchBlockPT.
        :type: int
        """

        self._dim_month = dim_month

    @property
    def dim_second(self):
        """
        Gets the dim_second of this SchBlockPT.

        :return: The dim_second of this SchBlockPT.
        :rtype: int
        """
        return self._dim_second

    @dim_second.setter
    def dim_second(self, dim_second):
        """
        Sets the dim_second of this SchBlockPT.

        :param dim_second: The dim_second of this SchBlockPT.
        :type: int
        """

        self._dim_second = dim_second

    @property
    def dim_year(self):
        """
        Gets the dim_year of this SchBlockPT.

        :return: The dim_year of this SchBlockPT.
        :rtype: int
        """
        return self._dim_year

    @dim_year.setter
    def dim_year(self, dim_year):
        """
        Sets the dim_year of this SchBlockPT.

        :param dim_year: The dim_year of this SchBlockPT.
        :type: int
        """

        self._dim_year = dim_year

    @property
    def emissions(self):
        """
        Gets the emissions of this SchBlockPT.

        :return: The emissions of this SchBlockPT.
        :rtype: list[SchEmissionPT]
        """
        return self._emissions

    @emissions.setter
    def emissions(self, emissions):
        """
        Sets the emissions of this SchBlockPT.

        :param emissions: The emissions of this SchBlockPT.
        :type: list[SchEmissionPT]
        """

        self._emissions = emissions

    @property
    def end_time(self):
        """
        Gets the end_time of this SchBlockPT.

        :return: The end_time of this SchBlockPT.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this SchBlockPT.

        :param end_time: The end_time of this SchBlockPT.
        :type: datetime
        """

        self._end_time = end_time

    @property
    def id(self):
        """
        Gets the id of this SchBlockPT.

        :return: The id of this SchBlockPT.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SchBlockPT.

        :param id: The id of this SchBlockPT.
        :type: int
        """

        self._id = id

    @property
    def length(self):
        """
        Gets the length of this SchBlockPT.

        :return: The length of this SchBlockPT.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """
        Sets the length of this SchBlockPT.

        :param length: The length of this SchBlockPT.
        :type: int
        """

        self._length = length

    @property
    def name(self):
        """
        Gets the name of this SchBlockPT.

        :return: The name of this SchBlockPT.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SchBlockPT.

        :param name: The name of this SchBlockPT.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def parent_block_id(self):
        """
        Gets the parent_block_id of this SchBlockPT.

        :return: The parent_block_id of this SchBlockPT.
        :rtype: int
        """
        return self._parent_block_id

    @parent_block_id.setter
    def parent_block_id(self, parent_block_id):
        """
        Sets the parent_block_id of this SchBlockPT.

        :param parent_block_id: The parent_block_id of this SchBlockPT.
        :type: int
        """

        self._parent_block_id = parent_block_id

    @property
    def playlist_id(self):
        """
        Gets the playlist_id of this SchBlockPT.

        :return: The playlist_id of this SchBlockPT.
        :rtype: int
        """
        return self._playlist_id

    @playlist_id.setter
    def playlist_id(self, playlist_id):
        """
        Sets the playlist_id of this SchBlockPT.

        :param playlist_id: The playlist_id of this SchBlockPT.
        :type: int
        """

        self._playlist_id = playlist_id

    @property
    def relative_delay(self):
        """
        Gets the relative_delay of this SchBlockPT.

        :return: The relative_delay of this SchBlockPT.
        :rtype: int
        """
        return self._relative_delay

    @relative_delay.setter
    def relative_delay(self, relative_delay):
        """
        Sets the relative_delay of this SchBlockPT.

        :param relative_delay: The relative_delay of this SchBlockPT.
        :type: int
        """

        self._relative_delay = relative_delay

    @property
    def scheduled_end_time(self):
        """
        Gets the scheduled_end_time of this SchBlockPT.

        :return: The scheduled_end_time of this SchBlockPT.
        :rtype: datetime
        """
        return self._scheduled_end_time

    @scheduled_end_time.setter
    def scheduled_end_time(self, scheduled_end_time):
        """
        Sets the scheduled_end_time of this SchBlockPT.

        :param scheduled_end_time: The scheduled_end_time of this SchBlockPT.
        :type: datetime
        """

        self._scheduled_end_time = scheduled_end_time

    @property
    def scheduled_length(self):
        """
        Gets the scheduled_length of this SchBlockPT.

        :return: The scheduled_length of this SchBlockPT.
        :rtype: int
        """
        return self._scheduled_length

    @scheduled_length.setter
    def scheduled_length(self, scheduled_length):
        """
        Sets the scheduled_length of this SchBlockPT.

        :param scheduled_length: The scheduled_length of this SchBlockPT.
        :type: int
        """

        self._scheduled_length = scheduled_length

    @property
    def scheduled_start_time(self):
        """
        Gets the scheduled_start_time of this SchBlockPT.

        :return: The scheduled_start_time of this SchBlockPT.
        :rtype: datetime
        """
        return self._scheduled_start_time

    @scheduled_start_time.setter
    def scheduled_start_time(self, scheduled_start_time):
        """
        Sets the scheduled_start_time of this SchBlockPT.

        :param scheduled_start_time: The scheduled_start_time of this SchBlockPT.
        :type: datetime
        """

        self._scheduled_start_time = scheduled_start_time

    @property
    def seq(self):
        """
        Gets the seq of this SchBlockPT.

        :return: The seq of this SchBlockPT.
        :rtype: int
        """
        return self._seq

    @seq.setter
    def seq(self, seq):
        """
        Sets the seq of this SchBlockPT.

        :param seq: The seq of this SchBlockPT.
        :type: int
        """
        if seq is None:
            raise ValueError("Invalid value for `seq`, must not be `None`")

        self._seq = seq

    @property
    def start_time(self):
        """
        Gets the start_time of this SchBlockPT.

        :return: The start_time of this SchBlockPT.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this SchBlockPT.

        :param start_time: The start_time of this SchBlockPT.
        :type: datetime
        """

        self._start_time = start_time

    @property
    def start_type(self):
        """
        Gets the start_type of this SchBlockPT.

        :return: The start_type of this SchBlockPT.
        :rtype: str
        """
        return self._start_type

    @start_type.setter
    def start_type(self, start_type):
        """
        Sets the start_type of this SchBlockPT.

        :param start_type: The start_type of this SchBlockPT.
        :type: str
        """
        allowed_values = ["ST_FREE", "ST_RELATIVE", "ST_ABSOLUTE"]
        if start_type not in allowed_values:
            raise ValueError(
                "Invalid value for `start_type` ({0}), must be one of {1}"
                .format(start_type, allowed_values)
            )

        self._start_type = start_type

    @property
    def template_id(self):
        """
        Gets the template_id of this SchBlockPT.

        :return: The template_id of this SchBlockPT.
        :rtype: int
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """
        Sets the template_id of this SchBlockPT.

        :param template_id: The template_id of this SchBlockPT.
        :type: int
        """

        self._template_id = template_id

    @property
    def type(self):
        """
        Gets the type of this SchBlockPT.

        :return: The type of this SchBlockPT.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this SchBlockPT.

        :param type: The type of this SchBlockPT.
        :type: str
        """
        allowed_values = ["BT_DAY", "BT_BAND", "BT_HOUR", "BT_NEWS", "BT_COMMERCIAL", "BT_PROGRAM", "BT_LIVE", "BT_OTHER"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SchBlockPT):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
