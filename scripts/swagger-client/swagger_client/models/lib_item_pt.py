# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LibItemPT(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, album=None, artist=None, authors=None, composers=None, idx=None, label=None, length=None, library=None, markers=None, name=None, properties=None, resource_type=None, state=None, stream=None, tags=None, track=None):
        """
        LibItemPT - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'album': 'LibAlbumPT',
            'artist': 'LibArtistPT',
            'authors': 'list[LibPersonPT]',
            'composers': 'list[LibPersonPT]',
            'idx': 'str',
            'label': 'LibLabelPT',
            'length': 'int',
            'library': 'LibraryPT',
            'markers': 'list[LibMarkerPT]',
            'name': 'str',
            'properties': 'list[CoreKeyValuePT]',
            'resource_type': 'str',
            'state': 'str',
            'stream': 'str',
            'tags': 'list[str]',
            'track': 'LibTrackPT'
        }

        self.attribute_map = {
            'album': 'album',
            'artist': 'artist',
            'authors': 'authors',
            'composers': 'composers',
            'idx': 'idx',
            'label': 'label',
            'length': 'length',
            'library': 'library',
            'markers': 'markers',
            'name': 'name',
            'properties': 'properties',
            'resource_type': 'resourceType',
            'state': 'state',
            'stream': 'stream',
            'tags': 'tags',
            'track': 'track'
        }

        self._album = album
        self._artist = artist
        self._authors = authors
        self._composers = composers
        self._idx = idx
        self._label = label
        self._length = length
        self._library = library
        self._markers = markers
        self._name = name
        self._properties = properties
        self._resource_type = resource_type
        self._state = state
        self._stream = stream
        self._tags = tags
        self._track = track

    @property
    def album(self):
        """
        Gets the album of this LibItemPT.

        :return: The album of this LibItemPT.
        :rtype: LibAlbumPT
        """
        return self._album

    @album.setter
    def album(self, album):
        """
        Sets the album of this LibItemPT.

        :param album: The album of this LibItemPT.
        :type: LibAlbumPT
        """

        self._album = album

    @property
    def artist(self):
        """
        Gets the artist of this LibItemPT.

        :return: The artist of this LibItemPT.
        :rtype: LibArtistPT
        """
        return self._artist

    @artist.setter
    def artist(self, artist):
        """
        Sets the artist of this LibItemPT.

        :param artist: The artist of this LibItemPT.
        :type: LibArtistPT
        """

        self._artist = artist

    @property
    def authors(self):
        """
        Gets the authors of this LibItemPT.

        :return: The authors of this LibItemPT.
        :rtype: list[LibPersonPT]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """
        Sets the authors of this LibItemPT.

        :param authors: The authors of this LibItemPT.
        :type: list[LibPersonPT]
        """

        self._authors = authors

    @property
    def composers(self):
        """
        Gets the composers of this LibItemPT.

        :return: The composers of this LibItemPT.
        :rtype: list[LibPersonPT]
        """
        return self._composers

    @composers.setter
    def composers(self, composers):
        """
        Sets the composers of this LibItemPT.

        :param composers: The composers of this LibItemPT.
        :type: list[LibPersonPT]
        """

        self._composers = composers

    @property
    def idx(self):
        """
        Gets the idx of this LibItemPT.

        :return: The idx of this LibItemPT.
        :rtype: str
        """
        return self._idx

    @idx.setter
    def idx(self, idx):
        """
        Sets the idx of this LibItemPT.

        :param idx: The idx of this LibItemPT.
        :type: str
        """

        self._idx = idx

    @property
    def label(self):
        """
        Gets the label of this LibItemPT.

        :return: The label of this LibItemPT.
        :rtype: LibLabelPT
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this LibItemPT.

        :param label: The label of this LibItemPT.
        :type: LibLabelPT
        """

        self._label = label

    @property
    def length(self):
        """
        Gets the length of this LibItemPT.

        :return: The length of this LibItemPT.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """
        Sets the length of this LibItemPT.

        :param length: The length of this LibItemPT.
        :type: int
        """

        self._length = length

    @property
    def library(self):
        """
        Gets the library of this LibItemPT.

        :return: The library of this LibItemPT.
        :rtype: LibraryPT
        """
        return self._library

    @library.setter
    def library(self, library):
        """
        Sets the library of this LibItemPT.

        :param library: The library of this LibItemPT.
        :type: LibraryPT
        """

        self._library = library

    @property
    def markers(self):
        """
        Gets the markers of this LibItemPT.

        :return: The markers of this LibItemPT.
        :rtype: list[LibMarkerPT]
        """
        return self._markers

    @markers.setter
    def markers(self, markers):
        """
        Sets the markers of this LibItemPT.

        :param markers: The markers of this LibItemPT.
        :type: list[LibMarkerPT]
        """

        self._markers = markers

    @property
    def name(self):
        """
        Gets the name of this LibItemPT.

        :return: The name of this LibItemPT.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LibItemPT.

        :param name: The name of this LibItemPT.
        :type: str
        """

        self._name = name

    @property
    def properties(self):
        """
        Gets the properties of this LibItemPT.

        :return: The properties of this LibItemPT.
        :rtype: list[CoreKeyValuePT]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """
        Sets the properties of this LibItemPT.

        :param properties: The properties of this LibItemPT.
        :type: list[CoreKeyValuePT]
        """

        self._properties = properties

    @property
    def resource_type(self):
        """
        Gets the resource_type of this LibItemPT.

        :return: The resource_type of this LibItemPT.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """
        Sets the resource_type of this LibItemPT.

        :param resource_type: The resource_type of this LibItemPT.
        :type: str
        """
        allowed_values = ["IT_AUDIO", "IT_VIDEO", "IT_COMMAND", "IT_OTHER"]
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def state(self):
        """
        Gets the state of this LibItemPT.

        :return: The state of this LibItemPT.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this LibItemPT.

        :param state: The state of this LibItemPT.
        :type: str
        """
        allowed_values = ["IS_NEW", "IS_POSTPROCESS", "IS_ENABLED", "IS_DISABLED", "IS_ARCHIVED", "IS_DELETED", "IS_ERROR", "IS_OTHER"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def stream(self):
        """
        Gets the stream of this LibItemPT.

        :return: The stream of this LibItemPT.
        :rtype: str
        """
        return self._stream

    @stream.setter
    def stream(self, stream):
        """
        Sets the stream of this LibItemPT.

        :param stream: The stream of this LibItemPT.
        :type: str
        """

        self._stream = stream

    @property
    def tags(self):
        """
        Gets the tags of this LibItemPT.

        :return: The tags of this LibItemPT.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this LibItemPT.

        :param tags: The tags of this LibItemPT.
        :type: list[str]
        """

        self._tags = tags

    @property
    def track(self):
        """
        Gets the track of this LibItemPT.

        :return: The track of this LibItemPT.
        :rtype: LibTrackPT
        """
        return self._track

    @track.setter
    def track(self, track):
        """
        Sets the track of this LibItemPT.

        :param track: The track of this LibItemPT.
        :type: LibTrackPT
        """

        self._track = track

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LibItemPT):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
