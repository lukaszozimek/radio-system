# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, activated=None, authorities=None, created_by=None, created_date=None, email=None, first_name=None, id=None, image_url=None, lang_key=None, last_modified_by=None, last_modified_date=None, last_name=None, login=None):
        """
        UserDTO - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'activated': 'bool',
            'authorities': 'list[str]',
            'created_by': 'str',
            'created_date': 'datetime',
            'email': 'str',
            'first_name': 'str',
            'id': 'int',
            'image_url': 'str',
            'lang_key': 'str',
            'last_modified_by': 'str',
            'last_modified_date': 'datetime',
            'last_name': 'str',
            'login': 'str'
        }

        self.attribute_map = {
            'activated': 'activated',
            'authorities': 'authorities',
            'created_by': 'createdBy',
            'created_date': 'createdDate',
            'email': 'email',
            'first_name': 'firstName',
            'id': 'id',
            'image_url': 'imageUrl',
            'lang_key': 'langKey',
            'last_modified_by': 'lastModifiedBy',
            'last_modified_date': 'lastModifiedDate',
            'last_name': 'lastName',
            'login': 'login'
        }

        self._activated = activated
        self._authorities = authorities
        self._created_by = created_by
        self._created_date = created_date
        self._email = email
        self._first_name = first_name
        self._id = id
        self._image_url = image_url
        self._lang_key = lang_key
        self._last_modified_by = last_modified_by
        self._last_modified_date = last_modified_date
        self._last_name = last_name
        self._login = login

    @property
    def activated(self):
        """
        Gets the activated of this UserDTO.

        :return: The activated of this UserDTO.
        :rtype: bool
        """
        return self._activated

    @activated.setter
    def activated(self, activated):
        """
        Sets the activated of this UserDTO.

        :param activated: The activated of this UserDTO.
        :type: bool
        """

        self._activated = activated

    @property
    def authorities(self):
        """
        Gets the authorities of this UserDTO.

        :return: The authorities of this UserDTO.
        :rtype: list[str]
        """
        return self._authorities

    @authorities.setter
    def authorities(self, authorities):
        """
        Sets the authorities of this UserDTO.

        :param authorities: The authorities of this UserDTO.
        :type: list[str]
        """

        self._authorities = authorities

    @property
    def created_by(self):
        """
        Gets the created_by of this UserDTO.

        :return: The created_by of this UserDTO.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """
        Sets the created_by of this UserDTO.

        :param created_by: The created_by of this UserDTO.
        :type: str
        """

        self._created_by = created_by

    @property
    def created_date(self):
        """
        Gets the created_date of this UserDTO.

        :return: The created_date of this UserDTO.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this UserDTO.

        :param created_date: The created_date of this UserDTO.
        :type: datetime
        """

        self._created_date = created_date

    @property
    def email(self):
        """
        Gets the email of this UserDTO.

        :return: The email of this UserDTO.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this UserDTO.

        :param email: The email of this UserDTO.
        :type: str
        """
        if email is not None and len(email) > 100:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `100`")
        if email is not None and len(email) < 5:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `5`")

        self._email = email

    @property
    def first_name(self):
        """
        Gets the first_name of this UserDTO.

        :return: The first_name of this UserDTO.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this UserDTO.

        :param first_name: The first_name of this UserDTO.
        :type: str
        """
        if first_name is not None and len(first_name) > 50:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `50`")
        if first_name is not None and len(first_name) < 0:
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `0`")

        self._first_name = first_name

    @property
    def id(self):
        """
        Gets the id of this UserDTO.

        :return: The id of this UserDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this UserDTO.

        :param id: The id of this UserDTO.
        :type: int
        """

        self._id = id

    @property
    def image_url(self):
        """
        Gets the image_url of this UserDTO.

        :return: The image_url of this UserDTO.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """
        Sets the image_url of this UserDTO.

        :param image_url: The image_url of this UserDTO.
        :type: str
        """
        if image_url is not None and len(image_url) > 256:
            raise ValueError("Invalid value for `image_url`, length must be less than or equal to `256`")
        if image_url is not None and len(image_url) < 0:
            raise ValueError("Invalid value for `image_url`, length must be greater than or equal to `0`")

        self._image_url = image_url

    @property
    def lang_key(self):
        """
        Gets the lang_key of this UserDTO.

        :return: The lang_key of this UserDTO.
        :rtype: str
        """
        return self._lang_key

    @lang_key.setter
    def lang_key(self, lang_key):
        """
        Sets the lang_key of this UserDTO.

        :param lang_key: The lang_key of this UserDTO.
        :type: str
        """
        if lang_key is not None and len(lang_key) > 5:
            raise ValueError("Invalid value for `lang_key`, length must be less than or equal to `5`")
        if lang_key is not None and len(lang_key) < 2:
            raise ValueError("Invalid value for `lang_key`, length must be greater than or equal to `2`")

        self._lang_key = lang_key

    @property
    def last_modified_by(self):
        """
        Gets the last_modified_by of this UserDTO.

        :return: The last_modified_by of this UserDTO.
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """
        Sets the last_modified_by of this UserDTO.

        :param last_modified_by: The last_modified_by of this UserDTO.
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def last_modified_date(self):
        """
        Gets the last_modified_date of this UserDTO.

        :return: The last_modified_date of this UserDTO.
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """
        Sets the last_modified_date of this UserDTO.

        :param last_modified_date: The last_modified_date of this UserDTO.
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def last_name(self):
        """
        Gets the last_name of this UserDTO.

        :return: The last_name of this UserDTO.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this UserDTO.

        :param last_name: The last_name of this UserDTO.
        :type: str
        """
        if last_name is not None and len(last_name) > 50:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `50`")
        if last_name is not None and len(last_name) < 0:
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `0`")

        self._last_name = last_name

    @property
    def login(self):
        """
        Gets the login of this UserDTO.

        :return: The login of this UserDTO.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """
        Sets the login of this UserDTO.

        :param login: The login of this UserDTO.
        :type: str
        """
        if login is not None and len(login) > 50:
            raise ValueError("Invalid value for `login`, length must be less than or equal to `50`")
        if login is not None and len(login) < 1:
            raise ValueError("Invalid value for `login`, length must be greater than or equal to `1`")
        if login is not None and not re.search('^[_\'.@A-Za-z0-9-]*$', login):
            raise ValueError("Invalid value for `login`, must be a follow pattern or equal to `/^[_'.@A-Za-z0-9-]*$/`")

        self._login = login

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UserDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
