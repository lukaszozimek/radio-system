# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CrmTaskPT(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, activity_date=None, activity_lenght=None, assigned_to=None, comment=None, created_by=None, id=None, related_tasks=None, status=None, subject=None):
        """
        CrmTaskPT - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'activity_date': 'str',
            'activity_lenght': 'int',
            'assigned_to': 'CoreUserPT',
            'comment': 'str',
            'created_by': 'CoreUserPT',
            'id': 'int',
            'related_tasks': 'list[CrmTaskPT]',
            'status': 'CrmTaskStatus',
            'subject': 'str'
        }

        self.attribute_map = {
            'activity_date': 'activityDate',
            'activity_lenght': 'activityLenght',
            'assigned_to': 'assignedTo',
            'comment': 'comment',
            'created_by': 'createdBy',
            'id': 'id',
            'related_tasks': 'relatedTasks',
            'status': 'status',
            'subject': 'subject'
        }

        self._activity_date = activity_date
        self._activity_lenght = activity_lenght
        self._assigned_to = assigned_to
        self._comment = comment
        self._created_by = created_by
        self._id = id
        self._related_tasks = related_tasks
        self._status = status
        self._subject = subject

    @property
    def activity_date(self):
        """
        Gets the activity_date of this CrmTaskPT.

        :return: The activity_date of this CrmTaskPT.
        :rtype: str
        """
        return self._activity_date

    @activity_date.setter
    def activity_date(self, activity_date):
        """
        Sets the activity_date of this CrmTaskPT.

        :param activity_date: The activity_date of this CrmTaskPT.
        :type: str
        """

        self._activity_date = activity_date

    @property
    def activity_lenght(self):
        """
        Gets the activity_lenght of this CrmTaskPT.

        :return: The activity_lenght of this CrmTaskPT.
        :rtype: int
        """
        return self._activity_lenght

    @activity_lenght.setter
    def activity_lenght(self, activity_lenght):
        """
        Sets the activity_lenght of this CrmTaskPT.

        :param activity_lenght: The activity_lenght of this CrmTaskPT.
        :type: int
        """

        self._activity_lenght = activity_lenght

    @property
    def assigned_to(self):
        """
        Gets the assigned_to of this CrmTaskPT.

        :return: The assigned_to of this CrmTaskPT.
        :rtype: CoreUserPT
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """
        Sets the assigned_to of this CrmTaskPT.

        :param assigned_to: The assigned_to of this CrmTaskPT.
        :type: CoreUserPT
        """

        self._assigned_to = assigned_to

    @property
    def comment(self):
        """
        Gets the comment of this CrmTaskPT.

        :return: The comment of this CrmTaskPT.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """
        Sets the comment of this CrmTaskPT.

        :param comment: The comment of this CrmTaskPT.
        :type: str
        """

        self._comment = comment

    @property
    def created_by(self):
        """
        Gets the created_by of this CrmTaskPT.

        :return: The created_by of this CrmTaskPT.
        :rtype: CoreUserPT
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """
        Sets the created_by of this CrmTaskPT.

        :param created_by: The created_by of this CrmTaskPT.
        :type: CoreUserPT
        """

        self._created_by = created_by

    @property
    def id(self):
        """
        Gets the id of this CrmTaskPT.

        :return: The id of this CrmTaskPT.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CrmTaskPT.

        :param id: The id of this CrmTaskPT.
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def related_tasks(self):
        """
        Gets the related_tasks of this CrmTaskPT.

        :return: The related_tasks of this CrmTaskPT.
        :rtype: list[CrmTaskPT]
        """
        return self._related_tasks

    @related_tasks.setter
    def related_tasks(self, related_tasks):
        """
        Sets the related_tasks of this CrmTaskPT.

        :param related_tasks: The related_tasks of this CrmTaskPT.
        :type: list[CrmTaskPT]
        """

        self._related_tasks = related_tasks

    @property
    def status(self):
        """
        Gets the status of this CrmTaskPT.

        :return: The status of this CrmTaskPT.
        :rtype: CrmTaskStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this CrmTaskPT.

        :param status: The status of this CrmTaskPT.
        :type: CrmTaskStatus
        """

        self._status = status

    @property
    def subject(self):
        """
        Gets the subject of this CrmTaskPT.

        :return: The subject of this CrmTaskPT.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this CrmTaskPT.

        :param subject: The subject of this CrmTaskPT.
        :type: str
        """

        self._subject = subject

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CrmTaskPT):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
