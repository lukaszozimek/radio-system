# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ConfMarkerConfigurationPT(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, color=None, display_name=None, id=None, keyboard_shortcut=None, name=None, network_id=None, type=None):
        """
        ConfMarkerConfigurationPT - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'color': 'str',
            'display_name': 'str',
            'id': 'int',
            'keyboard_shortcut': 'str',
            'name': 'str',
            'network_id': 'int',
            'type': 'str'
        }

        self.attribute_map = {
            'color': 'color',
            'display_name': 'displayName',
            'id': 'id',
            'keyboard_shortcut': 'keyboardShortcut',
            'name': 'name',
            'network_id': 'networkId',
            'type': 'type'
        }

        self._color = color
        self._display_name = display_name
        self._id = id
        self._keyboard_shortcut = keyboard_shortcut
        self._name = name
        self._network_id = network_id
        self._type = type

    @property
    def color(self):
        """
        Gets the color of this ConfMarkerConfigurationPT.

        :return: The color of this ConfMarkerConfigurationPT.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """
        Sets the color of this ConfMarkerConfigurationPT.

        :param color: The color of this ConfMarkerConfigurationPT.
        :type: str
        """
        if color is None:
            raise ValueError("Invalid value for `color`, must not be `None`")

        self._color = color

    @property
    def display_name(self):
        """
        Gets the display_name of this ConfMarkerConfigurationPT.

        :return: The display_name of this ConfMarkerConfigurationPT.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this ConfMarkerConfigurationPT.

        :param display_name: The display_name of this ConfMarkerConfigurationPT.
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def id(self):
        """
        Gets the id of this ConfMarkerConfigurationPT.

        :return: The id of this ConfMarkerConfigurationPT.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ConfMarkerConfigurationPT.

        :param id: The id of this ConfMarkerConfigurationPT.
        :type: int
        """

        self._id = id

    @property
    def keyboard_shortcut(self):
        """
        Gets the keyboard_shortcut of this ConfMarkerConfigurationPT.

        :return: The keyboard_shortcut of this ConfMarkerConfigurationPT.
        :rtype: str
        """
        return self._keyboard_shortcut

    @keyboard_shortcut.setter
    def keyboard_shortcut(self, keyboard_shortcut):
        """
        Sets the keyboard_shortcut of this ConfMarkerConfigurationPT.

        :param keyboard_shortcut: The keyboard_shortcut of this ConfMarkerConfigurationPT.
        :type: str
        """
        if keyboard_shortcut is None:
            raise ValueError("Invalid value for `keyboard_shortcut`, must not be `None`")

        self._keyboard_shortcut = keyboard_shortcut

    @property
    def name(self):
        """
        Gets the name of this ConfMarkerConfigurationPT.

        :return: The name of this ConfMarkerConfigurationPT.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ConfMarkerConfigurationPT.

        :param name: The name of this ConfMarkerConfigurationPT.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def network_id(self):
        """
        Gets the network_id of this ConfMarkerConfigurationPT.

        :return: The network_id of this ConfMarkerConfigurationPT.
        :rtype: int
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """
        Sets the network_id of this ConfMarkerConfigurationPT.

        :param network_id: The network_id of this ConfMarkerConfigurationPT.
        :type: int
        """

        self._network_id = network_id

    @property
    def type(self):
        """
        Gets the type of this ConfMarkerConfigurationPT.

        :return: The type of this ConfMarkerConfigurationPT.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ConfMarkerConfigurationPT.

        :param type: The type of this ConfMarkerConfigurationPT.
        :type: str
        """
        allowed_values = ["MT_BASIC", "MT_INTRO", "MT_FADE", "MT_HOOK", "MT_LOOP", "MT_CUSTOM"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ConfMarkerConfigurationPT):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
