# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LibMarkerPT(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, marker_type=None, media_item_id=None, name=None, start_time=None):
        """
        LibMarkerPT - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'marker_type': 'str',
            'media_item_id': 'int',
            'name': 'str',
            'start_time': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'marker_type': 'markerType',
            'media_item_id': 'mediaItemId',
            'name': 'name',
            'start_time': 'startTime'
        }

        self._id = id
        self._marker_type = marker_type
        self._media_item_id = media_item_id
        self._name = name
        self._start_time = start_time

    @property
    def id(self):
        """
        Gets the id of this LibMarkerPT.

        :return: The id of this LibMarkerPT.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LibMarkerPT.

        :param id: The id of this LibMarkerPT.
        :type: int
        """

        self._id = id

    @property
    def marker_type(self):
        """
        Gets the marker_type of this LibMarkerPT.

        :return: The marker_type of this LibMarkerPT.
        :rtype: str
        """
        return self._marker_type

    @marker_type.setter
    def marker_type(self, marker_type):
        """
        Sets the marker_type of this LibMarkerPT.

        :param marker_type: The marker_type of this LibMarkerPT.
        :type: str
        """
        allowed_values = ["MT_BASIC", "MT_INTRO", "MT_FADE", "MT_HOOK", "MT_LOOP", "MT_CUSTOM"]
        if marker_type not in allowed_values:
            raise ValueError(
                "Invalid value for `marker_type` ({0}), must be one of {1}"
                .format(marker_type, allowed_values)
            )

        self._marker_type = marker_type

    @property
    def media_item_id(self):
        """
        Gets the media_item_id of this LibMarkerPT.

        :return: The media_item_id of this LibMarkerPT.
        :rtype: int
        """
        return self._media_item_id

    @media_item_id.setter
    def media_item_id(self, media_item_id):
        """
        Sets the media_item_id of this LibMarkerPT.

        :param media_item_id: The media_item_id of this LibMarkerPT.
        :type: int
        """

        self._media_item_id = media_item_id

    @property
    def name(self):
        """
        Gets the name of this LibMarkerPT.

        :return: The name of this LibMarkerPT.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LibMarkerPT.

        :param name: The name of this LibMarkerPT.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def start_time(self):
        """
        Gets the start_time of this LibMarkerPT.

        :return: The start_time of this LibMarkerPT.
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this LibMarkerPT.

        :param start_time: The start_time of this LibMarkerPT.
        :type: int
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LibMarkerPT):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
