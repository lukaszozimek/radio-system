# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TraShuffleAdvertisementPT(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, advertisement=None, _from=None, number=None, optional=None, to=None):
        """
        TraShuffleAdvertisementPT - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'advertisement': 'TraAdvertisementPT',
            '_from': 'datetime',
            'number': 'int',
            'optional': 'TraShuffleAdvertisementOptionalPT',
            'to': 'datetime'
        }

        self.attribute_map = {
            'advertisement': 'advertisement',
            '_from': 'from',
            'number': 'number',
            'optional': 'optional',
            'to': 'to'
        }

        self._advertisement = advertisement
        self.__from = _from
        self._number = number
        self._optional = optional
        self._to = to

    @property
    def advertisement(self):
        """
        Gets the advertisement of this TraShuffleAdvertisementPT.

        :return: The advertisement of this TraShuffleAdvertisementPT.
        :rtype: TraAdvertisementPT
        """
        return self._advertisement

    @advertisement.setter
    def advertisement(self, advertisement):
        """
        Sets the advertisement of this TraShuffleAdvertisementPT.

        :param advertisement: The advertisement of this TraShuffleAdvertisementPT.
        :type: TraAdvertisementPT
        """

        self._advertisement = advertisement

    @property
    def _from(self):
        """
        Gets the _from of this TraShuffleAdvertisementPT.

        :return: The _from of this TraShuffleAdvertisementPT.
        :rtype: datetime
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """
        Sets the _from of this TraShuffleAdvertisementPT.

        :param _from: The _from of this TraShuffleAdvertisementPT.
        :type: datetime
        """

        self.__from = _from

    @property
    def number(self):
        """
        Gets the number of this TraShuffleAdvertisementPT.

        :return: The number of this TraShuffleAdvertisementPT.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """
        Sets the number of this TraShuffleAdvertisementPT.

        :param number: The number of this TraShuffleAdvertisementPT.
        :type: int
        """

        self._number = number

    @property
    def optional(self):
        """
        Gets the optional of this TraShuffleAdvertisementPT.

        :return: The optional of this TraShuffleAdvertisementPT.
        :rtype: TraShuffleAdvertisementOptionalPT
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """
        Sets the optional of this TraShuffleAdvertisementPT.

        :param optional: The optional of this TraShuffleAdvertisementPT.
        :type: TraShuffleAdvertisementOptionalPT
        """

        self._optional = optional

    @property
    def to(self):
        """
        Gets the to of this TraShuffleAdvertisementPT.

        :return: The to of this TraShuffleAdvertisementPT.
        :rtype: datetime
        """
        return self._to

    @to.setter
    def to(self, to):
        """
        Sets the to of this TraShuffleAdvertisementPT.

        :param to: The to of this TraShuffleAdvertisementPT.
        :type: datetime
        """

        self._to = to

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TraShuffleAdvertisementPT):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
