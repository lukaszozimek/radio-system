# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LibMediaItemPT(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, album_id=None, artist_id=None, command=None, description=None, id=None, idx=None, item_type=None, label_id=None, length=None, library_id=None, name=None, state=None, track_id=None):
        """
        LibMediaItemPT - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'album_id': 'int',
            'artist_id': 'int',
            'command': 'str',
            'description': 'str',
            'id': 'int',
            'idx': 'str',
            'item_type': 'str',
            'label_id': 'int',
            'length': 'int',
            'library_id': 'int',
            'name': 'str',
            'state': 'str',
            'track_id': 'int'
        }

        self.attribute_map = {
            'album_id': 'albumId',
            'artist_id': 'artistId',
            'command': 'command',
            'description': 'description',
            'id': 'id',
            'idx': 'idx',
            'item_type': 'itemType',
            'label_id': 'labelId',
            'length': 'length',
            'library_id': 'libraryId',
            'name': 'name',
            'state': 'state',
            'track_id': 'trackId'
        }

        self._album_id = album_id
        self._artist_id = artist_id
        self._command = command
        self._description = description
        self._id = id
        self._idx = idx
        self._item_type = item_type
        self._label_id = label_id
        self._length = length
        self._library_id = library_id
        self._name = name
        self._state = state
        self._track_id = track_id

    @property
    def album_id(self):
        """
        Gets the album_id of this LibMediaItemPT.

        :return: The album_id of this LibMediaItemPT.
        :rtype: int
        """
        return self._album_id

    @album_id.setter
    def album_id(self, album_id):
        """
        Sets the album_id of this LibMediaItemPT.

        :param album_id: The album_id of this LibMediaItemPT.
        :type: int
        """

        self._album_id = album_id

    @property
    def artist_id(self):
        """
        Gets the artist_id of this LibMediaItemPT.

        :return: The artist_id of this LibMediaItemPT.
        :rtype: int
        """
        return self._artist_id

    @artist_id.setter
    def artist_id(self, artist_id):
        """
        Sets the artist_id of this LibMediaItemPT.

        :param artist_id: The artist_id of this LibMediaItemPT.
        :type: int
        """

        self._artist_id = artist_id

    @property
    def command(self):
        """
        Gets the command of this LibMediaItemPT.

        :return: The command of this LibMediaItemPT.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """
        Sets the command of this LibMediaItemPT.

        :param command: The command of this LibMediaItemPT.
        :type: str
        """

        self._command = command

    @property
    def description(self):
        """
        Gets the description of this LibMediaItemPT.

        :return: The description of this LibMediaItemPT.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this LibMediaItemPT.

        :param description: The description of this LibMediaItemPT.
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """
        Gets the id of this LibMediaItemPT.

        :return: The id of this LibMediaItemPT.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LibMediaItemPT.

        :param id: The id of this LibMediaItemPT.
        :type: int
        """

        self._id = id

    @property
    def idx(self):
        """
        Gets the idx of this LibMediaItemPT.

        :return: The idx of this LibMediaItemPT.
        :rtype: str
        """
        return self._idx

    @idx.setter
    def idx(self, idx):
        """
        Sets the idx of this LibMediaItemPT.

        :param idx: The idx of this LibMediaItemPT.
        :type: str
        """
        if idx is None:
            raise ValueError("Invalid value for `idx`, must not be `None`")
        if idx is not None and len(idx) > 15:
            raise ValueError("Invalid value for `idx`, length must be less than or equal to `15`")
        if idx is not None and len(idx) < 0:
            raise ValueError("Invalid value for `idx`, length must be greater than or equal to `0`")

        self._idx = idx

    @property
    def item_type(self):
        """
        Gets the item_type of this LibMediaItemPT.

        :return: The item_type of this LibMediaItemPT.
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """
        Sets the item_type of this LibMediaItemPT.

        :param item_type: The item_type of this LibMediaItemPT.
        :type: str
        """
        allowed_values = ["IT_AUDIO", "IT_VIDEO", "IT_COMMAND", "IT_OTHER"]
        if item_type not in allowed_values:
            raise ValueError(
                "Invalid value for `item_type` ({0}), must be one of {1}"
                .format(item_type, allowed_values)
            )

        self._item_type = item_type

    @property
    def label_id(self):
        """
        Gets the label_id of this LibMediaItemPT.

        :return: The label_id of this LibMediaItemPT.
        :rtype: int
        """
        return self._label_id

    @label_id.setter
    def label_id(self, label_id):
        """
        Sets the label_id of this LibMediaItemPT.

        :param label_id: The label_id of this LibMediaItemPT.
        :type: int
        """

        self._label_id = label_id

    @property
    def length(self):
        """
        Gets the length of this LibMediaItemPT.

        :return: The length of this LibMediaItemPT.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """
        Sets the length of this LibMediaItemPT.

        :param length: The length of this LibMediaItemPT.
        :type: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")

        self._length = length

    @property
    def library_id(self):
        """
        Gets the library_id of this LibMediaItemPT.

        :return: The library_id of this LibMediaItemPT.
        :rtype: int
        """
        return self._library_id

    @library_id.setter
    def library_id(self, library_id):
        """
        Sets the library_id of this LibMediaItemPT.

        :param library_id: The library_id of this LibMediaItemPT.
        :type: int
        """

        self._library_id = library_id

    @property
    def name(self):
        """
        Gets the name of this LibMediaItemPT.

        :return: The name of this LibMediaItemPT.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LibMediaItemPT.

        :param name: The name of this LibMediaItemPT.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def state(self):
        """
        Gets the state of this LibMediaItemPT.

        :return: The state of this LibMediaItemPT.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this LibMediaItemPT.

        :param state: The state of this LibMediaItemPT.
        :type: str
        """
        allowed_values = ["IS_NEW", "IS_POSTPROCESS", "IS_ENABLED", "IS_DISABLED", "IS_ARCHIVED", "IS_DELETED", "IS_ERROR", "IS_OTHER"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def track_id(self):
        """
        Gets the track_id of this LibMediaItemPT.

        :return: The track_id of this LibMediaItemPT.
        :rtype: int
        """
        return self._track_id

    @track_id.setter
    def track_id(self, track_id):
        """
        Sets the track_id of this LibMediaItemPT.

        :param track_id: The track_id of this LibMediaItemPT.
        :type: int
        """

        self._track_id = track_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LibMediaItemPT):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
