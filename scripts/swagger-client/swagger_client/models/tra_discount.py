# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TraDiscount(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, discount=None, id=None, network=None, valid_from=None, valid_to=None):
        """
        TraDiscount - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'discount': 'int',
            'id': 'int',
            'network': 'CorNetwork',
            'valid_from': 'date',
            'valid_to': 'date'
        }

        self.attribute_map = {
            'discount': 'discount',
            'id': 'id',
            'network': 'network',
            'valid_from': 'validFrom',
            'valid_to': 'validTo'
        }

        self._discount = discount
        self._id = id
        self._network = network
        self._valid_from = valid_from
        self._valid_to = valid_to

    @property
    def discount(self):
        """
        Gets the discount of this TraDiscount.

        :return: The discount of this TraDiscount.
        :rtype: int
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """
        Sets the discount of this TraDiscount.

        :param discount: The discount of this TraDiscount.
        :type: int
        """

        self._discount = discount

    @property
    def id(self):
        """
        Gets the id of this TraDiscount.

        :return: The id of this TraDiscount.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TraDiscount.

        :param id: The id of this TraDiscount.
        :type: int
        """

        self._id = id

    @property
    def network(self):
        """
        Gets the network of this TraDiscount.

        :return: The network of this TraDiscount.
        :rtype: CorNetwork
        """
        return self._network

    @network.setter
    def network(self, network):
        """
        Sets the network of this TraDiscount.

        :param network: The network of this TraDiscount.
        :type: CorNetwork
        """

        self._network = network

    @property
    def valid_from(self):
        """
        Gets the valid_from of this TraDiscount.

        :return: The valid_from of this TraDiscount.
        :rtype: date
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """
        Sets the valid_from of this TraDiscount.

        :param valid_from: The valid_from of this TraDiscount.
        :type: date
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """
        Gets the valid_to of this TraDiscount.

        :return: The valid_to of this TraDiscount.
        :rtype: date
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """
        Sets the valid_to of this TraDiscount.

        :param valid_to: The valid_to of this TraDiscount.
        :type: date
        """

        self._valid_to = valid_to

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TraDiscount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
