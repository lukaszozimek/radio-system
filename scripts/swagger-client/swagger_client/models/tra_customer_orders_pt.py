# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TraCustomerOrdersPT(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, order=None, paid=None, payment_day=None):
        """
        TraCustomerOrdersPT - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'order': 'TraOrderPT',
            'paid': 'bool',
            'payment_day': 'str'
        }

        self.attribute_map = {
            'order': 'order',
            'paid': 'paid',
            'payment_day': 'paymentDay'
        }

        self._order = order
        self._paid = paid
        self._payment_day = payment_day

    @property
    def order(self):
        """
        Gets the order of this TraCustomerOrdersPT.

        :return: The order of this TraCustomerOrdersPT.
        :rtype: TraOrderPT
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this TraCustomerOrdersPT.

        :param order: The order of this TraCustomerOrdersPT.
        :type: TraOrderPT
        """

        self._order = order

    @property
    def paid(self):
        """
        Gets the paid of this TraCustomerOrdersPT.

        :return: The paid of this TraCustomerOrdersPT.
        :rtype: bool
        """
        return self._paid

    @paid.setter
    def paid(self, paid):
        """
        Sets the paid of this TraCustomerOrdersPT.

        :param paid: The paid of this TraCustomerOrdersPT.
        :type: bool
        """

        self._paid = paid

    @property
    def payment_day(self):
        """
        Gets the payment_day of this TraCustomerOrdersPT.

        :return: The payment_day of this TraCustomerOrdersPT.
        :rtype: str
        """
        return self._payment_day

    @payment_day.setter
    def payment_day(self, payment_day):
        """
        Sets the payment_day of this TraCustomerOrdersPT.

        :param payment_day: The payment_day of this TraCustomerOrdersPT.
        :type: str
        """

        self._payment_day = payment_day

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TraCustomerOrdersPT):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
