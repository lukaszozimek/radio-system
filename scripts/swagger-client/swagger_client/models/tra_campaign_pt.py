# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TraCampaignPT(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, customer_id=None, customer_pt=None, emission=None, end_date=None, id=None, name=None, order=None, prize=None, start_date=None, statsus=None, status=None):
        """
        TraCampaignPT - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'customer_id': 'TraCustomerPT',
            'customer_pt': 'TraCustomerPT',
            'emission': 'list[SchEmissionPT]',
            'end_date': 'date',
            'id': 'int',
            'name': 'str',
            'order': 'TraOrderPT',
            'prize': 'int',
            'start_date': 'date',
            'statsus': 'TraCampaingStatus',
            'status': 'TraCampaingStatus'
        }

        self.attribute_map = {
            'customer_id': 'customerId',
            'customer_pt': 'customerPT',
            'emission': 'emission',
            'end_date': 'endDate',
            'id': 'id',
            'name': 'name',
            'order': 'order',
            'prize': 'prize',
            'start_date': 'startDate',
            'statsus': 'statsus',
            'status': 'status'
        }

        self._customer_id = customer_id
        self._customer_pt = customer_pt
        self._emission = emission
        self._end_date = end_date
        self._id = id
        self._name = name
        self._order = order
        self._prize = prize
        self._start_date = start_date
        self._statsus = statsus
        self._status = status

    @property
    def customer_id(self):
        """
        Gets the customer_id of this TraCampaignPT.

        :return: The customer_id of this TraCampaignPT.
        :rtype: TraCustomerPT
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """
        Sets the customer_id of this TraCampaignPT.

        :param customer_id: The customer_id of this TraCampaignPT.
        :type: TraCustomerPT
        """

        self._customer_id = customer_id

    @property
    def customer_pt(self):
        """
        Gets the customer_pt of this TraCampaignPT.

        :return: The customer_pt of this TraCampaignPT.
        :rtype: TraCustomerPT
        """
        return self._customer_pt

    @customer_pt.setter
    def customer_pt(self, customer_pt):
        """
        Sets the customer_pt of this TraCampaignPT.

        :param customer_pt: The customer_pt of this TraCampaignPT.
        :type: TraCustomerPT
        """

        self._customer_pt = customer_pt

    @property
    def emission(self):
        """
        Gets the emission of this TraCampaignPT.

        :return: The emission of this TraCampaignPT.
        :rtype: list[SchEmissionPT]
        """
        return self._emission

    @emission.setter
    def emission(self, emission):
        """
        Sets the emission of this TraCampaignPT.

        :param emission: The emission of this TraCampaignPT.
        :type: list[SchEmissionPT]
        """

        self._emission = emission

    @property
    def end_date(self):
        """
        Gets the end_date of this TraCampaignPT.

        :return: The end_date of this TraCampaignPT.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """
        Sets the end_date of this TraCampaignPT.

        :param end_date: The end_date of this TraCampaignPT.
        :type: date
        """

        self._end_date = end_date

    @property
    def id(self):
        """
        Gets the id of this TraCampaignPT.

        :return: The id of this TraCampaignPT.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TraCampaignPT.

        :param id: The id of this TraCampaignPT.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this TraCampaignPT.

        :return: The name of this TraCampaignPT.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this TraCampaignPT.

        :param name: The name of this TraCampaignPT.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def order(self):
        """
        Gets the order of this TraCampaignPT.

        :return: The order of this TraCampaignPT.
        :rtype: TraOrderPT
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this TraCampaignPT.

        :param order: The order of this TraCampaignPT.
        :type: TraOrderPT
        """

        self._order = order

    @property
    def prize(self):
        """
        Gets the prize of this TraCampaignPT.

        :return: The prize of this TraCampaignPT.
        :rtype: int
        """
        return self._prize

    @prize.setter
    def prize(self, prize):
        """
        Sets the prize of this TraCampaignPT.

        :param prize: The prize of this TraCampaignPT.
        :type: int
        """

        self._prize = prize

    @property
    def start_date(self):
        """
        Gets the start_date of this TraCampaignPT.

        :return: The start_date of this TraCampaignPT.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """
        Sets the start_date of this TraCampaignPT.

        :param start_date: The start_date of this TraCampaignPT.
        :type: date
        """

        self._start_date = start_date

    @property
    def statsus(self):
        """
        Gets the statsus of this TraCampaignPT.

        :return: The statsus of this TraCampaignPT.
        :rtype: TraCampaingStatus
        """
        return self._statsus

    @statsus.setter
    def statsus(self, statsus):
        """
        Sets the statsus of this TraCampaignPT.

        :param statsus: The statsus of this TraCampaignPT.
        :type: TraCampaingStatus
        """

        self._statsus = statsus

    @property
    def status(self):
        """
        Gets the status of this TraCampaignPT.

        :return: The status of this TraCampaignPT.
        :rtype: TraCampaingStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this TraCampaignPT.

        :param status: The status of this TraCampaignPT.
        :type: TraCampaingStatus
        """

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TraCampaignPT):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
