# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SchEmissionPT(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, block_id=None, campaings_id=None, dim_day=None, dim_hour=None, dim_minute=None, dim_month=None, dim_second=None, dim_year=None, end_time=None, id=None, length=None, media_item=None, name=None, seq=None, start_time=None):
        """
        SchEmissionPT - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'block_id': 'int',
            'campaings_id': 'int',
            'dim_day': 'int',
            'dim_hour': 'int',
            'dim_minute': 'int',
            'dim_month': 'int',
            'dim_second': 'int',
            'dim_year': 'int',
            'end_time': 'datetime',
            'id': 'int',
            'length': 'int',
            'media_item': 'LibItemPT',
            'name': 'str',
            'seq': 'int',
            'start_time': 'datetime'
        }

        self.attribute_map = {
            'block_id': 'blockId',
            'campaings_id': 'campaingsId',
            'dim_day': 'dimDay',
            'dim_hour': 'dimHour',
            'dim_minute': 'dimMinute',
            'dim_month': 'dimMonth',
            'dim_second': 'dimSecond',
            'dim_year': 'dimYear',
            'end_time': 'endTime',
            'id': 'id',
            'length': 'length',
            'media_item': 'mediaItem',
            'name': 'name',
            'seq': 'seq',
            'start_time': 'startTime'
        }

        self._block_id = block_id
        self._campaings_id = campaings_id
        self._dim_day = dim_day
        self._dim_hour = dim_hour
        self._dim_minute = dim_minute
        self._dim_month = dim_month
        self._dim_second = dim_second
        self._dim_year = dim_year
        self._end_time = end_time
        self._id = id
        self._length = length
        self._media_item = media_item
        self._name = name
        self._seq = seq
        self._start_time = start_time

    @property
    def block_id(self):
        """
        Gets the block_id of this SchEmissionPT.

        :return: The block_id of this SchEmissionPT.
        :rtype: int
        """
        return self._block_id

    @block_id.setter
    def block_id(self, block_id):
        """
        Sets the block_id of this SchEmissionPT.

        :param block_id: The block_id of this SchEmissionPT.
        :type: int
        """

        self._block_id = block_id

    @property
    def campaings_id(self):
        """
        Gets the campaings_id of this SchEmissionPT.

        :return: The campaings_id of this SchEmissionPT.
        :rtype: int
        """
        return self._campaings_id

    @campaings_id.setter
    def campaings_id(self, campaings_id):
        """
        Sets the campaings_id of this SchEmissionPT.

        :param campaings_id: The campaings_id of this SchEmissionPT.
        :type: int
        """

        self._campaings_id = campaings_id

    @property
    def dim_day(self):
        """
        Gets the dim_day of this SchEmissionPT.

        :return: The dim_day of this SchEmissionPT.
        :rtype: int
        """
        return self._dim_day

    @dim_day.setter
    def dim_day(self, dim_day):
        """
        Sets the dim_day of this SchEmissionPT.

        :param dim_day: The dim_day of this SchEmissionPT.
        :type: int
        """

        self._dim_day = dim_day

    @property
    def dim_hour(self):
        """
        Gets the dim_hour of this SchEmissionPT.

        :return: The dim_hour of this SchEmissionPT.
        :rtype: int
        """
        return self._dim_hour

    @dim_hour.setter
    def dim_hour(self, dim_hour):
        """
        Sets the dim_hour of this SchEmissionPT.

        :param dim_hour: The dim_hour of this SchEmissionPT.
        :type: int
        """

        self._dim_hour = dim_hour

    @property
    def dim_minute(self):
        """
        Gets the dim_minute of this SchEmissionPT.

        :return: The dim_minute of this SchEmissionPT.
        :rtype: int
        """
        return self._dim_minute

    @dim_minute.setter
    def dim_minute(self, dim_minute):
        """
        Sets the dim_minute of this SchEmissionPT.

        :param dim_minute: The dim_minute of this SchEmissionPT.
        :type: int
        """

        self._dim_minute = dim_minute

    @property
    def dim_month(self):
        """
        Gets the dim_month of this SchEmissionPT.

        :return: The dim_month of this SchEmissionPT.
        :rtype: int
        """
        return self._dim_month

    @dim_month.setter
    def dim_month(self, dim_month):
        """
        Sets the dim_month of this SchEmissionPT.

        :param dim_month: The dim_month of this SchEmissionPT.
        :type: int
        """

        self._dim_month = dim_month

    @property
    def dim_second(self):
        """
        Gets the dim_second of this SchEmissionPT.

        :return: The dim_second of this SchEmissionPT.
        :rtype: int
        """
        return self._dim_second

    @dim_second.setter
    def dim_second(self, dim_second):
        """
        Sets the dim_second of this SchEmissionPT.

        :param dim_second: The dim_second of this SchEmissionPT.
        :type: int
        """

        self._dim_second = dim_second

    @property
    def dim_year(self):
        """
        Gets the dim_year of this SchEmissionPT.

        :return: The dim_year of this SchEmissionPT.
        :rtype: int
        """
        return self._dim_year

    @dim_year.setter
    def dim_year(self, dim_year):
        """
        Sets the dim_year of this SchEmissionPT.

        :param dim_year: The dim_year of this SchEmissionPT.
        :type: int
        """

        self._dim_year = dim_year

    @property
    def end_time(self):
        """
        Gets the end_time of this SchEmissionPT.

        :return: The end_time of this SchEmissionPT.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this SchEmissionPT.

        :param end_time: The end_time of this SchEmissionPT.
        :type: datetime
        """

        self._end_time = end_time

    @property
    def id(self):
        """
        Gets the id of this SchEmissionPT.

        :return: The id of this SchEmissionPT.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SchEmissionPT.

        :param id: The id of this SchEmissionPT.
        :type: int
        """

        self._id = id

    @property
    def length(self):
        """
        Gets the length of this SchEmissionPT.

        :return: The length of this SchEmissionPT.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """
        Sets the length of this SchEmissionPT.

        :param length: The length of this SchEmissionPT.
        :type: int
        """

        self._length = length

    @property
    def media_item(self):
        """
        Gets the media_item of this SchEmissionPT.

        :return: The media_item of this SchEmissionPT.
        :rtype: LibItemPT
        """
        return self._media_item

    @media_item.setter
    def media_item(self, media_item):
        """
        Sets the media_item of this SchEmissionPT.

        :param media_item: The media_item of this SchEmissionPT.
        :type: LibItemPT
        """

        self._media_item = media_item

    @property
    def name(self):
        """
        Gets the name of this SchEmissionPT.

        :return: The name of this SchEmissionPT.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SchEmissionPT.

        :param name: The name of this SchEmissionPT.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def seq(self):
        """
        Gets the seq of this SchEmissionPT.

        :return: The seq of this SchEmissionPT.
        :rtype: int
        """
        return self._seq

    @seq.setter
    def seq(self, seq):
        """
        Sets the seq of this SchEmissionPT.

        :param seq: The seq of this SchEmissionPT.
        :type: int
        """
        if seq is None:
            raise ValueError("Invalid value for `seq`, must not be `None`")

        self._seq = seq

    @property
    def start_time(self):
        """
        Gets the start_time of this SchEmissionPT.

        :return: The start_time of this SchEmissionPT.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this SchEmissionPT.

        :param start_time: The start_time of this SchEmissionPT.
        :type: datetime
        """

        self._start_time = start_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SchEmissionPT):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
