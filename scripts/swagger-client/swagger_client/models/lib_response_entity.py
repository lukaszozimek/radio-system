# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LibResponseEntity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, body=None, status_code=None, status_code_value=None):
        """
        LibResponseEntity - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'body': 'object',
            'status_code': 'str',
            'status_code_value': 'int'
        }

        self.attribute_map = {
            'body': 'body',
            'status_code': 'statusCode',
            'status_code_value': 'statusCodeValue'
        }

        self._body = body
        self._status_code = status_code
        self._status_code_value = status_code_value

    @property
    def body(self):
        """
        Gets the body of this LibResponseEntity.

        :return: The body of this LibResponseEntity.
        :rtype: object
        """
        return self._body

    @body.setter
    def body(self, body):
        """
        Sets the body of this LibResponseEntity.

        :param body: The body of this LibResponseEntity.
        :type: object
        """

        self._body = body

    @property
    def status_code(self):
        """
        Gets the status_code of this LibResponseEntity.

        :return: The status_code of this LibResponseEntity.
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """
        Sets the status_code of this LibResponseEntity.

        :param status_code: The status_code of this LibResponseEntity.
        :type: str
        """
        allowed_values = ["100"]
        if status_code not in allowed_values:
            raise ValueError(
                "Invalid value for `status_code` ({0}), must be one of {1}"
                .format(status_code, allowed_values)
            )

        self._status_code = status_code

    @property
    def status_code_value(self):
        """
        Gets the status_code_value of this LibResponseEntity.

        :return: The status_code_value of this LibResponseEntity.
        :rtype: int
        """
        return self._status_code_value

    @status_code_value.setter
    def status_code_value(self, status_code_value):
        """
        Sets the status_code_value of this LibResponseEntity.

        :param status_code_value: The status_code_value of this LibResponseEntity.
        :type: int
        """

        self._status_code_value = status_code_value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LibResponseEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
