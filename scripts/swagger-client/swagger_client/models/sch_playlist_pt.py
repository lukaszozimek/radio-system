# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SchPlaylistPT(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, blocks=None, channel_id=None, date=None, dim_day=None, dim_month=None, dim_year=None, id=None):
        """
        SchPlaylistPT - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'blocks': 'list[SchBlockPT]',
            'channel_id': 'int',
            'date': 'date',
            'dim_day': 'int',
            'dim_month': 'int',
            'dim_year': 'int',
            'id': 'int'
        }

        self.attribute_map = {
            'blocks': 'blocks',
            'channel_id': 'channelId',
            'date': 'date',
            'dim_day': 'dimDay',
            'dim_month': 'dimMonth',
            'dim_year': 'dimYear',
            'id': 'id'
        }

        self._blocks = blocks
        self._channel_id = channel_id
        self._date = date
        self._dim_day = dim_day
        self._dim_month = dim_month
        self._dim_year = dim_year
        self._id = id

    @property
    def blocks(self):
        """
        Gets the blocks of this SchPlaylistPT.

        :return: The blocks of this SchPlaylistPT.
        :rtype: list[SchBlockPT]
        """
        return self._blocks

    @blocks.setter
    def blocks(self, blocks):
        """
        Sets the blocks of this SchPlaylistPT.

        :param blocks: The blocks of this SchPlaylistPT.
        :type: list[SchBlockPT]
        """

        self._blocks = blocks

    @property
    def channel_id(self):
        """
        Gets the channel_id of this SchPlaylistPT.

        :return: The channel_id of this SchPlaylistPT.
        :rtype: int
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """
        Sets the channel_id of this SchPlaylistPT.

        :param channel_id: The channel_id of this SchPlaylistPT.
        :type: int
        """

        self._channel_id = channel_id

    @property
    def date(self):
        """
        Gets the date of this SchPlaylistPT.

        :return: The date of this SchPlaylistPT.
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """
        Sets the date of this SchPlaylistPT.

        :param date: The date of this SchPlaylistPT.
        :type: date
        """
        if date is None:
            raise ValueError("Invalid value for `date`, must not be `None`")

        self._date = date

    @property
    def dim_day(self):
        """
        Gets the dim_day of this SchPlaylistPT.

        :return: The dim_day of this SchPlaylistPT.
        :rtype: int
        """
        return self._dim_day

    @dim_day.setter
    def dim_day(self, dim_day):
        """
        Sets the dim_day of this SchPlaylistPT.

        :param dim_day: The dim_day of this SchPlaylistPT.
        :type: int
        """

        self._dim_day = dim_day

    @property
    def dim_month(self):
        """
        Gets the dim_month of this SchPlaylistPT.

        :return: The dim_month of this SchPlaylistPT.
        :rtype: int
        """
        return self._dim_month

    @dim_month.setter
    def dim_month(self, dim_month):
        """
        Sets the dim_month of this SchPlaylistPT.

        :param dim_month: The dim_month of this SchPlaylistPT.
        :type: int
        """

        self._dim_month = dim_month

    @property
    def dim_year(self):
        """
        Gets the dim_year of this SchPlaylistPT.

        :return: The dim_year of this SchPlaylistPT.
        :rtype: int
        """
        return self._dim_year

    @dim_year.setter
    def dim_year(self, dim_year):
        """
        Sets the dim_year of this SchPlaylistPT.

        :param dim_year: The dim_year of this SchPlaylistPT.
        :type: int
        """

        self._dim_year = dim_year

    @property
    def id(self):
        """
        Gets the id of this SchPlaylistPT.

        :return: The id of this SchPlaylistPT.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SchPlaylistPT.

        :param id: The id of this SchPlaylistPT.
        :type: int
        """

        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SchPlaylistPT):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
