# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CrmLeadPT(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, adress=None, area=None, description=None, id=None, industry=None, lead_owner=None, name=None, owner=None, person=None, shortname=None, source=None, status=None, tasks=None):
        """
        CrmLeadPT - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'adress': 'CoreAddressPT',
            'area': 'CoreAreaPT',
            'description': 'str',
            'id': 'int',
            'industry': 'ConfIndustryPT',
            'lead_owner': 'CoreUserPT',
            'name': 'str',
            'owner': 'CoreUserPT',
            'person': 'TraCustomerPersonPT',
            'shortname': 'str',
            'source': 'ConfLeadSourcePT',
            'status': 'ConfLeadStatusPT',
            'tasks': 'list[CrmTaskPT]'
        }

        self.attribute_map = {
            'adress': 'adress',
            'area': 'area',
            'description': 'description',
            'id': 'id',
            'industry': 'industry',
            'lead_owner': 'leadOwner',
            'name': 'name',
            'owner': 'owner',
            'person': 'person',
            'shortname': 'shortname',
            'source': 'source',
            'status': 'status',
            'tasks': 'tasks'
        }

        self._adress = adress
        self._area = area
        self._description = description
        self._id = id
        self._industry = industry
        self._lead_owner = lead_owner
        self._name = name
        self._owner = owner
        self._person = person
        self._shortname = shortname
        self._source = source
        self._status = status
        self._tasks = tasks

    @property
    def adress(self):
        """
        Gets the adress of this CrmLeadPT.

        :return: The adress of this CrmLeadPT.
        :rtype: CoreAddressPT
        """
        return self._adress

    @adress.setter
    def adress(self, adress):
        """
        Sets the adress of this CrmLeadPT.

        :param adress: The adress of this CrmLeadPT.
        :type: CoreAddressPT
        """

        self._adress = adress

    @property
    def area(self):
        """
        Gets the area of this CrmLeadPT.

        :return: The area of this CrmLeadPT.
        :rtype: CoreAreaPT
        """
        return self._area

    @area.setter
    def area(self, area):
        """
        Sets the area of this CrmLeadPT.

        :param area: The area of this CrmLeadPT.
        :type: CoreAreaPT
        """

        self._area = area

    @property
    def description(self):
        """
        Gets the description of this CrmLeadPT.

        :return: The description of this CrmLeadPT.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this CrmLeadPT.

        :param description: The description of this CrmLeadPT.
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """
        Gets the id of this CrmLeadPT.

        :return: The id of this CrmLeadPT.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CrmLeadPT.

        :param id: The id of this CrmLeadPT.
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def industry(self):
        """
        Gets the industry of this CrmLeadPT.

        :return: The industry of this CrmLeadPT.
        :rtype: ConfIndustryPT
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """
        Sets the industry of this CrmLeadPT.

        :param industry: The industry of this CrmLeadPT.
        :type: ConfIndustryPT
        """

        self._industry = industry

    @property
    def lead_owner(self):
        """
        Gets the lead_owner of this CrmLeadPT.

        :return: The lead_owner of this CrmLeadPT.
        :rtype: CoreUserPT
        """
        return self._lead_owner

    @lead_owner.setter
    def lead_owner(self, lead_owner):
        """
        Sets the lead_owner of this CrmLeadPT.

        :param lead_owner: The lead_owner of this CrmLeadPT.
        :type: CoreUserPT
        """

        self._lead_owner = lead_owner

    @property
    def name(self):
        """
        Gets the name of this CrmLeadPT.

        :return: The name of this CrmLeadPT.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CrmLeadPT.

        :param name: The name of this CrmLeadPT.
        :type: str
        """

        self._name = name

    @property
    def owner(self):
        """
        Gets the owner of this CrmLeadPT.

        :return: The owner of this CrmLeadPT.
        :rtype: CoreUserPT
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this CrmLeadPT.

        :param owner: The owner of this CrmLeadPT.
        :type: CoreUserPT
        """

        self._owner = owner

    @property
    def person(self):
        """
        Gets the person of this CrmLeadPT.

        :return: The person of this CrmLeadPT.
        :rtype: TraCustomerPersonPT
        """
        return self._person

    @person.setter
    def person(self, person):
        """
        Sets the person of this CrmLeadPT.

        :param person: The person of this CrmLeadPT.
        :type: TraCustomerPersonPT
        """

        self._person = person

    @property
    def shortname(self):
        """
        Gets the shortname of this CrmLeadPT.

        :return: The shortname of this CrmLeadPT.
        :rtype: str
        """
        return self._shortname

    @shortname.setter
    def shortname(self, shortname):
        """
        Sets the shortname of this CrmLeadPT.

        :param shortname: The shortname of this CrmLeadPT.
        :type: str
        """

        self._shortname = shortname

    @property
    def source(self):
        """
        Gets the source of this CrmLeadPT.

        :return: The source of this CrmLeadPT.
        :rtype: ConfLeadSourcePT
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this CrmLeadPT.

        :param source: The source of this CrmLeadPT.
        :type: ConfLeadSourcePT
        """

        self._source = source

    @property
    def status(self):
        """
        Gets the status of this CrmLeadPT.

        :return: The status of this CrmLeadPT.
        :rtype: ConfLeadStatusPT
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this CrmLeadPT.

        :param status: The status of this CrmLeadPT.
        :type: ConfLeadStatusPT
        """

        self._status = status

    @property
    def tasks(self):
        """
        Gets the tasks of this CrmLeadPT.

        :return: The tasks of this CrmLeadPT.
        :rtype: list[CrmTaskPT]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """
        Sets the tasks of this CrmLeadPT.

        :param tasks: The tasks of this CrmLeadPT.
        :type: list[CrmTaskPT]
        """

        self._tasks = tasks

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CrmLeadPT):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
