# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TraPrice(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, base_length=None, currency=None, id=None, name=None, network=None, price=None, price_alternative=None, valid_from=None, valid_to=None):
        """
        TraPrice - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'base_length': 'int',
            'currency': 'CorCurrency',
            'id': 'int',
            'name': 'str',
            'network': 'CorNetwork',
            'price': 'float',
            'price_alternative': 'float',
            'valid_from': 'date',
            'valid_to': 'date'
        }

        self.attribute_map = {
            'base_length': 'baseLength',
            'currency': 'currency',
            'id': 'id',
            'name': 'name',
            'network': 'network',
            'price': 'price',
            'price_alternative': 'priceAlternative',
            'valid_from': 'validFrom',
            'valid_to': 'validTo'
        }

        self._base_length = base_length
        self._currency = currency
        self._id = id
        self._name = name
        self._network = network
        self._price = price
        self._price_alternative = price_alternative
        self._valid_from = valid_from
        self._valid_to = valid_to

    @property
    def base_length(self):
        """
        Gets the base_length of this TraPrice.

        :return: The base_length of this TraPrice.
        :rtype: int
        """
        return self._base_length

    @base_length.setter
    def base_length(self, base_length):
        """
        Sets the base_length of this TraPrice.

        :param base_length: The base_length of this TraPrice.
        :type: int
        """

        self._base_length = base_length

    @property
    def currency(self):
        """
        Gets the currency of this TraPrice.

        :return: The currency of this TraPrice.
        :rtype: CorCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this TraPrice.

        :param currency: The currency of this TraPrice.
        :type: CorCurrency
        """

        self._currency = currency

    @property
    def id(self):
        """
        Gets the id of this TraPrice.

        :return: The id of this TraPrice.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TraPrice.

        :param id: The id of this TraPrice.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this TraPrice.

        :return: The name of this TraPrice.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this TraPrice.

        :param name: The name of this TraPrice.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def network(self):
        """
        Gets the network of this TraPrice.

        :return: The network of this TraPrice.
        :rtype: CorNetwork
        """
        return self._network

    @network.setter
    def network(self, network):
        """
        Sets the network of this TraPrice.

        :param network: The network of this TraPrice.
        :type: CorNetwork
        """

        self._network = network

    @property
    def price(self):
        """
        Gets the price of this TraPrice.

        :return: The price of this TraPrice.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this TraPrice.

        :param price: The price of this TraPrice.
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def price_alternative(self):
        """
        Gets the price_alternative of this TraPrice.

        :return: The price_alternative of this TraPrice.
        :rtype: float
        """
        return self._price_alternative

    @price_alternative.setter
    def price_alternative(self, price_alternative):
        """
        Sets the price_alternative of this TraPrice.

        :param price_alternative: The price_alternative of this TraPrice.
        :type: float
        """
        if price_alternative is None:
            raise ValueError("Invalid value for `price_alternative`, must not be `None`")

        self._price_alternative = price_alternative

    @property
    def valid_from(self):
        """
        Gets the valid_from of this TraPrice.

        :return: The valid_from of this TraPrice.
        :rtype: date
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """
        Sets the valid_from of this TraPrice.

        :param valid_from: The valid_from of this TraPrice.
        :type: date
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """
        Gets the valid_to of this TraPrice.

        :return: The valid_to of this TraPrice.
        :rtype: date
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """
        Sets the valid_to of this TraPrice.

        :param valid_to: The valid_to of this TraPrice.
        :type: date
        """

        self._valid_to = valid_to

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TraPrice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
