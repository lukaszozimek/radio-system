# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LibAlbumPT(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, album_type=None, artist_id=None, cover_id=None, description=None, id=None, label_id=None, name=None, network_id=None, release_date=None):
        """
        LibAlbumPT - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'album_type': 'str',
            'artist_id': 'int',
            'cover_id': 'int',
            'description': 'str',
            'id': 'int',
            'label_id': 'int',
            'name': 'str',
            'network_id': 'int',
            'release_date': 'date'
        }

        self.attribute_map = {
            'album_type': 'albumType',
            'artist_id': 'artistId',
            'cover_id': 'coverId',
            'description': 'description',
            'id': 'id',
            'label_id': 'labelId',
            'name': 'name',
            'network_id': 'networkId',
            'release_date': 'releaseDate'
        }

        self._album_type = album_type
        self._artist_id = artist_id
        self._cover_id = cover_id
        self._description = description
        self._id = id
        self._label_id = label_id
        self._name = name
        self._network_id = network_id
        self._release_date = release_date

    @property
    def album_type(self):
        """
        Gets the album_type of this LibAlbumPT.

        :return: The album_type of this LibAlbumPT.
        :rtype: str
        """
        return self._album_type

    @album_type.setter
    def album_type(self, album_type):
        """
        Sets the album_type of this LibAlbumPT.

        :param album_type: The album_type of this LibAlbumPT.
        :type: str
        """
        allowed_values = ["AT_ALBUM", "AT_SINGLE", "AT_COMPILATION", "AT_OTHER"]
        if album_type not in allowed_values:
            raise ValueError(
                "Invalid value for `album_type` ({0}), must be one of {1}"
                .format(album_type, allowed_values)
            )

        self._album_type = album_type

    @property
    def artist_id(self):
        """
        Gets the artist_id of this LibAlbumPT.

        :return: The artist_id of this LibAlbumPT.
        :rtype: int
        """
        return self._artist_id

    @artist_id.setter
    def artist_id(self, artist_id):
        """
        Sets the artist_id of this LibAlbumPT.

        :param artist_id: The artist_id of this LibAlbumPT.
        :type: int
        """

        self._artist_id = artist_id

    @property
    def cover_id(self):
        """
        Gets the cover_id of this LibAlbumPT.

        :return: The cover_id of this LibAlbumPT.
        :rtype: int
        """
        return self._cover_id

    @cover_id.setter
    def cover_id(self, cover_id):
        """
        Sets the cover_id of this LibAlbumPT.

        :param cover_id: The cover_id of this LibAlbumPT.
        :type: int
        """

        self._cover_id = cover_id

    @property
    def description(self):
        """
        Gets the description of this LibAlbumPT.

        :return: The description of this LibAlbumPT.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this LibAlbumPT.

        :param description: The description of this LibAlbumPT.
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """
        Gets the id of this LibAlbumPT.

        :return: The id of this LibAlbumPT.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LibAlbumPT.

        :param id: The id of this LibAlbumPT.
        :type: int
        """

        self._id = id

    @property
    def label_id(self):
        """
        Gets the label_id of this LibAlbumPT.

        :return: The label_id of this LibAlbumPT.
        :rtype: int
        """
        return self._label_id

    @label_id.setter
    def label_id(self, label_id):
        """
        Sets the label_id of this LibAlbumPT.

        :param label_id: The label_id of this LibAlbumPT.
        :type: int
        """

        self._label_id = label_id

    @property
    def name(self):
        """
        Gets the name of this LibAlbumPT.

        :return: The name of this LibAlbumPT.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LibAlbumPT.

        :param name: The name of this LibAlbumPT.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def network_id(self):
        """
        Gets the network_id of this LibAlbumPT.

        :return: The network_id of this LibAlbumPT.
        :rtype: int
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """
        Sets the network_id of this LibAlbumPT.

        :param network_id: The network_id of this LibAlbumPT.
        :type: int
        """

        self._network_id = network_id

    @property
    def release_date(self):
        """
        Gets the release_date of this LibAlbumPT.

        :return: The release_date of this LibAlbumPT.
        :rtype: date
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """
        Sets the release_date of this LibAlbumPT.

        :param release_date: The release_date of this LibAlbumPT.
        :type: date
        """

        self._release_date = release_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LibAlbumPT):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
