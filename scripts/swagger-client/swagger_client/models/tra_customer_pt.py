# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TraCustomerPT(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, account=None, adress=None, area=None, discount=None, id=None, id_number1=None, id_number2=None, industry=None, name=None, network_id=None, payment_date=None, payment_delay=None, persons=None, range=None, short_name=None, size=None, vat_number=None):
        """
        TraCustomerPT - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'account': 'CoreUserPT',
            'adress': 'CoreAddressPT',
            'area': 'CoreAreaPT',
            'discount': 'TraDiscount',
            'id': 'int',
            'id_number1': 'str',
            'id_number2': 'str',
            'industry': 'ConfIndustryPT',
            'name': 'str',
            'network_id': 'CoreNetworkPT',
            'payment_date': 'int',
            'payment_delay': 'int',
            'persons': 'TraCustomerPersonPT',
            'range': 'CoreRangePT',
            'short_name': 'str',
            'size': 'CoreSizePT',
            'vat_number': 'str'
        }

        self.attribute_map = {
            'account': 'account',
            'adress': 'adress',
            'area': 'area',
            'discount': 'discount',
            'id': 'id',
            'id_number1': 'idNumber1',
            'id_number2': 'idNumber2',
            'industry': 'industry',
            'name': 'name',
            'network_id': 'networkId',
            'payment_date': 'paymentDate',
            'payment_delay': 'paymentDelay',
            'persons': 'persons',
            'range': 'range',
            'short_name': 'shortName',
            'size': 'size',
            'vat_number': 'vatNumber'
        }

        self._account = account
        self._adress = adress
        self._area = area
        self._discount = discount
        self._id = id
        self._id_number1 = id_number1
        self._id_number2 = id_number2
        self._industry = industry
        self._name = name
        self._network_id = network_id
        self._payment_date = payment_date
        self._payment_delay = payment_delay
        self._persons = persons
        self._range = range
        self._short_name = short_name
        self._size = size
        self._vat_number = vat_number

    @property
    def account(self):
        """
        Gets the account of this TraCustomerPT.

        :return: The account of this TraCustomerPT.
        :rtype: CoreUserPT
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this TraCustomerPT.

        :param account: The account of this TraCustomerPT.
        :type: CoreUserPT
        """

        self._account = account

    @property
    def adress(self):
        """
        Gets the adress of this TraCustomerPT.

        :return: The adress of this TraCustomerPT.
        :rtype: CoreAddressPT
        """
        return self._adress

    @adress.setter
    def adress(self, adress):
        """
        Sets the adress of this TraCustomerPT.

        :param adress: The adress of this TraCustomerPT.
        :type: CoreAddressPT
        """

        self._adress = adress

    @property
    def area(self):
        """
        Gets the area of this TraCustomerPT.

        :return: The area of this TraCustomerPT.
        :rtype: CoreAreaPT
        """
        return self._area

    @area.setter
    def area(self, area):
        """
        Sets the area of this TraCustomerPT.

        :param area: The area of this TraCustomerPT.
        :type: CoreAreaPT
        """

        self._area = area

    @property
    def discount(self):
        """
        Gets the discount of this TraCustomerPT.

        :return: The discount of this TraCustomerPT.
        :rtype: TraDiscount
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """
        Sets the discount of this TraCustomerPT.

        :param discount: The discount of this TraCustomerPT.
        :type: TraDiscount
        """

        self._discount = discount

    @property
    def id(self):
        """
        Gets the id of this TraCustomerPT.

        :return: The id of this TraCustomerPT.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TraCustomerPT.

        :param id: The id of this TraCustomerPT.
        :type: int
        """

        self._id = id

    @property
    def id_number1(self):
        """
        Gets the id_number1 of this TraCustomerPT.

        :return: The id_number1 of this TraCustomerPT.
        :rtype: str
        """
        return self._id_number1

    @id_number1.setter
    def id_number1(self, id_number1):
        """
        Sets the id_number1 of this TraCustomerPT.

        :param id_number1: The id_number1 of this TraCustomerPT.
        :type: str
        """

        self._id_number1 = id_number1

    @property
    def id_number2(self):
        """
        Gets the id_number2 of this TraCustomerPT.

        :return: The id_number2 of this TraCustomerPT.
        :rtype: str
        """
        return self._id_number2

    @id_number2.setter
    def id_number2(self, id_number2):
        """
        Sets the id_number2 of this TraCustomerPT.

        :param id_number2: The id_number2 of this TraCustomerPT.
        :type: str
        """

        self._id_number2 = id_number2

    @property
    def industry(self):
        """
        Gets the industry of this TraCustomerPT.

        :return: The industry of this TraCustomerPT.
        :rtype: ConfIndustryPT
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """
        Sets the industry of this TraCustomerPT.

        :param industry: The industry of this TraCustomerPT.
        :type: ConfIndustryPT
        """

        self._industry = industry

    @property
    def name(self):
        """
        Gets the name of this TraCustomerPT.

        :return: The name of this TraCustomerPT.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this TraCustomerPT.

        :param name: The name of this TraCustomerPT.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def network_id(self):
        """
        Gets the network_id of this TraCustomerPT.

        :return: The network_id of this TraCustomerPT.
        :rtype: CoreNetworkPT
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """
        Sets the network_id of this TraCustomerPT.

        :param network_id: The network_id of this TraCustomerPT.
        :type: CoreNetworkPT
        """

        self._network_id = network_id

    @property
    def payment_date(self):
        """
        Gets the payment_date of this TraCustomerPT.

        :return: The payment_date of this TraCustomerPT.
        :rtype: int
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """
        Sets the payment_date of this TraCustomerPT.

        :param payment_date: The payment_date of this TraCustomerPT.
        :type: int
        """

        self._payment_date = payment_date

    @property
    def payment_delay(self):
        """
        Gets the payment_delay of this TraCustomerPT.

        :return: The payment_delay of this TraCustomerPT.
        :rtype: int
        """
        return self._payment_delay

    @payment_delay.setter
    def payment_delay(self, payment_delay):
        """
        Sets the payment_delay of this TraCustomerPT.

        :param payment_delay: The payment_delay of this TraCustomerPT.
        :type: int
        """

        self._payment_delay = payment_delay

    @property
    def persons(self):
        """
        Gets the persons of this TraCustomerPT.

        :return: The persons of this TraCustomerPT.
        :rtype: TraCustomerPersonPT
        """
        return self._persons

    @persons.setter
    def persons(self, persons):
        """
        Sets the persons of this TraCustomerPT.

        :param persons: The persons of this TraCustomerPT.
        :type: TraCustomerPersonPT
        """

        self._persons = persons

    @property
    def range(self):
        """
        Gets the range of this TraCustomerPT.

        :return: The range of this TraCustomerPT.
        :rtype: CoreRangePT
        """
        return self._range

    @range.setter
    def range(self, range):
        """
        Sets the range of this TraCustomerPT.

        :param range: The range of this TraCustomerPT.
        :type: CoreRangePT
        """

        self._range = range

    @property
    def short_name(self):
        """
        Gets the short_name of this TraCustomerPT.

        :return: The short_name of this TraCustomerPT.
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """
        Sets the short_name of this TraCustomerPT.

        :param short_name: The short_name of this TraCustomerPT.
        :type: str
        """

        self._short_name = short_name

    @property
    def size(self):
        """
        Gets the size of this TraCustomerPT.

        :return: The size of this TraCustomerPT.
        :rtype: CoreSizePT
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this TraCustomerPT.

        :param size: The size of this TraCustomerPT.
        :type: CoreSizePT
        """

        self._size = size

    @property
    def vat_number(self):
        """
        Gets the vat_number of this TraCustomerPT.

        :return: The vat_number of this TraCustomerPT.
        :rtype: str
        """
        return self._vat_number

    @vat_number.setter
    def vat_number(self, vat_number):
        """
        Sets the vat_number of this TraCustomerPT.

        :param vat_number: The vat_number of this TraCustomerPT.
        :type: str
        """

        self._vat_number = vat_number

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TraCustomerPT):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
