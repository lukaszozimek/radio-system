# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ProfileInfoVM(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, active_profiles=None, ribbon_env=None):
        """
        ProfileInfoVM - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'active_profiles': 'list[str]',
            'ribbon_env': 'str'
        }

        self.attribute_map = {
            'active_profiles': 'activeProfiles',
            'ribbon_env': 'ribbonEnv'
        }

        self._active_profiles = active_profiles
        self._ribbon_env = ribbon_env

    @property
    def active_profiles(self):
        """
        Gets the active_profiles of this ProfileInfoVM.

        :return: The active_profiles of this ProfileInfoVM.
        :rtype: list[str]
        """
        return self._active_profiles

    @active_profiles.setter
    def active_profiles(self, active_profiles):
        """
        Sets the active_profiles of this ProfileInfoVM.

        :param active_profiles: The active_profiles of this ProfileInfoVM.
        :type: list[str]
        """

        self._active_profiles = active_profiles

    @property
    def ribbon_env(self):
        """
        Gets the ribbon_env of this ProfileInfoVM.

        :return: The ribbon_env of this ProfileInfoVM.
        :rtype: str
        """
        return self._ribbon_env

    @ribbon_env.setter
    def ribbon_env(self, ribbon_env):
        """
        Sets the ribbon_env of this ProfileInfoVM.

        :param ribbon_env: The ribbon_env of this ProfileInfoVM.
        :type: str
        """

        self._ribbon_env = ribbon_env

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ProfileInfoVM):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
