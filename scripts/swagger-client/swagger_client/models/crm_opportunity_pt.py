# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CrmOpportunityPT(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, close_date=None, contact=None, id=None, last_try=None, name=None, opportunity_owner=None, propability=None, stage=None, tasks=None):
        """
        CrmOpportunityPT - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'close_date': 'str',
            'contact': 'CrmContactPT',
            'id': 'int',
            'last_try': 'str',
            'name': 'str',
            'opportunity_owner': 'CoreUserPT',
            'propability': 'int',
            'stage': 'ConfCrmStagePT',
            'tasks': 'list[CrmTaskPT]'
        }

        self.attribute_map = {
            'close_date': 'closeDate',
            'contact': 'contact',
            'id': 'id',
            'last_try': 'lastTry',
            'name': 'name',
            'opportunity_owner': 'opportunityOwner',
            'propability': 'propability',
            'stage': 'stage',
            'tasks': 'tasks'
        }

        self._close_date = close_date
        self._contact = contact
        self._id = id
        self._last_try = last_try
        self._name = name
        self._opportunity_owner = opportunity_owner
        self._propability = propability
        self._stage = stage
        self._tasks = tasks

    @property
    def close_date(self):
        """
        Gets the close_date of this CrmOpportunityPT.

        :return: The close_date of this CrmOpportunityPT.
        :rtype: str
        """
        return self._close_date

    @close_date.setter
    def close_date(self, close_date):
        """
        Sets the close_date of this CrmOpportunityPT.

        :param close_date: The close_date of this CrmOpportunityPT.
        :type: str
        """

        self._close_date = close_date

    @property
    def contact(self):
        """
        Gets the contact of this CrmOpportunityPT.

        :return: The contact of this CrmOpportunityPT.
        :rtype: CrmContactPT
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """
        Sets the contact of this CrmOpportunityPT.

        :param contact: The contact of this CrmOpportunityPT.
        :type: CrmContactPT
        """

        self._contact = contact

    @property
    def id(self):
        """
        Gets the id of this CrmOpportunityPT.

        :return: The id of this CrmOpportunityPT.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CrmOpportunityPT.

        :param id: The id of this CrmOpportunityPT.
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_try(self):
        """
        Gets the last_try of this CrmOpportunityPT.

        :return: The last_try of this CrmOpportunityPT.
        :rtype: str
        """
        return self._last_try

    @last_try.setter
    def last_try(self, last_try):
        """
        Sets the last_try of this CrmOpportunityPT.

        :param last_try: The last_try of this CrmOpportunityPT.
        :type: str
        """

        self._last_try = last_try

    @property
    def name(self):
        """
        Gets the name of this CrmOpportunityPT.

        :return: The name of this CrmOpportunityPT.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CrmOpportunityPT.

        :param name: The name of this CrmOpportunityPT.
        :type: str
        """

        self._name = name

    @property
    def opportunity_owner(self):
        """
        Gets the opportunity_owner of this CrmOpportunityPT.

        :return: The opportunity_owner of this CrmOpportunityPT.
        :rtype: CoreUserPT
        """
        return self._opportunity_owner

    @opportunity_owner.setter
    def opportunity_owner(self, opportunity_owner):
        """
        Sets the opportunity_owner of this CrmOpportunityPT.

        :param opportunity_owner: The opportunity_owner of this CrmOpportunityPT.
        :type: CoreUserPT
        """

        self._opportunity_owner = opportunity_owner

    @property
    def propability(self):
        """
        Gets the propability of this CrmOpportunityPT.

        :return: The propability of this CrmOpportunityPT.
        :rtype: int
        """
        return self._propability

    @propability.setter
    def propability(self, propability):
        """
        Sets the propability of this CrmOpportunityPT.

        :param propability: The propability of this CrmOpportunityPT.
        :type: int
        """

        self._propability = propability

    @property
    def stage(self):
        """
        Gets the stage of this CrmOpportunityPT.

        :return: The stage of this CrmOpportunityPT.
        :rtype: ConfCrmStagePT
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """
        Sets the stage of this CrmOpportunityPT.

        :param stage: The stage of this CrmOpportunityPT.
        :type: ConfCrmStagePT
        """

        self._stage = stage

    @property
    def tasks(self):
        """
        Gets the tasks of this CrmOpportunityPT.

        :return: The tasks of this CrmOpportunityPT.
        :rtype: list[CrmTaskPT]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """
        Sets the tasks of this CrmOpportunityPT.

        :param tasks: The tasks of this CrmOpportunityPT.
        :type: list[CrmTaskPT]
        """

        self._tasks = tasks

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CrmOpportunityPT):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
