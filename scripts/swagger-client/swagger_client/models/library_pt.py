# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LibraryPT(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, channels=None, counter=None, counter_type=None, description=None, id=None, index_length=None, library_type=None, name=None, network_id=None, prefix=None, shortcut=None, type=None, users=None):
        """
        LibraryPT - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'channels': 'list[CoreChannelPT]',
            'counter': 'int',
            'counter_type': 'str',
            'description': 'str',
            'id': 'int',
            'index_length': 'int',
            'library_type': 'str',
            'name': 'str',
            'network_id': 'int',
            'prefix': 'str',
            'shortcut': 'str',
            'type': 'str',
            'users': 'list[CoreUserPT]'
        }

        self.attribute_map = {
            'channels': 'channels',
            'counter': 'counter',
            'counter_type': 'counterType',
            'description': 'description',
            'id': 'id',
            'index_length': 'indexLength',
            'library_type': 'libraryType',
            'name': 'name',
            'network_id': 'networkId',
            'prefix': 'prefix',
            'shortcut': 'shortcut',
            'type': 'type',
            'users': 'users'
        }

        self._channels = channels
        self._counter = counter
        self._counter_type = counter_type
        self._description = description
        self._id = id
        self._index_length = index_length
        self._library_type = library_type
        self._name = name
        self._network_id = network_id
        self._prefix = prefix
        self._shortcut = shortcut
        self._type = type
        self._users = users

    @property
    def channels(self):
        """
        Gets the channels of this LibraryPT.

        :return: The channels of this LibraryPT.
        :rtype: list[CoreChannelPT]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """
        Sets the channels of this LibraryPT.

        :param channels: The channels of this LibraryPT.
        :type: list[CoreChannelPT]
        """

        self._channels = channels

    @property
    def counter(self):
        """
        Gets the counter of this LibraryPT.

        :return: The counter of this LibraryPT.
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """
        Sets the counter of this LibraryPT.

        :param counter: The counter of this LibraryPT.
        :type: int
        """

        self._counter = counter

    @property
    def counter_type(self):
        """
        Gets the counter_type of this LibraryPT.

        :return: The counter_type of this LibraryPT.
        :rtype: str
        """
        return self._counter_type

    @counter_type.setter
    def counter_type(self, counter_type):
        """
        Sets the counter_type of this LibraryPT.

        :param counter_type: The counter_type of this LibraryPT.
        :type: str
        """

        self._counter_type = counter_type

    @property
    def description(self):
        """
        Gets the description of this LibraryPT.

        :return: The description of this LibraryPT.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this LibraryPT.

        :param description: The description of this LibraryPT.
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """
        Gets the id of this LibraryPT.

        :return: The id of this LibraryPT.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LibraryPT.

        :param id: The id of this LibraryPT.
        :type: int
        """

        self._id = id

    @property
    def index_length(self):
        """
        Gets the index_length of this LibraryPT.

        :return: The index_length of this LibraryPT.
        :rtype: int
        """
        return self._index_length

    @index_length.setter
    def index_length(self, index_length):
        """
        Sets the index_length of this LibraryPT.

        :param index_length: The index_length of this LibraryPT.
        :type: int
        """

        self._index_length = index_length

    @property
    def library_type(self):
        """
        Gets the library_type of this LibraryPT.

        :return: The library_type of this LibraryPT.
        :rtype: str
        """
        return self._library_type

    @library_type.setter
    def library_type(self, library_type):
        """
        Sets the library_type of this LibraryPT.

        :param library_type: The library_type of this LibraryPT.
        :type: str
        """

        self._library_type = library_type

    @property
    def name(self):
        """
        Gets the name of this LibraryPT.

        :return: The name of this LibraryPT.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LibraryPT.

        :param name: The name of this LibraryPT.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def network_id(self):
        """
        Gets the network_id of this LibraryPT.

        :return: The network_id of this LibraryPT.
        :rtype: int
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """
        Sets the network_id of this LibraryPT.

        :param network_id: The network_id of this LibraryPT.
        :type: int
        """

        self._network_id = network_id

    @property
    def prefix(self):
        """
        Gets the prefix of this LibraryPT.

        :return: The prefix of this LibraryPT.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """
        Sets the prefix of this LibraryPT.

        :param prefix: The prefix of this LibraryPT.
        :type: str
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")

        self._prefix = prefix

    @property
    def shortcut(self):
        """
        Gets the shortcut of this LibraryPT.

        :return: The shortcut of this LibraryPT.
        :rtype: str
        """
        return self._shortcut

    @shortcut.setter
    def shortcut(self, shortcut):
        """
        Sets the shortcut of this LibraryPT.

        :param shortcut: The shortcut of this LibraryPT.
        :type: str
        """

        self._shortcut = shortcut

    @property
    def type(self):
        """
        Gets the type of this LibraryPT.

        :return: The type of this LibraryPT.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this LibraryPT.

        :param type: The type of this LibraryPT.
        :type: str
        """
        """
        allowed_values = ["LT_IMAGE", "LT_AUDIO", "LT_VIDEO", "LT_FILE"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )
        """
        self._type = type

    @property
    def users(self):
        """
        Gets the users of this LibraryPT.

        :return: The users of this LibraryPT.
        :rtype: list[CoreUserPT]
        """
        return self._users

    @users.setter
    def users(self, users):
        """
        Sets the users of this LibraryPT.

        :param users: The users of this LibraryPT.
        :type: list[CoreUserPT]
        """

        self._users = users

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LibraryPT):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
