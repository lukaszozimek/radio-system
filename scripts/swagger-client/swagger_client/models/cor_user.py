# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CorUser(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, activated=None, activationkey=None, createdby=None, createddate=None, email=None, firstname=None, id=None, imageurl=None, langkey=None, lastmodifiedby=None, lastmodifieddate=None, lastname=None, login=None, passwordhash=None, resetdate=None, resetkey=None):
        """
        CorUser - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'activated': 'bool',
            'activationkey': 'str',
            'createdby': 'str',
            'createddate': 'date',
            'email': 'str',
            'firstname': 'str',
            'id': 'int',
            'imageurl': 'str',
            'langkey': 'str',
            'lastmodifiedby': 'str',
            'lastmodifieddate': 'date',
            'lastname': 'str',
            'login': 'str',
            'passwordhash': 'str',
            'resetdate': 'datetime',
            'resetkey': 'str'
        }

        self.attribute_map = {
            'activated': 'activated',
            'activationkey': 'activationkey',
            'createdby': 'createdby',
            'createddate': 'createddate',
            'email': 'email',
            'firstname': 'firstname',
            'id': 'id',
            'imageurl': 'imageurl',
            'langkey': 'langkey',
            'lastmodifiedby': 'lastmodifiedby',
            'lastmodifieddate': 'lastmodifieddate',
            'lastname': 'lastname',
            'login': 'login',
            'passwordhash': 'passwordhash',
            'resetdate': 'resetdate',
            'resetkey': 'resetkey'
        }

        self._activated = activated
        self._activationkey = activationkey
        self._createdby = createdby
        self._createddate = createddate
        self._email = email
        self._firstname = firstname
        self._id = id
        self._imageurl = imageurl
        self._langkey = langkey
        self._lastmodifiedby = lastmodifiedby
        self._lastmodifieddate = lastmodifieddate
        self._lastname = lastname
        self._login = login
        self._passwordhash = passwordhash
        self._resetdate = resetdate
        self._resetkey = resetkey

    @property
    def activated(self):
        """
        Gets the activated of this CorUser.

        :return: The activated of this CorUser.
        :rtype: bool
        """
        return self._activated

    @activated.setter
    def activated(self, activated):
        """
        Sets the activated of this CorUser.

        :param activated: The activated of this CorUser.
        :type: bool
        """

        self._activated = activated

    @property
    def activationkey(self):
        """
        Gets the activationkey of this CorUser.

        :return: The activationkey of this CorUser.
        :rtype: str
        """
        return self._activationkey

    @activationkey.setter
    def activationkey(self, activationkey):
        """
        Sets the activationkey of this CorUser.

        :param activationkey: The activationkey of this CorUser.
        :type: str
        """

        self._activationkey = activationkey

    @property
    def createdby(self):
        """
        Gets the createdby of this CorUser.

        :return: The createdby of this CorUser.
        :rtype: str
        """
        return self._createdby

    @createdby.setter
    def createdby(self, createdby):
        """
        Sets the createdby of this CorUser.

        :param createdby: The createdby of this CorUser.
        :type: str
        """

        self._createdby = createdby

    @property
    def createddate(self):
        """
        Gets the createddate of this CorUser.

        :return: The createddate of this CorUser.
        :rtype: date
        """
        return self._createddate

    @createddate.setter
    def createddate(self, createddate):
        """
        Sets the createddate of this CorUser.

        :param createddate: The createddate of this CorUser.
        :type: date
        """

        self._createddate = createddate

    @property
    def email(self):
        """
        Gets the email of this CorUser.

        :return: The email of this CorUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this CorUser.

        :param email: The email of this CorUser.
        :type: str
        """

        self._email = email

    @property
    def firstname(self):
        """
        Gets the firstname of this CorUser.

        :return: The firstname of this CorUser.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """
        Sets the firstname of this CorUser.

        :param firstname: The firstname of this CorUser.
        :type: str
        """

        self._firstname = firstname

    @property
    def id(self):
        """
        Gets the id of this CorUser.

        :return: The id of this CorUser.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CorUser.

        :param id: The id of this CorUser.
        :type: int
        """

        self._id = id

    @property
    def imageurl(self):
        """
        Gets the imageurl of this CorUser.

        :return: The imageurl of this CorUser.
        :rtype: str
        """
        return self._imageurl

    @imageurl.setter
    def imageurl(self, imageurl):
        """
        Sets the imageurl of this CorUser.

        :param imageurl: The imageurl of this CorUser.
        :type: str
        """

        self._imageurl = imageurl

    @property
    def langkey(self):
        """
        Gets the langkey of this CorUser.

        :return: The langkey of this CorUser.
        :rtype: str
        """
        return self._langkey

    @langkey.setter
    def langkey(self, langkey):
        """
        Sets the langkey of this CorUser.

        :param langkey: The langkey of this CorUser.
        :type: str
        """

        self._langkey = langkey

    @property
    def lastmodifiedby(self):
        """
        Gets the lastmodifiedby of this CorUser.

        :return: The lastmodifiedby of this CorUser.
        :rtype: str
        """
        return self._lastmodifiedby

    @lastmodifiedby.setter
    def lastmodifiedby(self, lastmodifiedby):
        """
        Sets the lastmodifiedby of this CorUser.

        :param lastmodifiedby: The lastmodifiedby of this CorUser.
        :type: str
        """

        self._lastmodifiedby = lastmodifiedby

    @property
    def lastmodifieddate(self):
        """
        Gets the lastmodifieddate of this CorUser.

        :return: The lastmodifieddate of this CorUser.
        :rtype: date
        """
        return self._lastmodifieddate

    @lastmodifieddate.setter
    def lastmodifieddate(self, lastmodifieddate):
        """
        Sets the lastmodifieddate of this CorUser.

        :param lastmodifieddate: The lastmodifieddate of this CorUser.
        :type: date
        """

        self._lastmodifieddate = lastmodifieddate

    @property
    def lastname(self):
        """
        Gets the lastname of this CorUser.

        :return: The lastname of this CorUser.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """
        Sets the lastname of this CorUser.

        :param lastname: The lastname of this CorUser.
        :type: str
        """

        self._lastname = lastname

    @property
    def login(self):
        """
        Gets the login of this CorUser.

        :return: The login of this CorUser.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """
        Sets the login of this CorUser.

        :param login: The login of this CorUser.
        :type: str
        """

        self._login = login

    @property
    def passwordhash(self):
        """
        Gets the passwordhash of this CorUser.

        :return: The passwordhash of this CorUser.
        :rtype: str
        """
        return self._passwordhash

    @passwordhash.setter
    def passwordhash(self, passwordhash):
        """
        Sets the passwordhash of this CorUser.

        :param passwordhash: The passwordhash of this CorUser.
        :type: str
        """

        self._passwordhash = passwordhash

    @property
    def resetdate(self):
        """
        Gets the resetdate of this CorUser.

        :return: The resetdate of this CorUser.
        :rtype: datetime
        """
        return self._resetdate

    @resetdate.setter
    def resetdate(self, resetdate):
        """
        Sets the resetdate of this CorUser.

        :param resetdate: The resetdate of this CorUser.
        :type: datetime
        """

        self._resetdate = resetdate

    @property
    def resetkey(self):
        """
        Gets the resetkey of this CorUser.

        :return: The resetkey of this CorUser.
        :rtype: str
        """
        return self._resetkey

    @resetkey.setter
    def resetkey(self, resetkey):
        """
        Sets the resetkey of this CorUser.

        :param resetkey: The resetkey of this CorUser.
        :type: str
        """

        self._resetkey = resetkey

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CorUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
