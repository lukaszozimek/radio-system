# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CoreAddressPT(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, city=None, country=None, id=None, network_id=None, number=None, postal_code=None, street=None):
        """
        CoreAddressPT - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'city': 'str',
            'country': 'str',
            'id': 'int',
            'network_id': 'int',
            'number': 'str',
            'postal_code': 'str',
            'street': 'str'
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'id': 'id',
            'network_id': 'networkId',
            'number': 'number',
            'postal_code': 'postalCode',
            'street': 'street'
        }

        self._city = city
        self._country = country
        self._id = id
        self._network_id = network_id
        self._number = number
        self._postal_code = postal_code
        self._street = street

    @property
    def city(self):
        """
        Gets the city of this CoreAddressPT.

        :return: The city of this CoreAddressPT.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this CoreAddressPT.

        :param city: The city of this CoreAddressPT.
        :type: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def country(self):
        """
        Gets the country of this CoreAddressPT.

        :return: The country of this CoreAddressPT.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this CoreAddressPT.

        :param country: The country of this CoreAddressPT.
        :type: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def id(self):
        """
        Gets the id of this CoreAddressPT.

        :return: The id of this CoreAddressPT.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CoreAddressPT.

        :param id: The id of this CoreAddressPT.
        :type: int
        """

        self._id = id

    @property
    def network_id(self):
        """
        Gets the network_id of this CoreAddressPT.

        :return: The network_id of this CoreAddressPT.
        :rtype: int
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """
        Sets the network_id of this CoreAddressPT.

        :param network_id: The network_id of this CoreAddressPT.
        :type: int
        """

        self._network_id = network_id

    @property
    def number(self):
        """
        Gets the number of this CoreAddressPT.

        :return: The number of this CoreAddressPT.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """
        Sets the number of this CoreAddressPT.

        :param number: The number of this CoreAddressPT.
        :type: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def postal_code(self):
        """
        Gets the postal_code of this CoreAddressPT.

        :return: The postal_code of this CoreAddressPT.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """
        Sets the postal_code of this CoreAddressPT.

        :param postal_code: The postal_code of this CoreAddressPT.
        :type: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")

        self._postal_code = postal_code

    @property
    def street(self):
        """
        Gets the street of this CoreAddressPT.

        :return: The street of this CoreAddressPT.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """
        Sets the street of this CoreAddressPT.

        :param street: The street of this CoreAddressPT.
        :type: str
        """
        if street is None:
            raise ValueError("Invalid value for `street`, must not be `None`")

        self._street = street

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CoreAddressPT):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
