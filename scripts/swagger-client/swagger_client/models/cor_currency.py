# coding: utf-8

"""
    protone API

    protone API documentation

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CorCurrency(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, delimiter=None, id=None, name=None, network=None, short_name=None, symbol=None):
        """
        CorCurrency - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'delimiter': 'str',
            'id': 'int',
            'name': 'str',
            'network': 'CorNetwork',
            'short_name': 'str',
            'symbol': 'str'
        }

        self.attribute_map = {
            'delimiter': 'delimiter',
            'id': 'id',
            'name': 'name',
            'network': 'network',
            'short_name': 'shortName',
            'symbol': 'symbol'
        }

        self._delimiter = delimiter
        self._id = id
        self._name = name
        self._network = network
        self._short_name = short_name
        self._symbol = symbol

    @property
    def delimiter(self):
        """
        Gets the delimiter of this CorCurrency.

        :return: The delimiter of this CorCurrency.
        :rtype: str
        """
        return self._delimiter

    @delimiter.setter
    def delimiter(self, delimiter):
        """
        Sets the delimiter of this CorCurrency.

        :param delimiter: The delimiter of this CorCurrency.
        :type: str
        """

        self._delimiter = delimiter

    @property
    def id(self):
        """
        Gets the id of this CorCurrency.

        :return: The id of this CorCurrency.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CorCurrency.

        :param id: The id of this CorCurrency.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this CorCurrency.

        :return: The name of this CorCurrency.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CorCurrency.

        :param name: The name of this CorCurrency.
        :type: str
        """

        self._name = name

    @property
    def network(self):
        """
        Gets the network of this CorCurrency.

        :return: The network of this CorCurrency.
        :rtype: CorNetwork
        """
        return self._network

    @network.setter
    def network(self, network):
        """
        Sets the network of this CorCurrency.

        :param network: The network of this CorCurrency.
        :type: CorNetwork
        """

        self._network = network

    @property
    def short_name(self):
        """
        Gets the short_name of this CorCurrency.

        :return: The short_name of this CorCurrency.
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """
        Sets the short_name of this CorCurrency.

        :param short_name: The short_name of this CorCurrency.
        :type: str
        """

        self._short_name = short_name

    @property
    def symbol(self):
        """
        Gets the symbol of this CorCurrency.

        :return: The symbol of this CorCurrency.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """
        Sets the symbol of this CorCurrency.

        :param symbol: The symbol of this CorCurrency.
        :type: str
        """

        self._symbol = symbol

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CorCurrency):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
